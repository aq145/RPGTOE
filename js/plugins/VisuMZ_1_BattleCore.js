//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.83;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.83] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

function _0x6108(){const _0x23cb54=['_performDamageMotion','shift','_homeEasing','_action','format','createActionSequenceProjectile','adjustPosition_ScaleUp','drawActorFace','StatusWindowSkinHide','isOTB','Targets2','Game_Action_executeDamage','gradientFillRect','battlerShadowScaleY','anchorY','ScaleY','createShadowSprite','updateKeyboardKeys','addAnimationSpriteToContainer','EscapeFail','StatusWindowAttachmentFrontOffsetY','NextTurn','extraHeight','jsScaleUp','isVisualHpGaugeDisplayed','updateCustomActionSequence','measureTextWidth','Index','VisuMZ_1_MainMenuCore','_phase','DefeatEvent','Scene_Battle_startActorCommandSelection','isBattleCoreTargetScope','basicGaugesY','putActiveBattlerOnTop','battleSys','Game_BattlerBase_initMembers','isAnyoneJumping','_list','message2','setSvBattlerSprite','counterAttack','ActSeq_Impact_MotionTrailRemove','battleGrow','validTargets','dimColor2','BattleSystemSTB','increaseHits','battleCameraData','maxCommands','_targetDamage','Name','attackAnimationIdSlot','NameAlwaysVisible','AddHpGaugeOption','updateStyleOpacity','processDefeat','NameFontSize','Victory','text','lineRect','SmoothImage','lifeSteaItem','createHelpWindow','battleDisplayText','ANGLE','displayChangedBuffs','selectAllActors','Sprite_StateIcon_updateFrame','removeImmortal','message4','TpGaugeOffsetX','_onceParallelInterpreters','ActSeq_Animation_AttackAnimation','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','_battlerHue','jsCritRateAsTarget','guard','unshift','isForRandomBattleCore','drawItemStyleIcon','updateBattlebackBitmap1','uiInputPosition','_duration','getConfigValue','updateScale','horzCells','_battleCoreNoElement','CommandAddAutoBattle','battleSpriteSkew','Sprite_SvEnemy','showAnimation','loadBitmap','Game_Action_setSubject','Scene_Boot_onDatabaseLoaded','createDamageCounterWindow','ActiveTpbOptionsMessage','TargetLocation','tpbActorSwitchConditionsMet','parallaxScrollYinvertEnemy','jsScaleDown','WaitForSpin','ActSeq_Movement_WaitForMovement','canUse','targetObjects','battleLayoutStyle','Scene_Battle_skillWindowRect','_forActor','performWeaponAnimation','isIncludedInEnemyWindow','CmdIconItem','VoiceLine','_iconIndex','battleback1Name','BattleManager_startAction','getSpecificBattlerKeyTarget','rec','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','apply','Game_Action_executeHpDamage','HelpSkillType','padding','AutoMeleeAoE','isTpbReady','svBattlerShadowVisible','damageOffsetX','_targetFloatHeight','Direction','_damageCounterWindow','loadEnemy','updateBattlebackBitmap2','isForNotUser','context','isForDeadFriend','addFightCommand','createAttachedSprites','attackAnimationId1','BattleManager_processVictory','animation','ActSeq_Impact_ShockwaveEachTargets','isStateResist','setBattlePortrait','applyBattleCoreJS','updateHomeMove','setup','pow','Game_Battler_startTpbTurn','Sprite_Battler_isMoving','isBattleSys','CheckVisibleBattleNotetags','prepare','createPartyCommandWindow','_skewDuration','cancel','opponentsUnit','ActSeq_Impact_MotionBlurTarget','updateBossCollapse','ResetFocus','TpGaugeOffsetY','BattleVictoryJS','Scene_Map_updateCallMenu','setAttack','portraitFilename','sort','_callSceneOptions','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','skillId','createBattleField','addBattleCoreAutoBattleStartupCommand','isForOne','CalcActionSpeedJS','alphabetic','enabled','startSkew','addShowHpGaugeCommand','_flipScaleX','HpGaugeOffsetY','commandNameWindowDrawBackground','_targetSkewY','VisuMZ_3_SideviewBattleUI','_motionType','addCombatLogCommand','setBattleCameraPoint','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ActSeq_Animation_BalloonIconRange','_lastHpDamage','autoMeleeMultiTargetActionSet','deactivate','preemptive','mpDamageFmt','AutoMeleeSolo','24626YywNPs','dragonbonesData','ext','helpWindowRect','_weaponSprite','alive\x20opponents','return\x200','ArPenRate','hpHealingFmt','balloonId','_targetBattlerKey','_animationContainer','GuardFormulaJS','WIDTH','PRE-','svActorVertCells','Game_Battler_clearMotion','MP_Flat','autoBattleWindowRect','performActionEnd','VisuMZ_2_WeaponSwapSystem','battlerName','registerCommand','showEnemyAttackAnimation','_blendColor','updateBattleBalloons','finishActionSet','isCommandEnabled','emulateAction','StatusWindowSkinFilename','checkTpbInputOpen','all\x20actors','Angle','DamageRate','damageRate','process_VisuMZ_BattleCore_BaseTroops','optDisplayTp','Rate','Game_Action_isForDeadFriend','_endBattle','isForAll','makeCommandList','ShowMpDmg','ActorCmd','animationWait','_stypeIDs','MotionAni','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','_growDuration','Game_Actor_setup','ShowRemovedState','width','innerWidth','performMiss','isAnyoneMoving','randomTargets','drawGauge','createStateIconSprite','Sprite_Actor_initMembers','Sprite_Enemy_updateCollapse','HitFlat','createBattleBalloon','textWidth','isAutoBattle','iterateBattler','makeTargetSprites','sortEnemies','_commonEventIDs','PostRegenerateJS','JumpToLabel','Slot','criticalHitRate','setBattleZoom','Game_Action_executeMpDamage','EscapeSuccessJS','ActSeq_Grid_RemovePassiveStatesFromNode','isTickBased','partyCommandWindowRectBorderStyle','addGuardCommand','textSizeEx','isActing','_performActionEnd','updateMotionCount','setEnemyWindowMode','CheckMapBattleEventValid','updateGrow','addMeleeReturnActionSet','icon','_skewEasing','_target','ActSeq_Grid_PushFromTargetNode','WaitForProjectile','_angleRevertOnFinish','setBattlerBattleCore','motionSpeed','moveBattlerHomeDistance','USER-DEFINED\x201','activate','loop','PerformAction','reserveCommonEvent','Shadow2','CmdIconAutoBattle','updateAction','getItemDamageAmountTextBattleCore','turnCount','_growEasing','VisuMZ_0_CoreEngine','BattleSystemCTB','mainFontSize','ActSeq_BattleLog_PopBaseLine','Game_BattlerBase_canGuard','_stateSprite','Scene_ItemBase_applyItem','Mechanics','createBattleUIOffsetY','replace','Game_Battler_onBattleStart','Scene_Map_launchBattle','All\x20Enemies','updateEvent','performAttack','resize','isHidden','drawItemStatusListStyle','_cache','deselect','MotionSpeed','Window_ItemList_maxCols','itemTextAlign','BattleLayout','isAnimationPlaying','createUIContainer','ATTACK','addSkillTypeCommand','addSkillCommands','onEncounter','placeActorName','performTpbActiveCheckSwitch','ComboWindow','getNextSubjectFromPool','BattleManager_startBattle','setupDamagePopup','SyncBuffExpire','performActionMotions','getChildIndex','isDead','clearGlobalVariables','Window_BattleLog_displayTpDamage','createLowerLayer','wtypeId','-%1\x20MP','mainSpriteScaleY','isForAnyone','increaseTotal','fnordAddedStates','stepFlinch','itemEffectAddAttackState','applyHardDamageCap','setSkill','DistanceAdjust','NOTE','_dragonbonesSpriteContainer','updateTargetPosition','AlphaFilter','addSingleSkillCommand','actionSplicePoint','iconHeight','prepareBorderActor','compatibilityVisible','BattleManager_selectNextCommand','WaitForOpacity','hasSvBattler','frameCount','removeOnceParallelInterpreter','_tpbSceneChangeCacheActor','performActionEndMembers','Scene_Battle_logWindowRect','globalAlpha','StatusWindowAttachmentBack','alive\x20battlers\x20not\x20target','createCommandVisibleJS','ActSeq_Movement_FaceTarget','ActSeq_Horror_GlitchRemove','ActSeq_Mechanics_CtbSpeed','setupFont','ALL_ENEMIES','Window_BattleLog_refresh','battleAngle','ScaleX','RequiresDefeat','Window_BattleActor_hide','_cancelButton','AnchorY','clearRect','pageup','updateEffectsContainer','die','setImmortal','performDamage','ActSeq_BattleLog_AddText','Window_BattleLog_performCounter','ActSeq_Movement_HomeMoveToJsPoint','findTargetSprite','parse','waitForOpacity','ActSeq_Mechanics_EmulateSkillEffect','_forcedBattlers','round','ActSeq_ChangeSkew','displayTpDamage','Exploited','itemEffectGainTp','_updateDuration','onJumpEnd','setupMotionBlurImpactFilter','Game_BattlerBase_isStateResist','reduce','createCommandNameWindow','_showWeapon','alterChange','iconWidth','ActSeq_Grid_TeleportToNode','VisuMZ_3_BattleVoices','destroyDamageSprite','opacitySpeed','setupShockwaveImpactFilter','VisuMZ_2_BattleGridSystem','Game_Battler_onTurnEnd','ActSeq_Mechanics_EmulateGuardEffect','targetDistortionSpritePosition','setBackgroundType','BattleAI','_back2Sprite','PopupShiftX','Sprite_Enemy_initVisibility','actorCommandEscape','autoBattleStart','ApplyImmortal','FollowTurn','isSkipPartyCommandWindow','setFullActionsPTB','_targetOffsetY','commandStyleCheck','Armor-%1-%2','right','BG_TYPE','commandOptions','drawLineText','changeCtbChargeTime','_forceAction','Shadow','battleMembers','version','PostEndBattleJS','_allTargets','_bypass_applyBattleCoreHitRateJS','checkShowHideBattleNotetags','jsAccuracyAsTarget','buffAdd','AnchorX','applySoftDamageCap','Parse_Notetags_TraitObjects','Game_Interpreter_updateWaitMode','Game_Temp_requestBalloon','Scene_Map_initialize','_updateCursorFilterArea','makeSpeed','isFightCommandEnabled','USER-DEFINED\x205','selectNextActor','isGrowing','PreApplyJS','ActSeq_Movement_Skew','Game_Party_removeActor','ActSeq_Camera_FocusPoint','updateBattlerContainer','processVictory','debuffAdd','DefaultSoftScaler','isSpriteVisible','maxBattleMembers','_floatDuration','Window_Options_statusText','collapseType','pagedown','ActSeq_Grid_AddTriggerToNode','positionOffsetY','Interrupt','Game_Enemy_setup','createAutoBattleWindow','_attackAnimationId','ActSeq_Impact_ZoomBlurTargetCenter','commandName','GetActionSequenceSpecialTargetWithFlags','clearHorrorEffects','makeUniqueNames','_waitMode','Scene_Battle_createPartyCommandWindow','_homeY','checkShowHideSkillNotetags','displayAction','performCounter','attackAnimationId2','Sprite_Battler_setHome','VisuMZ_1_SkillsStatesCore','SvBattlerMass-%1-%2','freezeTime','Scene_Party','offsetY','_windowLayer','updateJump','special','freezeFrame','join','_targetAngle','TPB','_frontAttachmentSprite','169500jZeTjT','getNextDamagePopup','showNormalAnimation','evalDamageFormulaBattleCore','dead\x20opponents','textAlign','_targetGrowY','processBattleCoreJS','WaitCount1','string','_statusWindow','VisuMZ_4_CombatLog','removeBuff','terminate','_displayBattleCoreTransitionErrorMsg','Settings','FlashColor','alive\x20enemies','statusWindowRectXPStyle','ActSeq_Projectile_Animation','clearMotion','svActorHorzCells','Game_Action_evalDamageFormula','Sprite_Damage_createChildSprite','updateLastTarget','createActorCommandWindowBattleCore','HpGauge','SkewY','_preBattleCommonEvent','NewPopupBottom','OffsetAdjust','CriticalDuration','856fAGCNf','Sprite_Actor_moveToStartPosition','PreEndBattleJS','backColor','flashColor','disperseDamage','target','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','skillTypes','setHandler','_makeCursorAlpha','FaceDirection','isMeleeSingleTargetAction','BattleManager_makeActionOrders','Scene_Battle_start','onEncounterBattleCore','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','Game_Battler_clearDamagePopup','updateShakeFlinch','Window_BattleStatus_drawItemImage','Scale','tone','SkewX','Sprite_Weapon_loadBitmap','ActSeq_Camera_Clamp','windowAreaHeight','createSeparateDamagePopups','numRepeats','refreshActorPortrait','_statusType','startPartyCommandSelection','_buttonText','setupBattlebackBattleCore','PostApply%1JS','MotionType','Window_BattleLog_displayCurrentState','Game_Interpreter_command283','StartTurnMsg','Turns','placeGauge','displaySubstitute','_actorSprites','ActSeq_Mechanics_HpMpTp','PosOffsetX','ActSeq_Grid_AddTriggerToNodeJS','Window_BattleStatus_initialize','isCancelled','updateAttachmentSprites','isCertainHit','glitch','adjustPosition_ScaleToFit','loadPicture','Sprite_Battler_damageOffsetY','svBattlerAnchorY','battleOpacity','performEvasion','ActSeq_Movement_Float','_forcing','TP_Flat','_indent','becomeSTBExploited','skillWindowRect','updateShadowVisibility','cancelActorInput','StartTurnWait','ActSeq_Movement_WaitForOpacity','prototype','ActSeq_Grid_TraverseToNode','onAllActionsEnd','_weather','onActorOk','VisuMZ_3_BattleAI','forceAction','setupZoomBlurImpactFilter','isDamagePopupRequested','updatePadding','map','CalcEscapeRatioJS','StepDuration','auto','executeHpDamage','Scene_Battle_startPartyCommandSelection','addOptionsCommand','9745650oqcOZl','_offsetY','height','_endingBattle','magicSkills','setTroopPage','updateStateIconSprite','addOnceParallelInterpreter','battleJump','destroy','Scene_Battle_createActorCommandWindow','stepBack','customDamageFormula','commandSymbol','endBattle','_drawTextOutline','addChild','drawText','repeats','startGrow','Scene_Battle_onEnemyCancel','removedBuffs','not\x20focus','_actorCommandWindow','addCommand','hitText','ShowMissEvasion','requestMotionRefresh','battlelog','processEnemyModeTouchBattleCore','Game_Action_setSkill','_spriteset','WtypeId','Radius','focus','gainTp','AniDuration','popupDamage','battleCoreResumeLaunchBattle','isInputting','pointY','maxItems','dying','hitIndex','ENEMY_OFFSET_Y','ActSeq_Impact_Oversaturate','ActSeq_Impact_ColorBreak','Game_Map_battleback2Name','getAttackMotionSlot','isForAnyoneFocusFriends','HelpAutoBattle','Sprite_Actor_setActorHome','customFontFace','CounterPlayback','onSelectAction','slice','OffsetY','isQueueOptionsMenu','actor','_uiContainer','startWeaponAnimation','Window_BattleLog_performAction','Game_Battler_forceAction','isPlaytest','adjustPosition_ScaleDown','index','VisualCutinEffect','updateBitmap','symbol','isCustomActionSequence','Sprite_Enemy_updateBossCollapse','Scene_Battle_createAllWindows_ComboWindow','isBorderStylePortraitShown','emulateActionEffect','setupActionSet','isNegativeLifeSteal','Game_Action_setGuard','clearBattleBalloons','battleFloat','refreshMotion','isHiddenSkill','displayReflectionPlayBack','_damagePopupArray','WaitForSkew','attack','update','LIGHTBULB','isBTB','setCommonEvent','_tpbState','isAutoBattleCommandAdded','_svBattlerData','removeAnimation','EasingType','origin','battleEffect','isConfused','ForceExploited','clearOnceParallelInterpreters','finalizeScale','mpHealingFmt','updateCallMenu','guardLifeSteal','Game_Interpreter_command301','CheckActSeqProjectileVersion','forceEscapeSprite','callOptions','weapons','makeSuccess','enemyId','battleProjectiles','updateBorderSprite','_lastEnemy','MeleeDistance','forceSelect','LIGHT-BULB','HITTYPE_PHYSICAL','SvWeaponMass-%1-%2','flipVisualCutinHorz','show','abs','addCustomCommands','ActSeq_Cutin_EndVisualCutinEffectAll','_appeared','isChangingOpacity','XPActorCommandLines','meetsUsableItemConditions','_visualHpGauge_JustDied','PostDamageAsUserJS','statusWindowRectBorderStyle','clearBattleRefreshRequest','Game_Action_updateLastTarget','setLetter','BindCommonEventKeysForGroup','svAnchorY','canAddSkillCommand','_shadowScaleX','processEscape','isDuringNonLoopingMotion','makeBattleCommand','XPSpriteYLocation','waitForEffect','applyTargetFilters','setSubject','addedDebuffs','onEnemyOk','_enemyIDs','PreStartBattleJS','resizeWindowBorderStyle','default','Window_BattleLog_performMiss','requestMotion','ActSeq_Grid_AnimationJsAtNode','isBattleTest','processBorderActor','battlerKey','addDebuff','ShowPortraits','cameraClamp','finishActorInput','setBattleCameraTargets','Game_Troop_setup','Scene_Battle_onEnemyOk','inputting','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','isAnyoneChangingOpacity','ACTOR_OFFSET_Y','WaitForNewLine','displayStartMessages','_lastAction','_jumpDuration','isAttack','animationId','Game_Action_itemEffectAddAttackState','log','canAttackBattleCore','targetBattlerContainerOpacity','deadMembers','BreakShields','ActSeq_Horror_NoiseRemove','regenerateAll','CTB','Game_Temp_requestAnimation','maxTp','hitType','performAction','performAttackSlot','Scene_Battle_startActorSelection','Skills','createAllWindows','isFriendly','ActSeq_Weapon_NextActiveWeapon','ActSeq_Animation_ActionAnimation','svBattlerData','updateWeather','ArRedRate','CmdIconOptions','VisuMZ_2_BattleSystemPTB','requestAnimation','refresh','start','enemy','encounterList','targetsForOpponents','weatherType','ActSeq_Animation_ItemAnimation','totalDmgFmt','battleCoreTpbMainPhase','EnemyOffsetX','alive\x20enemies\x20not\x20target','initVisibility','ActSeq_Motion_MotionType','isAnyoneSpinning','_animation','usePremadeActionSequence','parseForcedGameTroopSettingsBattleCore','_borderPortraitTargetX','attackTimesAdd','command119','mainSprite','resetBreakShield','guardHpLifeSteal','Override','ShowAddedState','useDigitGrouping','ChangeOrderBy','Scene_Options_maxCommands','FocusY','CmdIconEscape','isItemCommandEnabled','makeActions','checkBattleEnd','ShowWeapon','_battlerName','performSubstitute','ParseActorNotetags','onMoveEnd','ActSeq_Mechanics_ActiveChainInputDisable','exit','callOkHandler','MANUAL','command236','addLoadListener','Game_Action_isForOne','blockWidth','Filename','_defeatedEnemies','Strength','_updateCursorArea','setupIconTextPopup','gainCurrentActionsETB','isNonSubmenuCancel','visibilityState','recoverAll','BTestBypass','processExtendTroopMembers','#%1','startTurn','isStatusAffected','PostEndTurnJS','EnemyOffsetY','_visibleDuration','_interpreter','onBattleEnd','statusTextAutoBattleStyle','performSTBExploiter','sliceMax','Parse_Notetags_Action','OffsetX','SWEAT','helpAreaHeight','AS\x20USER','Spriteset_Battle_update','_updateClientArea','concat','active','_floatEasing','virtualClick','randomInt','ActSeq_Mechanics_OnceParallel','clearBattleCoreData','isSceneBattle','_character','updateHelp','COMBATLOG','ActSeq_Mechanics_PtbConvert','SwitchCritical','battleMove','Game_Action_isForRandom','Window_BattleLog_performDamage','helpAreaBottom','_createColorFilter','canGuard','displayEvasion','ITEM','process_VisuMZ_BattleCore_DamageStyles','center','resetFontSettings','applyBattleCoreHitRateJS','setActionState','battleCommands','Scene_Battle_onActorCancel','Game_Temp_initialize','initialize','NameOffsetY','HelpOptions','CriticalDmgFlat','coreEngineRepositionEnemies','refreshStatusWindow','isForAnyoneFocusOpponents','invokeAction','updateStatusWindowPosition','battler','mpDamage','chant','_lineHeight','autoSelectPriority','waitForAnimation','makeHpDamageText','isNameTemporarilyVisible','sleep','victory','CoreEngine','startEnemySelection','_inputting','_colorTone','MpGaugeOffsetX','initElementStatusCore','makeTargetsBattleCore','ComboWindow_DrawJS','Targets1','lifeStealTrait','getMenuImage','ActSeq_Zoom_Scale','StateIconOffsetX','noise','declareGlobalVariables','SHOW_BUTTON','cancelTargetSelectionVisibility','_tempActor','ShakeFlinchDuration','forceMotion','inputtingAction','growBattler','Formula','setBattlerFlip','process_VisuMZ_BattleCore_Action_Notetags','isValid','WaitCount2','_partyCommandWindow','isBorderPortraitSpriteVisible','CriticalHitMultiplier','custom','ShowReflect','setBattleSkew','dead\x20friends','resetCounter','frontview_ui','battleCommandName','clearFreezeMotion','startActorSelection','applyAngleChange','AutoBattle','isGuardWaiting','windowPadding','startDamagePopup','swing','criticalDmgFlat','expRate','_opacityEasing','ShowHpDmg','pop','AsUser','\x5cI[%1]%2','CommonEventID','applyEasing','QUESTION','moveBattlerHomeToPoint','performShakeFlinch','itemHit','numberFontFace','effect','COMBAT\x20LOG','setupNegativeImpactFilter','_currentActor','ForceRandom','isGuardLifeSteal','isTpbMainPhase','removeStatesAuto','svShadow','PostApplyAsTargetJS','effects','critical','font','addText','traitObjects','subject','_battleCoreForcedElements','gaugeLineHeight','%1EndTurnJS','placeStateIcon','_cursorArea','command3011','BattleStartEvent','hasStaticSvBattler','_back1Sprite','wait','canInput','substitute','updateWaitMode','drawItemStatus','ARRAYNUM','EnableSoftCap','createPartyCommandWindowBattleCore','_itemWindow','ActSeq_Grid_AddPassiveStatesToNode','ShowCosts','textColor','ReflectPlayback','bottom','setupBattleCoreData','JS\x20%1END\x20TURN','inHomePosition','BattleManager_endBattle','VisuMZ_2_AggroControlSystem','Scene_Battle_updateStatusWindowPosition','code','createEffectActionSet','getHalfActionsPTB','_enemyWindow','isPartyCommandWindowDisabled','isCTB','onBattleStartBattleCore','isAlwaysVisible','Window_BattleLog_performReflection','BattleGridSystem','trueRandomTarget','battleCorePreBattleCommonEvent','AllowRandomSpeed','repeatTargets','aliveMembers','toLowerCase','updateOpacity','isPartyTpbInputtable','_stateIconSprite','parameters','BULB','isMagicSkill','PartyCmd','addDamageSprite','isEscapeCommandEnabled','ExtraSettings','_targetIndex','skill','match','performRecovery','applyItem','setupWeaponAnimation','updateBorderStyle','slices','_createCursorArea','Debuffs','chantStyle','ActSeq_Movement_Jump','canAlterActionCostPTB','actorCommandSingleSkill','Exploiter','BattleManager_startInput','shouldHideBattleEndPopups','portraitType','_logWindow','_subject','Sprite_Gauge_smoothness','ActSeq_Mechanics_AddState','setGuard','_battlerContainer','isATB','EFFECT_COMMON_EVENT','initBattlePortrait','%1Event','isActiveTpbReady','openBattleActorWindow','_motion','shadow','performFlinch','StatusWindowAttachmentFront','addGeneralOptions','mainSpriteHeight','Sprite_Battler_update','ActSeq_Camera_FocusTarget','isDisplayEmergedEnemies','ActSeq_Set_WholeActionSet','svActor','CommandVisible','motionType','needsSelectionBattleCore','applyData','currentSymbol','ShowPopup','setActiveWeaponSlot','setMoveEasingType','retreat','obj','_tpbChargeTime','ActSeq_Inject_AnimationStart','getDefeatedEnemies','ShowAddedBuff','processOk','drawSingleSkillCost','isEnemy','changePaintOpacity','moveToStartPosition','_floatWholeDuration','extraPositionY','<CENTER>%1','AttackAnimation','VisuMZ_3_BoostAction','createEnemyNames','TextColor','...','switchToWeaponType','updateStaticSvBattlerFrames','createCancelButton','processForcedAction','some','skewDuration','applyBattleCoreCriticalHitRateJS','ActSeq_Weapon_SetActiveWeapon','ShakeFlinch','isAffectedByBreakShield','makeActionList','isOptionsCommandEnabled','Reveal','ActSeq_Movement_WaitForScale','canEscape','ConvertCount','isBreakStunned','Scene_QuickLoad','_skillIDs','_text','CheckVisibleSkillNotetags','ActSeq_Impact_ShockwavePoint','actorCommandAutoBattle','maxLines','ActSeq_DB_DragonbonesMotionAni','ActSeq_Mechanics_BoostPointsStoreData','TpbGaugeOffsetY','_skewY','ActSeq_Mechanics_CtbOrder','battleAnimation','helpWindowRectBorderStyle','ZZZ','ActSeq_Grid_ClearPassiveStatesFromNode','Sprite_Animation_targetSpritePosition','WaitForCamera','BattleManager_checkBattleEnd','_speed','JS\x20%1END\x20ACTION','updateCancel','actorId','_borderPortraitSprite','displayMpDamage','troop','_targetGrowX','updateAttachedSprites','_index','actor%1-portrait','BattleManager_checkSubstitute','delay','ItemID','startAction','bind','startOpacity','SvBattlerSolo-%1-%2','setHue','drawComboText','clearFreezeMotionForWeapons','isBusy','ActSeq_Impact_TimeStop','battleCamera','pause','_multipliers','VisuMZ_3_FrontviewBattleUI','VisuMZ_4_BreakShields','DamageDisplay','Pre','ShowTpDmg','fillRect','hpRate','skew','ActSeq_Mechanics_SwapWeapon','command339','SkillsStatesCore','_activeWeaponSlot','battleback2Name','parallaxHueEnemyModifier','ShowEnemyGauge','ActSeq_Mechanics_Immortal','iconText','Game_Action_numRepeats','Game_Battler_performDamage','VisuMZ_3_VisualCutinEffect','ActionItemMsg','updateLink','SwitchMissEvade','STRUCT','registerDefeatedEnemy','_item','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','_ptbActionCost','setBattlerMotionTrailData','partyCommandWindowRectXPStyle','canUseItemCommand','ActSeq_BattleLog_Refresh','canBattlerMove','Window_PartyCommand_initialize','note','SkillItemMiddleLayout','_baseY','autoBattleUseSkills','ShowSubstitute','Game_BattlerBase_refresh','isSubjectValidForAnyoneSelect','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','Sprite_Battler_setBattler','DefaultDamageStyle','_growY','selectPreviousCommand','setupCriticalEffect','createJS','_updateFilterArea','reverse','showPortraits','calcWindowHeight','resizeWindowXPStyle','Game_Battler_makeSpeed','revertTpbCachedActor','setText','text\x20target','getAttackWeaponAnimationId','maxCols','FrontViewSelect','Scene_Battle_selectNextCommand','CheckVisibleSwitchNotetags','ButtonAssist','motionIdle','dimColor1','_armorPenetration','targetActionSet','animationNextDelay','ActSeq_Movement_FaceJsPoint','VisuMZ_3_WeaknessDisplay','applyDamageCaps','sliceMin','loadSystem','closeBattleActorWindow','isMeleeMultiTargetAction','onEscapeSuccess','Game_Action_itemTargetCandidates','_enemySprites','updateActors','startInjectAnimation','isDrain','endAction','close','waitCount','Scene_Battle_startEnemySelection','ActSeq_Set_FinishAction','ActSeq_Mechanics_EmulateItemEffect','onStaticEnemyBitmapLoad','_battleField','_flinched','_waitCount','autoMeleeSingleTargetActionSet','clearNameTempVisibility','Game_Interpreter_terminate','Sprite_Enemy_setBattler','trim','removedStateObjects','_reflectionTarget','#ffffff','addItemCommand','isPlaying','dead\x20battlers','removeBuffsAuto','endAnimation','clearElementChanges','moveBattlerToPoint','Window_BattleLog_performEvasion','hidden','ShowCounter','_updateColorFilter','HP_Rate','alterCost','extendTroopMembers','isSkillItemWindowsMiddle','visualCutinPortraitIndex','CmdStyle','_drawTextBody','updatePointAnimations','scale','PreDamageJS','command301','snapForBackground','ShowAddedDebuff','attachSpritesToDistortionSprite','checkSubstitute','ANGER','canGuardBattleCore','CriticalHitRate','push','FlashDuration','_escapeRatio','setupRgbSplitImpactFilter','checkCacheKey','drawIcon','criticalDmgRate','NameAttachStateIcon','ARRAYEVAL','makeData','startSpin','createEnemyWindow','applyGuard','JS\x20BATTLE\x20DEFEAT','loadSvActor','Sprite_Enemy_update','_animationSprites','ParseWeaponNotetags','setBattleCameraOffset','PreStartTurnJS','isNextSceneBattleTransitionable','itemTargetCandidates','-%1','ActSeq_Mechanics_StbRemoveExcessActions','StateIconOffsetY','result','_angleWholeDuration','ParseArmorNotetags','Window_BattleLog_displayCritical','filter','USER-DEFINED\x203','setHelpWindow','isForOneBattleCore','ActSeq_Movement_Spin','JS\x20%1APPLY\x20%2','PostApplyJS','process_VisuMZ_BattleCore_PreBattleCommonEvent','ActSeq_Zoom_WaitForZoom','clear','HitRate','resetResultSwitches','_regionBattleback2','changeInputWindow','Game_BattlerBase_eraseState','changeCtbCastTime','applyVariance','ActSeq_Motion_RefreshMotion','WaitForAnimation','VisuMZ_2_BattleSystemSTB','shouldPopupDamage','actions','cancelHpLifeSteal','cutinExit','allBattleMembers','parallaxScrollY','_actor','mmp','_totalDamage','jsScaleToFit','skewBattler','ActSeq_Mechanics_BoostPointsChange','Scene_Battle_helpWindowRect','isAutoBattleCommandEnabled','fnordRemovedStates','ActSeq_BattleLog_WaitForBattleLog','isForRandom','testApply','worldTransform','_targetHomeX','selectSymbol','updateSelectionEffect','FaceAway','_growX','isBuffAffected','battleVoices','requestFauxAnimation','battleUIOffsetY','evalDamageFormula','getColor','ActSeq_Impact_BlueRedInvert','State-%1-%2','MaxLines','faceRect','makeTargets','CriticalHitFlat','clearResult','surprise','BARE\x20HANDS','doesPageHaveOnceParallelStart','stopInjectAnimation','addAutoBattleCommand','WEAPON\x20SWAP','removeHorrorEffect','updateHpGaugePosition','Enable','_forcedHomeY','ALL_ACTORS','wholeActionSet','CommandAddOptions','Sprite_Actor_updateFrame','floor','USER-DEFINED\x202','preparePartyRefresh','%1Apply%2JS','isSkill','Defeat','updateEventMain','find','isJumping','iconIndex','ParseEnemyNotetags','BackColor','clearWeaponAnimation','_opacityDuration','paySkillCost','updateDuration','isGuard','Window_BattleLog_update','hitsDmgFmt','UNTITLED','isTurnBased','thrust','performJump','statusWindowRectDefaultStyle','PointJS','currentExt','clearTargetBattlerKey','LIGHT','innerHeight','HEART','allowRandomSpeed','BaseTroopIDs','_createClientArea','_immortal','ActSeq_Weapon_ClearActiveWeapon','PostStartTurnJS','DisplayAction','ActionSkillMsg2','setBattleAngle','Letter','isActor','CreateCommonEventKeys','drawItemImageListStyle','ActSeq_Angle_Reset','displayActionResults','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','onOpacityEnd','_eventId','temporaryVisibile','battlerSprites','_namesCount','Game_Interpreter_PluginCommand','createBorderStylePortraitSprite','EndBattlePopups','Window_BattleLog_displayActionResults','refreshCursor','82CsolDl','isShownOnBattlePortrait','parallaxScrollX','commandStyle','battleStatusSprite','all\x20enemies','fontSize','ShowFacesListStyle','BattleManager_inputtingAction','setupMotion','ActSeq_Animation_BalloonIcon','itemEffectRecoverMp','_surprise','MAXMP','JSON','ceil','compareEnemySprite','ActSeq_Movement_HomeMoveToPoint','_lines','Text','_totalValue','setupBlueRedInvertImpactFilter','_forcedHomeX','DefaultHardCap','autoBattle','isWaiting','Scene_Options','requestRefresh','MpGaugeOffsetY','ActSeq_Skew_Reset','ElementStatusCore','Game_Action_setAttack','makeTargetsBattleCoreJS','updateCounter','regenerateAllBattleCore','ARRAYJSON','Window_BattleLog_displayMiss','makeTargetSelectionMoreVisible','swapEnemyIDs','Sprite_AnimationMV_updatePosition','Sprite_Actor_updateBitmap','%1-%2','SETTINGS','_canLose','updateEffectContainers','commandNameWindowCenter','createEnemies','casting','_commonEventQueue','getAttackMotion','ActSeq_Mechanics_BreakShieldReset','CmdIconFight','autoSelect','getWtypeIdWithName','equips','CreateActionSequenceTargets','missile','Sprite_Battler_startMove','clamp','isSideButtonLayout','makeDamageValue','Parse_Notetags_Targets','portraitFlipHorz','performCollapse','jsAccuracyAsUser','BattleCmdList','arRedRate','AsTarget','_angleEasing','frameDelay','Game_Action_applyGlobal','EscapeFailureJS','StateID','Scene_Battle_updateBattleProcess','updateFloat','setBlendColor','removeBattleBalloon','_angleDuration','initBattleCore','alignBattleCoreDamageSprite','executeMpDamage','createInnerPortrait','lifeStealRate','_targetHits','StepDistanceX','scope','selectAllEnemies','_isBattlerFlipped','ALL\x20SKILLS','boxHeight','NameLegacy','TpbActiveChangeEnabled','_motionSpeed','startJump','applyImmortal','toString','ActSeq_Animation_ChangeBattlePortrait','rate','Linear','drawItemStatusXPStyle','transform','PosOffsetY','isPhysical','AutoBattleCancel','getBattlePortraitOffsetY','_lastActor','drawItemImage','_wtypeIDs','addAttackCommand','DamageType%1','setHelpWindowItem','ActorOffsetX','displayType','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','guardSkillId','displayFailure','ShowCurrentState','callUpdateHelp','ActSeq_Mechanics_RemoveState','BattlebackScale','createMultiTargetWindows','IconStypeMagic','DTB','ParseSkillNotetags','AutoBattleMsg','alterActionCostPTB','Window_BattleLog_popBaseLine','gainMp','updateBattlebackBitmap','Weapon-%1-%2','ConvertParams','ForceDeath','AutoBattleOK','ActSeq_Target_RandTarget','Window_BattleEnemy_show','getDamageStyle','getSkillIdWithName','applyForcedGameTroopSettingsBattleCore','ActSeq_Movement_HomeMoveBy','toUpperCase','setupHpGaugeSprite','updateFrame','alive\x20enemies\x20not\x20user','negativeMpLifeSteal','loadWindowskin','Sprite_Enemy_createStateIconSprite','1388kpRBuz','okTargetSelectionVisibility','_playTestFastMode','displayCurrentState','DamageFlat','addState','setFrame','skillItemWindowRectMiddle','updateStateSpriteBattleCore','jsOneForOne','_opacityWholeDuration','itemWindowRect','updateCommandNameWindow','ActSeq_Element_AddElements','Mirror','onBattleEndBattleCore','addChildToBack','isDTB','_homeX','VariableHeal','actionBattleCoreJS','startActorCommandSelection','isAlwaysHidden','Window_BattleActor_show','refreshRequest','onBattleStart','addNewState','_padding','Sprite_Actor_createStateSprite','displayBuffs','redraw','name','process_VisuMZ_BattleCore_TraitObject_Notetags','_hpGaugeSprite','friendsUnit','DigitGrouping','TextAlign','CustomFontFace','_commonEventKey','list','evaded','AnimationID','WaitForEntrance','adjustFlippedBattlefield','removeActor','children','bgType','ActSeq_Inject_WaitForInjectAni','ChargeRate','Scene_Battle_initialize','_targetSkewX','4321290GEfRyK','performMagicEvasion','Window_ActorCommand_initialize','addExtendedTroopMembers','anchor','commandEscape','ParseItemNotetags','actorCommandWindowRect','VisuMZ_3_ActSeqImpact','WaitForEffect','AttachStateOffsetX','_targets','Scene_Battle_commandEscape','smoothness','stepForward','command357','PortraitScale','faceWidth','clearForcedGameTroopSettingsBattleCore','ActSeq_Mechanics_PtbFullHalfAction','updateStart','addChildAt','ActorOffsetY','_handlers','_borderPortraitDuration','isSpriteVS8dir','TextFmt','getHardDamageCap','getInputButtonString','random','requestDragonbonesAnimation','getEnemyIdWithName','PreRegenerateJS','HomePosJS','attackMotions','ActSeq_Grid_MoveTargetsInDirection','_damageContainer','MAT','setupTextPopup','CurrentTurn','HalfActions','_shakeFlinchDuration','_svBattlerSprite','STB','VisuMZ_2_BattleSystemBTB','isAnimationShownOnBattlePortrait','PreStartActionJS','JS\x20%1DAMAGE\x20%2','Elements','collapse','clearActiveWeaponSlot','Sprite_Enemy_updateStateSprite','magicReflection','displayAffectedStatus','bitmapHeight','itemRect','displayBattleCoreTransitionErrorMsg','startMove','negativeLifeSteal','_flashColor','ActSeq_Animation_CastAnimation','updateStateSprite','flashDuration','Game_Map_battleback1Name','gainHp','selectNextCommandTpb','ActSeq_Mechanics_WaitForEffect','States','CommandWidth','createHpGaugeSprite','setCustomDamageFormula','Game_Action_itemHit','changeTurnOrderByCTB','AllowCollapse','boxWidth','hpAffected','_linkedSprite','PrioritySortActive','targetObject','ActSeq_Grid_RemoveTriggerFromNode','ActSeq_BattleVoice_PlayCommonLine','isPreviousSceneBattleTransitionable','ARRAYSTR','turnOrderChangeOTB','createTroopNote','findSymbolExt','applyResultSwitches','STYPES','Window_BattleLog_performCollapse','hasBeenDefeatedBefore','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','smooth','canAttack','updatePositionBattleCore','makeActionListAutoAttack','_effectDuration','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','pushBaseLine','addedBuffs','damageContainer','_jumpMaxHeight','TpbGaugeOffsetX','removeChild','_emptyBitmap','ActSeq_Set_SetupAction','showHelpWindow','addPartyCommand','_mainSprite','Game_Enemy_transform','NameOffsetX','ShowHide','addEscapeCommand','itemPadding','createHelpWindowBattleCore','Height','inBattle','Game_Actor_equips','description','selectAll','isAlive','CombatLogIcon','isAppeared','updateSkew','HelpEscape','createKeyJS','popBaseLine','ActSeqImpact','createDigits','textAlignment','_selectionEffectCount','StateOverlayOffsetY','_homeWholeDuration','loadBattleback2','splice','isMoving','weaponImageId','VisuMZ_2_HorrorEffects','allowCollapse','onGrowEnd','getBattlerKeyTargets','_targetX','updateShadow','nextActiveWeaponSlot','BattleManager_endAction_ComboWindow','isForOpponentBattleCore','Style','ActSeq_Horror_TVRemove','startTpbTurn','repositionEnemiesByResolution','setupOversaturateImpactFilter','Window_SkillList_maxCols','_additionalSprites','svAnchorX','Sprite_Battler_initMembers','_methods','_enemy','ActSeq_Camera_WaitForCamera','createAttachmentSprites','isForOpponent','Game_Battler_performMiss','ActSeq_Motion_FreezeMotionFrame','BattleManager_isTpbMainPhase','disarmLifeSteal','getDragonbones','battleBalloon','startShakeFlinch','playBattleVoice','MessageWait','Window_BattleLog_performActionStart','ComboWindow_RectJS','isMagical','SkillItemBorderCols','_actorWindow','VisuMZ_1_ElementStatusCore','_autoBattle','checkShowHideSwitchNotetags','isNextScene','WaitForMovement','_homeDuration','IconIndex','_floatHeight','actionEffect','stateMotionIndex','BattleManager_abort','placeTimeGauge','isAnyoneGrowing','animationBaseDelay','VisuMZ_3_ActSeqProjectiles','applyGlobalCommonEventNotetags','undecided','_skillWindow','Actor','GroupDigits','visualHpGauge','options','damage','executeDamage','WaitComplete','Game_BattlerBase_canAttack','criticalHitFlat','ActSeq_Impact_MotionBlurScreen','ATK','blt','targetSpritePosition','_fauxAnimationSprites','movement','Game_BattlerBase_die','displayCritical','ActionEffect','MIN_SAFE_INTEGER','addBattleCoreAutoBattleStyleCommand','Users','hardDamageCap','createBattleUIOffsetX','SkillItemStandardCols','_tempBattler','offsetX','requestBattleBalloon','prepareCustomActionSequence','1668ntmcKz','ActSeq_Horror_Clear','drawSkillCost','isImmortal','playEnemyAttack','SkillID','Targets','ParseAllNotetags','setSTBExploited','isDeathStateAffected','pattern','Game_Battler_regenerateAll','_requestRefresh','createActorCommandWindow','getItemDamageAmountTextOriginal','updateShadowScale','Frame','charging','filters','PreApplyAsUserJS','max','Point','VisuMZ_2_BattleSystemATB','Game_Action_needsSelection','eraseState','resetNameTempVisibility','hpDamageFmt','Game_Battler_performActionStart','SkipPartyCmd','ActSeq_Cutin_WaitForEntrance','Window_BattleLog_displayMpDamage','ActSeq_Movement_MoveToTarget','refreshDimmerBitmap','abnormal','_lastRegenFrameCount','changeBattlerOpacity','VisuMZ_2_DragonbonesUnion','command283','spriteId','_pattern','skills','_damages','JS\x20%1START\x20TURN','createBattleFieldBattleCore','ActSeq_Motion_WaitMotionFrame','isPTB','PARTY','isFastForward','2208BmuHHQ','_targetOpacity','ActSeq_Horror_NoiseCreate','CastAnimation','playOnceParallelInterpreter','onSkewEnd','itemLineRect','VariableID','DistanceY','setStateTurns','isActionSelectionValid','ActSeq_Grid_AnimationTypeAtNode','GetActionSequenceSpecialTarget','lukEffectRate','ActSeq_Mechanics_EmulateAttackEffect','repositionCancelButtonBorderStyle','ACTOR_OFFSET_X','Game_Party_addActor','retrieveBattleBalloon','FRUSTRATION','itemCri','Game_Battler_performEvasion','process_VisuMZ_BattleCore_CreateRegExp','MUSIC','ActSeq_DB_DragonbonesTimeScale','StatusWindowSelectableBackHide','Item-%1-%2','ActSeq_BattleLog_UI','onAngleEnd','startFloat','removeChildFromUiContainer','process_VisuMZ_BattleCore_Notetags','value1','ClearBattleLog','isCurrentItemEnabled','SvWeaponSolo-%1-%2','ActSeq_Grid_AnimationIDAtNode','battlerSmoothImage','AdjustRect','isDisarmLifeSteal','_shadowScaleY','FUNC','autoSelectLastSelected','EscapeSuccess','freezeMotion','border','compareBattlerSprites','_baseX','VisuMZ_3_ActiveChainSkills','getBattlePortrait','+%1\x20MP','includes','portraitIndex','setTargetBattlerKey','StyleOFF','BattleLog','endIcon','drawTextTopAligned','evade','ActSeq_Animation_PlayAtCoordinate','missle','Scene_Battle_createCancelButton','_enemyNameContainer','startBattle','Scene_Battle_windowAreaHeight','battleSkew','uiMenuStyle','commandFight','setLastPluginCommandInterpreter','pages','createMiss','clearAllVisualCutins','VarianceFormulaJS','getCommonEventIdWithName','getLastHpDamage','WaitCount','ARRAYFUNC','process_VisuMZ_BattleCore_Failsafes','ActSeq_Animation_BalloonIconSpecific','Window_Options_addGeneralOptions','Window_BattleEnemy_initialize','SILENCE','alive\x20actors\x20not\x20target','removeCurrentAction','12xeuGZM','CreateCutinSettings','constructor','FlinchDistanceY','displayReflection','_colorFilter','clearDamagePopup','playCancel','cancelLifeSteal','battleInjectAni','_motionCount','alterType','callNextMethod','alive\x20friends\x20not\x20user','ShowButton','removeState','time','ActSeq_Mechanics_PtbAlterCost','_shakeFlinchPower','removeAnimationFromContainer','_preemptive','itemEffectAddNormalState','ShowRemovedBuff','dead','fight','EVAL','Game_Action_makeTargets','setHorrorEffectSettings','missed','processRefresh','parallaxScrollXinvertEnemy','Sprite_Actor_update','getTraitSetKeys','createTargetsJS','_targetHomeY','BattleManager_onEscapeSuccess','_battlerKeyCache','setItem','displayItemMessage','bossCollapse','physical','jsCritRateAsUser','StepDistanceY','jumpBattler','commandNameWindowDrawText','Enemy','partyCommandWindowRect','addSingleSkillCommands','ActSeq_Grid_PullToTargetNode','updateNameTempVisibility','startIcon','forceWeaponAnimation','startInput','addAutoBattleCommands','_baseLineStack','CriticalDmgRate','needsSelection','BattleDefeatJS','portrait','PostEndActionJS','ActionAnimation','_autoBattleWindow','loadBattleback1','DamageStyles','isForFriend','CmdTextAutoBattle','priority','ActSeq_Movement_MoveBy','ActSeq_Horror_TVCreate','floatBattler','parent','createDamageSprite','Game_Action_itemEffectAddNormalState','isBattlerTargeted','processTouch','getStypeIdWithName','_tpbNeedsPartyCommand','BattleManager_onEscapeFailure','selectNextCommand','getItemDamageAmountLabelOriginal','singleSkill','ANTI_TINT_UI','ActSeq_Mechanics_DamagePopup','WaitForExit','action','svBattlerName','setBattler','ActSeq_Camera_Reset','BattleManager_onEncounter','call','StatusWindowAttachmentFrontOffsetX','top','drawItemBackground','timeScale','addBuff','remove','BattleManager_processDefeat','_customDamageFormula','setHome','displayMiss','isItem','processRandomizedData','updateBattleProcess','_totalHits','_distortionSprite','ActSeq_Mechanics_EmulateSkillCost','duration','_targetY','rowSpacing','ActSeq_Impact_Desaturate','_battler','Scene_Battle_partyCommandWindowRect','isFlipped','message1','ActionCenteredName','ReflectAnimation','Sprite_Battler_damageOffsetX','Window_BattleEnemy_hide','_forcedBattleLayout','float','ActionSequence','centerFrontViewSprite','prev\x20target','revealNewWeaknesses','pha','visualCutinPortraitType','_actorMultiTargetWindow','Game_Map_setupBattleback','RevertAngle','isOpponent','onTurnEnd','attackSkillId','BattleLogRectJS','frameVisible','createBattleFieldContainer','angleDuration','_jumpHeight','contents','skillItemWindowRectBorderStyle','battleZoom','stateRate','ActionStart','Scene_Map_initializeAfter','itemHeight','isSkewing','PreDamageAsUserJS','checkSceneBattleTransitionable','ActSeq_Movement_BattleStep','isAnyoneSkewing','updateAngleCalculations','displayRemovedStates','hitFlat','cutinEnter','isAnyoneInjectAniPrepping','Game_Action_setItem','createContents','isSelected','BgType','battleStatusWindowAnimationContainer','VisuMZ_2_PartySystem','createChildSprite','StyleName','OverallFormulaJS','ActSeq_Mechanics_BreakShieldChange','extraPositionX','Duration','isAnyoneInjectAnimating','_helpWindow','Game_System_initialize','ScaleToFit','select','WaitForAngle','targetsForFriends','getFullActionsPTB','base','changeBattlebacks','Game_Action_clear','hide','ActSeq_Grid_ActionAnimationAtNode','DefaultSoftCap','adjustPosition_1for1','isDebuffAffected','PrioritySortActors','startHomeMove','NameDamageVisibility','frontviewSpriteY','comboWindowOffsetX','updateShadowBattleCore','_createCursorSprite','_injectAnimationSprite','BattleSystemBTB','_growWholeDuration','_effectsContainer','Game_Troop_expTotal','setupBattleback','process_VisuMZ_BattleCore_PluginParams','Destination','%1StartBattleJS','BattleEndEvent','_tempEquipCheck','startMotion','isStateAffected','isArray','_deathStateApplied','left','_battlePortrait','forActor','ShowPortraitsBorderStyle','1:1','_branch','isForAliveFriend','VariableDmg','loadSvEnemy','Enemy-%1-%2','ENEMY_OFFSET_X','processActorCommandCancelTPB','_backAttachmentSprite','pauseInjectAnimation','getNextSubject','CriticalColor','displayChangedStates','useItem','_frame','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','create','isClicked','_baseTexture','AutoAddState','updateShadowPosition','_createEffectsContainer','process_VisuMZ_BattleCore_jsFunctions','performMoveToTargets','NUM','HITTYPE_MAGICAL','createRateJS','MAXHP','commandAutoBattle','logActionList','_cacheTextWidth','initMembers','ActSeq_Mechanics_StateTurnsChangeBy','_effectType','min','1628KSqzXy','shouldDisperseDamage','VisuMZ_3_ActSeqCamera','Skill-%1-%2','Window_BattleLog_displayEvasion','isAnyoneFloating','isPreviousScene','Game_Action_testApply','applyFreezeMotionFrames','_nameTempVisibleDuration','front\x20center','isSTB','Window_ActorCommand_setup','setActiveWeaponSet','currentValue','opacity','_active','Sprite_Battler_updatePosition','cameraOffsetDuration','sortDamageSprites','LifeStealRegExp','length','updateVisibility','updateCollapse','FlinchDuration','playOnceParallelTroopPage','_jumpWholeDuration','minimumStayDuration','WaitForZoom','alive\x20friends','ActSeq_Movement_WaitForSpin','drawItem','mainSpriteWidth','MOTIONS','ActSeq_Animation_AttackAnimation2','DisablePartyCmd','messageSpeed','isTpb','selectedBattlers','user','_shadowSprite','param','parseLocalizedText','setBattlerFacePoint','drawItemStyleIconText','removeDamageSprite','performCastAnimation','save','AutoNotetag','addWindow','_actions','alterBreakShield','PopupPosition','lineHeight','LUK','_skewX','lastFilename','_enemyID','statusWindowRect','updateOnceParallelInterpreters','command301_PreBattleEvent','waitForMovement','abort','Setting','gainCurrentActionsFTB','onDatabaseLoaded','comboWindowOffsetY','PortraitScaleBorderStyle','dataId','checkAutoCustomActionSequenceNotetagEffect','walk','JS\x20%1END\x20BATTLE','ActSeq_Horror_GlitchCreate','ActSeq_Mechanics_Collapse','ActSeqProjectiles','enemyNames','checkExtendTroopCompatibility','weaponTypes','Game_Action_isForAll','_skewWholeDuration','clearBattlerMotionTrailData','Spriteset_Battle_createLowerLayer','onDisabledPartyCommandSelection','ActSeq_Impact_TimeScale','AUTO\x20BATTLE','gainBravePoints','setupChild','Sprite_Actor_setBattler','Window_BattleLog_performActionEnd','_buttonKey','BoostPoints','PreEndTurnJS','FlinchDistanceX','isAnyBattleBalloonPlaying','isCustomBattleScope','split','_currentAngle','mhp','makeActionOrders','<CUSTOM\x20ACTION\x20SEQUENCE>','getDualWieldTimes','_actionBattlers','cameraDuration','createWeather','updateRefresh','setValue','updateFlip','Scene_Battle_itemWindowRect','ActSeq_Mechanics_AtbGauge','anchorX','ParseClassNotetags','ActSeq_Mechanics_StbExploit','Scene_Battle_createEnemyWindow','autoBattleStyle','ActionCount','expTotal','updateForceAction','damageOffsetY','fontFace','SceneManager_push','CriticalHitRateJS','nameY','startAttackWeaponAnimation','performActionStart','BattleCore','adjustPosition','PreEndActionJS','Window_BattleLog_performMagicEvasion','waitForJump','ParseStateNotetags','_animationCount','_enemyWindowMode','PostStartActionJS','Game_Actor_makeActionList','battlerShadowScaleX','ActSeq_Zoom_Reset','portraitFlipVert','minimumHits','processBattleBalloonRequests','getBattlerFromKey','numTargets','contentsOpacity','positionOffsetX','createEnemyNameContainer','fadeShiftX','MultiTarget','ActSeq_Movement_MoveToJsPoint','unchanged','ActSeq_Mechanics_FtbAction','members','_scene','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','VisuMZ_4_IconBalloons','setupBattleCore','Game_Action_isForOpponent','buffRemove','ActSeq_Animation_BalloonAnimation','WaitForJump','_hue','gainHalfActionsPTB','ActSeq_Mechanics_BtbGain','position','hpDamage','hitsHealFmt','_executeHpDamage','AllActorsText','PopupDuration','Scene_Battle_onActorOk','changeAtbChargeTime','tpbCommandFight','AutoBattleRect','alive\x20battlers\x20not\x20user','_battleBalloonSprites','actorCommandCancelTPB','BindCommonEventKeysForObj','deathStateId','HP_Flat','isFloating','updatePhase','GUARD','SvMotionIdleMass-%1-%2','StyleON','HITTYPE_CERTAIN','type','ActSeq_Animation_ShowAnimation','damageText','canMove','DualWield','BattleManager_cancelActorInput','addWeaponSwapCommand','Game_Battler_onBattleEnd','damageCounterWindowRect','createMultiTargetWindow','MDF','PopupShiftY','Wave','addActor','AntiTintUiElements','open','Scene_Battle_selectPreviousCommand','createStateSprite','RegExp','drawEnemyName','Spriteset_Battle_updateActors','head','attackStatesRate','isActiveTpb','PreApplyAsTargetJS','updateSpin','occasion','Sprite_Battleback_adjustPosition','ActSeq_Mechanics_VariablePopup','turn','_dimmerSprite','_offsetX','isAtbChargingState','battleSpin','meetsSelectFrontviewActorConditions','getBattlePortraitFilename','stypeId','softDamageCap','Game_Map_encounterList','SKILLS','addTextToCombatLog','_commandNameWindow','weatherPower','onHomeMoveEnd','isSideView','addImmortal','autoBattleAtStart','waitForFloat','currentClass','_executedValue','waitForNewLine','itemLifeStealRate','extraPositionScaledY','escape','Scene_Battle_update','isSpinning','mainSpriteScaleX','PopupOffsetX','isFrameVisible','bitmap','setActorHome','selectLast','makeEscapeRatio','updatePosition','getLastPluginCommandInterpreter','DistanceX','isOptionsCommandAdded','ActSeq_Movement_WaitForSkew','ScaleUp','svBattlerAnchorX','_flashDuration','Window_BattleLog_popupDamage','stop','isBattlerFlipped','_cursorSprite','Intensity','restore','VisuMZ_2_BattleSystemCTB','drawTextEx','WaitForScale','isBattleFlipped','isTriggered','Window_BattleLog_performRecovery','applyCritical','Window_BattleLog_performSubstitute','onEscapeFailure','jsAccuracy','isChanting','\x20to\x20%1\x20midbattle.','BattleManager_updatePhase','AddOption','adjustWeaponSpriteOffset','performReflection','Post','_freezeMotionData','ActSeq_Target_NextTarget','processPostBattleCommonEvents','_battleLayoutStyle','Game_Action_isForAliveFriend','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','moveBattlerDistance','Window_BattleLog_displayFailure','All\x20Allies','_enemyId','ActSeq_Movement_HomeMoveToTarget','+%1','performLifeSteal','ConvertActionSequenceTarget','GRID\x20MOVE','value','canSingleOrMultipleSelect','STR','CopyCombatLog','_enemies','alive\x20actors\x20not\x20user','Sprite_Battler_updateMain','setCursorRect','Game_Action_makeDamageValueDisperse','textBaseline','ActSeq_Target_CurrentIndex','clearActiveWeaponSet','Damage','CastCertain','Scene_Battle_stop','3960bvFgAK','setWaitMode','visualCutinPortraitHue','getBattlePortraitOffsetX','launchBattle','isRightInputMode','battleCommandIcon','ActSeq_Element_Clear','spinBattler','PostStartBattleJS','createMainSprite','COBWEB','isCancelLifeSteal','battleUIOffsetX','isBattleRefreshRequested','isForAliveFriendBattleCore','_battleCoreBattleStartEvent','isDying','_colorType','applyGlobal','checkTpbInputClose','softDamageCapRate','initMembersBattleCore','Game_Action_executeHpDamage_ComboWindow','indexOf','_lastPluginCommandInterpreter','ActSeq_Skew_WaitForSkew','_battleCoreBattleResumeAfter','_regionBattleback1','addChildToUiContainer','AutoBattleBgType','visible','hitRate','_weaponImageId','makeDeepCopy','AGI','_battleBalloonQueue','move','onActorCancel','item','SvMotionIdleSolo-%1-%2','currentAction'];_0x6108=function(){return _0x23cb54;};return _0x6108();}const _0x9c6fcf=_0x5cad;(function(_0xb64f2a,_0x17e50c){const _0x234c77=_0x5cad,_0x6c0a85=_0xb64f2a();while(!![]){try{const _0x2225b0=-parseInt(_0x234c77(0x5f4))/0x1*(-parseInt(_0x234c77(0x562))/0x2)+-parseInt(_0x234c77(0x702))/0x3*(-parseInt(_0x234c77(0x879))/0x4)+parseInt(_0x234c77(0x18d))/0x5*(-parseInt(_0x234c77(0x786))/0x6)+parseInt(_0x234c77(0xa95))/0x7*(-parseInt(_0x234c77(0x1ad))/0x8)+parseInt(_0x234c77(0x200))/0x9+-parseInt(_0x234c77(0x627))/0xa+-parseInt(_0x234c77(0x9ac))/0xb*(-parseInt(_0x234c77(0x732))/0xc);if(_0x2225b0===_0x17e50c)break;else _0x6c0a85['push'](_0x6c0a85['shift']());}catch(_0xd4c9ca){_0x6c0a85['push'](_0x6c0a85['shift']());}}}(_0x6108,0x87b9f));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x9c6fcf(0x4e3)](function(_0x5545a2){const _0x33e738=_0x9c6fcf;return _0x5545a2['status']&&_0x5545a2[_0x33e738(0x69c)][_0x33e738(0x765)]('['+label+']');})[0x0];VisuMZ[label][_0x9c6fcf(0x19c)]=VisuMZ[label][_0x9c6fcf(0x19c)]||{},VisuMZ[_0x9c6fcf(0x5e4)]=function(_0x52a385,_0x3cb515){const _0x4eaca=_0x9c6fcf;for(const _0x137efc in _0x3cb515){if(_0x137efc[_0x4eaca(0x3c6)](/(.*):(.*)/i)){const _0x4b6cf1=String(RegExp['$1']),_0x48da7=String(RegExp['$2'])[_0x4eaca(0x5ed)]()[_0x4eaca(0x4a5)]();let _0x7f729a,_0x475709,_0x2708ea;switch(_0x48da7){case _0x4eaca(0x86e):_0x7f729a=_0x3cb515[_0x137efc]!==''?Number(_0x3cb515[_0x137efc]):0x0;break;case _0x4eaca(0x39b):_0x475709=_0x3cb515[_0x137efc]!==''?JSON[_0x4eaca(0xb61)](_0x3cb515[_0x137efc]):[],_0x7f729a=_0x475709[_0x4eaca(0x1f9)](_0x1f55f6=>Number(_0x1f55f6));break;case _0x4eaca(0x79f):_0x7f729a=_0x3cb515[_0x137efc]!==''?eval(_0x3cb515[_0x137efc]):null;break;case _0x4eaca(0x4ce):_0x475709=_0x3cb515[_0x137efc]!==''?JSON['parse'](_0x3cb515[_0x137efc]):[],_0x7f729a=_0x475709[_0x4eaca(0x1f9)](_0x506e3b=>eval(_0x506e3b));break;case _0x4eaca(0x570):_0x7f729a=_0x3cb515[_0x137efc]!==''?JSON['parse'](_0x3cb515[_0x137efc]):'';break;case _0x4eaca(0x585):_0x475709=_0x3cb515[_0x137efc]!==''?JSON['parse'](_0x3cb515[_0x137efc]):[],_0x7f729a=_0x475709[_0x4eaca(0x1f9)](_0x8b756e=>JSON['parse'](_0x8b756e));break;case _0x4eaca(0x75b):_0x7f729a=_0x3cb515[_0x137efc]!==''?new Function(JSON[_0x4eaca(0xb61)](_0x3cb515[_0x137efc])):new Function(_0x4eaca(0xa9b));break;case _0x4eaca(0x77e):_0x475709=_0x3cb515[_0x137efc]!==''?JSON[_0x4eaca(0xb61)](_0x3cb515[_0x137efc]):[],_0x7f729a=_0x475709[_0x4eaca(0x1f9)](_0x377f89=>new Function(JSON[_0x4eaca(0xb61)](_0x377f89)));break;case _0x4eaca(0x99f):_0x7f729a=_0x3cb515[_0x137efc]!==''?String(_0x3cb515[_0x137efc]):'';break;case _0x4eaca(0x679):_0x475709=_0x3cb515[_0x137efc]!==''?JSON[_0x4eaca(0xb61)](_0x3cb515[_0x137efc]):[],_0x7f729a=_0x475709[_0x4eaca(0x1f9)](_0x4fd913=>String(_0x4fd913));break;case _0x4eaca(0x45d):_0x2708ea=_0x3cb515[_0x137efc]!==''?JSON[_0x4eaca(0xb61)](_0x3cb515[_0x137efc]):{},_0x52a385[_0x4b6cf1]={},VisuMZ[_0x4eaca(0x5e4)](_0x52a385[_0x4b6cf1],_0x2708ea);continue;case'ARRAYSTRUCT':_0x475709=_0x3cb515[_0x137efc]!==''?JSON[_0x4eaca(0xb61)](_0x3cb515[_0x137efc]):[],_0x7f729a=_0x475709[_0x4eaca(0x1f9)](_0x417d54=>VisuMZ[_0x4eaca(0x5e4)]({},JSON[_0x4eaca(0xb61)](_0x417d54)));break;default:continue;}_0x52a385[_0x4b6cf1]=_0x7f729a;}}return _0x52a385;},(_0x31359b=>{const _0x210312=_0x9c6fcf,_0x1eb406=_0x31359b[_0x210312(0x613)];for(const _0x29ec3a of dependencies){if(!Imported[_0x29ec3a]){alert(_0x210312(0x2a4)[_0x210312(0x9da)](_0x1eb406,_0x29ec3a)),SceneManager[_0x210312(0x2ee)]();break;}}const _0x160dc5=_0x31359b['description'];if(_0x160dc5[_0x210312(0x3c6)](/\[Version[ ](.*?)\]/i)){const _0x34d869=Number(RegExp['$1']);_0x34d869!==VisuMZ[label][_0x210312(0x14c)]&&(alert(_0x210312(0xa8d)['format'](_0x1eb406,_0x34d869)),SceneManager[_0x210312(0x2ee)]());}if(_0x160dc5[_0x210312(0x3c6)](/\[Tier[ ](\d+)\]/i)){const _0x4b6adc=Number(RegExp['$1']);_0x4b6adc<tier?(alert(_0x210312(0x460)['format'](_0x1eb406,_0x4b6adc,tier)),SceneManager[_0x210312(0x2ee)]()):tier=Math[_0x210312(0x716)](_0x4b6adc,tier);}VisuMZ['ConvertParams'](VisuMZ[label]['Settings'],_0x31359b['parameters']);})(pluginData),VisuMZ[_0x9c6fcf(0x599)]=function(_0x3547f0){const _0x3ea054=_0x9c6fcf;let _0x4939bd=[];for(const _0x5a0abe of _0x3547f0){_0x4939bd=_0x4939bd['concat'](VisuMZ[_0x3ea054(0x99b)](_0x5a0abe));}return _0x4939bd[_0x3ea054(0x4e3)](_0x48e8f5=>_0x48e8f5);},VisuMZ[_0x9c6fcf(0x99b)]=function(_0x758887){const _0x2bcb04=_0x9c6fcf,_0x2eed71=BattleManager[_0x2bcb04(0x4fb)]()[_0x2bcb04(0x4e3)](_0x2b1fe9=>_0x2b1fe9&&_0x2b1fe9['isAppeared']()),_0x53eb16=BattleManager['_subject'],_0x5f0e2a=BattleManager['_target'],_0x248687=BattleManager['_allTargets']?BattleManager[_0x2bcb04(0x14e)]['slice'](0x0):_0x2eed71;_0x758887=_0x758887[_0x2bcb04(0x3b9)]()['trim']();if(_0x758887==='user')return[_0x53eb16];else{if(_0x758887==='current\x20target')return[_0x5f0e2a];else{if(_0x758887===_0x2bcb04(0x800)){if(_0x5f0e2a){const _0x39701e=_0x248687['indexOf'](_0x5f0e2a);return _0x39701e>=0x0?[_0x248687[_0x39701e-0x1]||_0x5f0e2a]:[_0x5f0e2a];}}else{if(_0x758887===_0x2bcb04(0x47e)){if(_0x5f0e2a){const _0x242d7c=_0x248687[_0x2bcb04(0x9c4)](_0x5f0e2a);return _0x242d7c>=0x0?[_0x248687[_0x242d7c+0x1]||_0x5f0e2a]:[_0x5f0e2a];}}else{if(_0x758887==='all\x20targets')return _0x248687;else{if(_0x758887===_0x2bcb04(0x222))return[_0x53eb16][_0x2bcb04(0x312)](_0x248687);else{if(_0x758887===_0x2bcb04(0x216))return _0x2eed71['filter'](_0x22e4b0=>_0x22e4b0!==_0x53eb16&&!_0x248687[_0x2bcb04(0x765)](_0x22e4b0)&&_0x22e4b0['notFocusValid']());else{if(_0x758887===_0x2bcb04(0x187))return[VisuMZ[_0x2bcb04(0x73e)]()];else{if(_0x758887[_0x2bcb04(0x3c6)](/SPECIAL (.*)>/i)){const _0x503a19=String(RegExp['$1'])['split'](',')[_0x2bcb04(0x1f9)](_0x4b5be9=>_0x4b5be9['trim']());return[VisuMZ[_0x2bcb04(0x175)](_0x503a19)];}}}}}}}}}if(_0x53eb16){if(_0x758887===_0x2bcb04(0x896))return _0x53eb16[_0x2bcb04(0x616)]()[_0x2bcb04(0x3b8)]();else{if(_0x758887===_0x2bcb04(0x793))return _0x53eb16[_0x2bcb04(0x616)]()[_0x2bcb04(0x3b8)]()[_0x2bcb04(0x4e3)](_0x551a18=>_0x551a18!==_0x53eb16);else{if(_0x758887==='alive\x20friends\x20not\x20target')return _0x53eb16[_0x2bcb04(0x616)]()[_0x2bcb04(0x3b8)]()[_0x2bcb04(0x4e3)](_0x334f7b=>_0x334f7b!==_0x5f0e2a);else{if(_0x758887===_0x2bcb04(0x363))return _0x53eb16[_0x2bcb04(0x616)]()[_0x2bcb04(0x2b1)]();else{if(_0x758887['match'](/FRIEND INDEX (\d+)/i)){const _0x2d9ed7=Number(RegExp['$1']);return[_0x53eb16['friendsUnit']()['members']()[_0x2d9ed7]];}}}}}if(_0x758887===_0x2bcb04(0xa9a))return _0x53eb16[_0x2bcb04(0xa70)]()['aliveMembers']();else{if(_0x758887==='alive\x20opponents\x20not\x20target')return _0x53eb16[_0x2bcb04(0xa70)]()[_0x2bcb04(0x3b8)]()[_0x2bcb04(0x4e3)](_0x19de91=>_0x19de91!==_0x5f0e2a);else{if(_0x758887===_0x2bcb04(0x191))return _0x53eb16['opponentsUnit']()[_0x2bcb04(0x2b1)]();else{if(_0x758887[_0x2bcb04(0x3c6)](/OPPONENT INDEX (\d+)/i)){const _0x4c5bc0=Number(RegExp['$1']);return[_0x53eb16['opponentsUnit']()[_0x2bcb04(0x90e)]()[_0x4c5bc0]];}}}}}if(_0x758887==='alive\x20actors')return $gameParty['aliveMembers']();else{if(_0x758887===_0x2bcb04(0x9a2))return $gameParty['aliveMembers']()[_0x2bcb04(0x4e3)](_0x1291f3=>_0x1291f3!==_0x53eb16);else{if(_0x758887===_0x2bcb04(0x784))return $gameParty['aliveMembers']()[_0x2bcb04(0x4e3)](_0x8938e1=>_0x8938e1!==_0x5f0e2a);else{if(_0x758887==='dead\x20actors')return $gameParty[_0x2bcb04(0x2b1)]();else{if(_0x758887[_0x2bcb04(0x3c6)](/ACTOR INDEX (\d+)/i)){const _0x5271b6=Number(RegExp['$1']);return[$gameParty['members']()[_0x5271b6]];}else{if(_0x758887['match'](/ACTOR ID (\d+)/i)){const _0x5689a5=Number(RegExp['$1']);return[$gameActors[_0x2bcb04(0x23a)](_0x5689a5)];}}}}}}if(_0x758887===_0x2bcb04(0x19e))return $gameTroop[_0x2bcb04(0x3b8)]();else{if(_0x758887===_0x2bcb04(0x5f0))return $gameTroop[_0x2bcb04(0x3b8)]()['filter'](_0x11de41=>_0x11de41!==_0x53eb16);else{if(_0x758887===_0x2bcb04(0x2d1))return $gameTroop[_0x2bcb04(0x3b8)]()[_0x2bcb04(0x4e3)](_0x162582=>_0x162582!==_0x5f0e2a);else{if(_0x758887==='dead\x20enemies')return $gameTroop['deadMembers']();else{if(_0x758887[_0x2bcb04(0x3c6)](/ENEMY INDEX (\d+)/i)){const _0x34c4e6=Number(RegExp['$1']);return[$gameTroop[_0x2bcb04(0x90e)]()[_0x34c4e6]];}else{if(_0x758887['match'](/ENEMY ID (\d+)/i)){const _0x375575=Number(RegExp['$1']);return $gameTroop[_0x2bcb04(0x3b8)]()['filter'](_0xfce460=>_0xfce460['enemyId']()===_0x375575);}}}}}}if(_0x758887==='alive\x20battlers')return _0x2eed71[_0x2bcb04(0x4e3)](_0x3a862c=>_0x3a862c['isAlive']());else{if(_0x758887===_0x2bcb04(0x924))return _0x2eed71[_0x2bcb04(0x4e3)](_0x628192=>_0x628192['isAlive']()&&_0x628192!==_0x53eb16);else{if(_0x758887===_0x2bcb04(0xb49))return _0x2eed71[_0x2bcb04(0x4e3)](_0xdfd47e=>_0xdfd47e[_0x2bcb04(0x69e)]()&&_0xdfd47e!==_0x5f0e2a);else{if(_0x758887===_0x2bcb04(0x4ab))return _0x2eed71[_0x2bcb04(0x4e3)](_0x5866f8=>_0x5866f8[_0x2bcb04(0xb27)]());}}}return[];},VisuMZ[_0x9c6fcf(0x73e)]=function(){const _0x176756=_0x9c6fcf;return BattleManager[_0x176756(0xaee)];},VisuMZ[_0x9c6fcf(0x175)]=function(_0x45169b){const _0x5b5c8d=_0x9c6fcf;return BattleManager[_0x5b5c8d(0xaee)];},PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x68f),_0x330cf1=>{const _0x202275=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x202275(0x5e4)](_0x330cf1,_0x330cf1);const _0x524200=$gameTemp[_0x202275(0x970)](),_0xc9caf2=BattleManager[_0x202275(0x9d9)],_0xa1c973=BattleManager['_subject'],_0x48865f=BattleManager['_allTargets']?BattleManager[_0x202275(0x14e)][_0x202275(0x237)](0x0):[],_0x490b1c=BattleManager['_logWindow'];if(!_0x524200||!_0xc9caf2||!_0xa1c973)return;if(!_0xc9caf2[_0x202275(0x9d3)]())return;if(_0x330cf1[_0x202275(0x54e)])_0x490b1c[_0x202275(0x17c)](_0xa1c973,_0xc9caf2[_0x202275(0x9d3)]());_0x330cf1['ApplyImmortal']&&_0x490b1c[_0x202275(0x4c6)]('applyImmortal',_0xa1c973,_0x48865f,!![]);if(_0x330cf1[_0x202275(0x813)])_0x490b1c[_0x202275(0x4c6)]('performActionStart',_0xa1c973,_0xc9caf2);if(_0x330cf1[_0x202275(0x6d8)])_0x490b1c[_0x202275(0x4c6)]('waitForMovement');if(_0x330cf1[_0x202275(0x735)])_0x490b1c['push']('performCastAnimation',_0xa1c973,_0xc9caf2);if(_0x330cf1['WaitForAnimation'])_0x490b1c[_0x202275(0x4c6)](_0x202275(0x33d));_0x524200[_0x202275(0x9ad)](_0x202275(0x21c));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x3eb),_0xf68a9e=>{const _0x146e68=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xf68a9e,_0xf68a9e);const _0x7ccc70=$gameTemp[_0x146e68(0x970)](),_0x4112cf=BattleManager[_0x146e68(0x9d9)],_0x129a56=BattleManager[_0x146e68(0x3d7)],_0x1aaeaf=BattleManager[_0x146e68(0x14e)]?BattleManager[_0x146e68(0x14e)][_0x146e68(0x237)](0x0):[],_0x53d0dd=BattleManager[_0x146e68(0x3d6)],_0x1089f1=_0xf68a9e[_0x146e68(0x934)]??![];if(!_0x7ccc70||!_0x4112cf||!_0x129a56)return;if(!_0x4112cf[_0x146e68(0x9d3)]())return;let _0x1ee7c8=_0x1089f1?_0x53d0dd[_0x146e68(0x8dd)](_0x129a56):0x1;for(let _0xf4cd31=0x0;_0xf4cd31<_0x1ee7c8;_0xf4cd31++){_0x1089f1&&_0x129a56['isActor']()&&_0x53d0dd[_0x146e68(0x4c6)](_0x146e68(0x886),_0x129a56,_0xf4cd31);if(_0xf68a9e[_0x146e68(0xaf8)])_0x53d0dd['push'](_0x146e68(0x2b9),_0x129a56,_0x4112cf);if(_0xf68a9e[_0x146e68(0x77d)]>0x0)_0x53d0dd['push'](_0x146e68(0x499),_0xf68a9e[_0x146e68(0x77d)]);if(_0xf68a9e[_0x146e68(0x7c2)])_0x53d0dd[_0x146e68(0x4c6)](_0x146e68(0xa31),_0x129a56,_0x1aaeaf,_0x4112cf['item']()[_0x146e68(0x2ac)]);if(_0xf68a9e[_0x146e68(0x4f5)])_0x53d0dd[_0x146e68(0x4c6)]('waitForAnimation');for(const _0x1a5f7e of _0x1aaeaf){if(!_0x1a5f7e)continue;if(_0xf68a9e[_0x146e68(0x6f7)])_0x53d0dd[_0x146e68(0x4c6)](_0x146e68(0x6dc),_0x129a56,_0x1a5f7e);}}_0x1089f1&&_0x129a56[_0x146e68(0x552)]()&&_0x53d0dd[_0x146e68(0x4c6)](_0x146e68(0x9a8),_0x129a56);if(_0xf68a9e[_0x146e68(0x13d)])_0x53d0dd['push'](_0x146e68(0x5c0),_0x129a56,_0x1aaeaf,![]);_0x7ccc70[_0x146e68(0x9ad)]('battlelog');}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x1e774a=>{const _0x5a567b=_0x9c6fcf;if(!SceneManager[_0x5a567b(0x319)]())return;VisuMZ[_0x5a567b(0x5e4)](_0x1e774a,_0x1e774a);const _0x305243=$gameTemp['getLastPluginCommandInterpreter'](),_0x2093df=BattleManager['_action'],_0x4259b0=BattleManager[_0x5a567b(0x3d7)],_0x3ae27a=BattleManager[_0x5a567b(0x14e)]?BattleManager[_0x5a567b(0x14e)][_0x5a567b(0x237)](0x0):[],_0x370c22=BattleManager[_0x5a567b(0x3d6)],_0x3b4219=_0x1e774a['DualWield']??![];if(!_0x305243||!_0x2093df||!_0x4259b0)return;if(!_0x2093df[_0x5a567b(0x9d3)]())return;let _0xd54ef=_0x3b4219?_0x370c22[_0x5a567b(0x8dd)](_0x4259b0):0x1;for(let _0x33a6b2=0x0;_0x33a6b2<_0xd54ef;_0x33a6b2++){for(const _0x546ba1 of _0x3ae27a){if(!_0x546ba1)continue;_0x3b4219&&_0x4259b0['isActor']()&&_0x370c22['push'](_0x5a567b(0x886),_0x4259b0,_0x33a6b2);if(_0x1e774a[_0x5a567b(0xaf8)])_0x370c22[_0x5a567b(0x4c6)](_0x5a567b(0x2b9),_0x4259b0,_0x2093df);if(_0x1e774a[_0x5a567b(0x195)]>0x0)_0x370c22[_0x5a567b(0x4c6)](_0x5a567b(0x499),_0x1e774a[_0x5a567b(0x195)]);if(_0x1e774a[_0x5a567b(0x7c2)])_0x370c22[_0x5a567b(0x4c6)](_0x5a567b(0xa31),_0x4259b0,[_0x546ba1],_0x2093df[_0x5a567b(0x9d3)]()[_0x5a567b(0x2ac)]);if(_0x1e774a['WaitCount2']>0x0)_0x370c22['push'](_0x5a567b(0x499),_0x1e774a[_0x5a567b(0x35c)]);if(_0x1e774a['ActionEffect'])_0x370c22[_0x5a567b(0x4c6)](_0x5a567b(0x6dc),_0x4259b0,_0x546ba1);}}_0x3b4219&&_0x4259b0['isActor']()&&_0x370c22[_0x5a567b(0x4c6)](_0x5a567b(0x9a8),_0x4259b0);if(_0x1e774a['ApplyImmortal'])_0x370c22[_0x5a567b(0x4c6)](_0x5a567b(0x5c0),_0x4259b0,_0x3ae27a,![]);_0x305243[_0x5a567b(0x9ad)](_0x5a567b(0x21c));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x49b),_0x569580=>{const _0x514839=_0x9c6fcf;if(!SceneManager[_0x514839(0x319)]())return;VisuMZ[_0x514839(0x5e4)](_0x569580,_0x569580);const _0x5d5675=$gameTemp[_0x514839(0x970)](),_0x333ad1=BattleManager[_0x514839(0x9d9)],_0x2870ab=BattleManager[_0x514839(0x3d7)],_0x436e28=BattleManager[_0x514839(0x14e)]?BattleManager[_0x514839(0x14e)][_0x514839(0x237)](0x0):[],_0x93bff6=BattleManager[_0x514839(0x3d6)];if(!_0x5d5675||!_0x333ad1||!_0x2870ab)return;if(!_0x333ad1[_0x514839(0x9d3)]())return;if(_0x569580[_0x514839(0x13d)])_0x93bff6[_0x514839(0x4c6)](_0x514839(0x5c0),_0x2870ab,_0x436e28,![]);if(_0x569580[_0x514839(0x2a7)])_0x93bff6['push'](_0x514839(0x962));if(_0x569580[_0x514839(0x630)])_0x93bff6[_0x514839(0x4c6)](_0x514839(0x28d));if(_0x569580[_0x514839(0x753)])_0x93bff6[_0x514839(0x4c6)]('clear');if(_0x569580['ActionEnd'])_0x93bff6[_0x514839(0x4c6)](_0x514839(0xaa8),_0x2870ab);if(_0x569580[_0x514839(0x6d8)])_0x93bff6['push'](_0x514839(0x8b6));_0x5d5675['setWaitMode'](_0x514839(0x21c));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_ChangeAngle',_0xb413e=>{const _0x49f173=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x49f173(0x87b)])return;VisuMZ[_0x49f173(0x5e4)](_0xb413e,_0xb413e);const _0xc24adf=$gameTemp[_0x49f173(0x970)](),_0x3693aa=_0xb413e[_0x49f173(0x831)];if(!_0xc24adf)return;$gameScreen['setBattleAngle'](_0xb413e[_0x49f173(0xab5)],_0xb413e['Duration'],_0xb413e[_0x49f173(0x25d)]);if(_0x3693aa)_0xc24adf['setWaitMode'](_0x49f173(0xb51));}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x555),_0x58b357=>{const _0x586d0d=_0x9c6fcf;if(!SceneManager[_0x586d0d(0x319)]())return;if(!Imported[_0x586d0d(0x87b)])return;VisuMZ[_0x586d0d(0x5e4)](_0x58b357,_0x58b357);const _0x559446=$gameTemp[_0x586d0d(0x970)](),_0x2b323d=_0x58b357[_0x586d0d(0x831)];if(!_0x559446)return;$gameScreen[_0x586d0d(0x550)](0x0,_0x58b357[_0x586d0d(0x82b)],_0x58b357[_0x586d0d(0x25d)]);if(_0x2b323d)_0x559446[_0x586d0d(0x9ad)](_0x586d0d(0xb51));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Angle_WaitForAngle',_0x1f73b3=>{const _0x219930=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x576339=$gameTemp[_0x219930(0x970)]();if(!_0x576339)return;_0x576339[_0x219930(0x9ad)](_0x219930(0xb51));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x2c0),_0x2cd561=>{const _0x4f36cc=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4f36cc(0x5e4)](_0x2cd561,_0x2cd561);const _0x248c9d=$gameTemp[_0x4f36cc(0x970)](),_0x5e9686=BattleManager['_action'],_0x4c3fd3=BattleManager[_0x4f36cc(0x3d7)],_0x2bba1e=VisuMZ[_0x4f36cc(0x599)](_0x2cd561[_0x4f36cc(0x708)]),_0x692fe1=_0x2cd561[_0x4f36cc(0x602)],_0x204c1d=BattleManager[_0x4f36cc(0x3d6)];if(!_0x248c9d||!_0x5e9686||!_0x4c3fd3)return;if(!_0x5e9686['item']())return;let _0x36cadd=_0x5e9686[_0x4f36cc(0x9d3)]()['animationId'];if(_0x36cadd<0x0)_0x36cadd=_0x4c3fd3[_0x4f36cc(0xa5e)]();$gameTemp[_0x4f36cc(0x2c6)](_0x2bba1e,_0x36cadd,_0x692fe1),_0x2cd561['WaitForAnimation']&&_0x248c9d[_0x4f36cc(0x9ad)](_0x4f36cc(0x425));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xa1f),_0x47cbd6=>{const _0x2f5239=_0x9c6fcf;if(!SceneManager[_0x2f5239(0x319)]())return;VisuMZ['ConvertParams'](_0x47cbd6,_0x47cbd6);const _0x228923=$gameTemp[_0x2f5239(0x970)](),_0x38fe07=BattleManager[_0x2f5239(0x3d7)],_0x1be2c1=VisuMZ[_0x2f5239(0x599)](_0x47cbd6[_0x2f5239(0x708)]),_0x5ca921=_0x47cbd6['Mirror'],_0x1a512a=BattleManager[_0x2f5239(0x3d6)];if(!_0x228923||!_0x38fe07)return;const _0x9f0748=_0x38fe07['attackAnimationId1']();$gameTemp[_0x2f5239(0x2c6)](_0x1be2c1,_0x9f0748,_0x5ca921),_0x47cbd6[_0x2f5239(0x4f5)]&&_0x228923[_0x2f5239(0x9ad)](_0x2f5239(0x425));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x89b),_0x3f2903=>{const _0x4939ce=_0x9c6fcf;if(!SceneManager[_0x4939ce(0x319)]())return;VisuMZ['ConvertParams'](_0x3f2903,_0x3f2903);const _0x511568=_0x2d559f[_0x4939ce(0xa0a)](_0x3f2903[_0x4939ce(0xadb)]);if(_0x511568<=0x0)return;const _0x35cdfe=$gameTemp[_0x4939ce(0x970)](),_0x2d559f=BattleManager[_0x4939ce(0x3d7)],_0x208de3=VisuMZ[_0x4939ce(0x599)](_0x3f2903[_0x4939ce(0x708)]),_0x366ebb=_0x3f2903[_0x4939ce(0x602)],_0x12230d=BattleManager[_0x4939ce(0x3d6)];if(!_0x35cdfe||!_0x2d559f)return;$gameTemp['requestAnimation'](_0x208de3,_0x511568,_0x366ebb),_0x3f2903[_0x4939ce(0x4f5)]&&_0x35cdfe[_0x4939ce(0x9ad)]('battleAnimation');}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x915),_0x2bfac6=>{const _0x1c84ec=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1c84ec(0x5e4)](_0x2bfac6,_0x2bfac6);const _0x6a2755=$gameTemp[_0x1c84ec(0x970)](),_0x3d835d=VisuMZ[_0x1c84ec(0x599)](_0x2bfac6['Targets']),_0x4bd0e0=_0x2bfac6['Balloon'];let _0x42de04=0x0;switch(_0x4bd0e0['toUpperCase']()[_0x1c84ec(0x4a5)]()){case'!':case'EXCLAMATION':_0x42de04=0x1;break;case'?':case _0x1c84ec(0x378):_0x42de04=0x2;break;case _0x1c84ec(0x749):case _0x1c84ec(0xb36):case'MUSIC\x20NOTE':case'MUSIC-NOTE':case'MUSICNOTE':_0x42de04=0x3;break;case _0x1c84ec(0x547):case'LOVE':_0x42de04=0x4;break;case _0x1c84ec(0xa17):case _0x1c84ec(0x4c3):_0x42de04=0x5;break;case _0x1c84ec(0x30d):_0x42de04=0x6;break;case _0x1c84ec(0x9b7):case'ANNOYED':case _0x1c84ec(0x745):_0x42de04=0x7;break;case _0x1c84ec(0x783):case _0x1c84ec(0x407):_0x42de04=0x8;break;case _0x1c84ec(0x545):case _0x1c84ec(0x3be):case'LIGHT\x20BULB':case _0x1c84ec(0x273):case _0x1c84ec(0x256):_0x42de04=0x9;break;case'Z':case'ZZ':case _0x1c84ec(0x427):case'SLEEP':_0x42de04=0xa;break;case _0x1c84ec(0xaf5):_0x42de04=0xb;break;case _0x1c84ec(0x52b):_0x42de04=0xc;break;case _0x1c84ec(0x4e4):_0x42de04=0xd;break;case'USER-DEFINED\x204':_0x42de04=0xe;break;case _0x1c84ec(0x15c):_0x42de04=0xf;break;}for(const _0x4e3a6d of _0x3d835d){if(!_0x4e3a6d)continue;$gameTemp[_0x1c84ec(0x700)](_0x4e3a6d,_0x42de04);}_0x2bfac6[_0x1c84ec(0x6ec)]&&_0x6a2755&&(_0x6a2755[_0x1c84ec(0x396)](0x1),_0x6a2755[_0x1c84ec(0x9ad)](_0x1c84ec(0x6cb)));}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x56c),_0x503be0=>{const _0x279999=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x279999(0x911)])return;VisuMZ['ConvertParams'](_0x503be0,_0x503be0);const _0x3b438e=$gameTemp[_0x279999(0x970)](),_0x1e117b=VisuMZ[_0x279999(0x599)](_0x503be0[_0x279999(0x708)]),_0x9e9f=_0x503be0[_0x279999(0x6da)];for(const _0x4e19de of _0x1e117b){if(!_0x4e19de)continue;$gameTemp[_0x279999(0x700)](_0x4e19de,[_0x9e9f]);}_0x503be0[_0x279999(0x6ec)]&&_0x3b438e&&(_0x3b438e['wait'](0x1),_0x3b438e['setWaitMode'](_0x279999(0x6cb)));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xa8e),_0x4feeb8=>{const _0xeb558=_0x9c6fcf;if(!SceneManager[_0xeb558(0x319)]())return;if(!Imported[_0xeb558(0x911)])return;VisuMZ['ConvertParams'](_0x4feeb8,_0x4feeb8);const _0x44e142=$gameTemp['getLastPluginCommandInterpreter'](),_0x55038c=VisuMZ[_0xeb558(0x599)](_0x4feeb8[_0xeb558(0x708)]),_0xe1310d=Math[_0xeb558(0x878)](Number(_0x4feeb8[_0xeb558(0x7b8)]||0x0),Number(_0x4feeb8[_0xeb558(0x76a)]||0x0)),_0x1b917f=Math[_0xeb558(0x716)](Number(_0x4feeb8['startIcon']||0x0),Number(_0x4feeb8[_0xeb558(0x76a)]||0x0)),_0x6160a7=[];for(let _0x24dfc5=_0xe1310d;_0x24dfc5<=_0x1b917f;_0x24dfc5++){_0x6160a7[_0xeb558(0x4c6)](_0x24dfc5);}for(const _0x2d5375 of _0x55038c){if(!_0x2d5375)continue;$gameTemp[_0xeb558(0x700)](_0x2d5375,_0x6160a7);}_0x4feeb8[_0xeb558(0x6ec)]&&_0x44e142&&(_0x44e142[_0xeb558(0x396)](0x1),_0x44e142[_0xeb558(0x9ad)](_0xeb558(0x6cb)));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x780),_0x50736e=>{const _0x2bc40f=_0x9c6fcf;if(!SceneManager[_0x2bc40f(0x319)]())return;if(!Imported[_0x2bc40f(0x911)])return;VisuMZ[_0x2bc40f(0x5e4)](_0x50736e,_0x50736e);const _0xa25264=$gameTemp['getLastPluginCommandInterpreter'](),_0x41805d=VisuMZ[_0x2bc40f(0x599)](_0x50736e[_0x2bc40f(0x708)]),_0x2c6dd6=_0x50736e['icons'];for(const _0xcc5de0 of _0x41805d){if(!_0xcc5de0)continue;$gameTemp['requestBattleBalloon'](_0xcc5de0,_0x2c6dd6);}_0x50736e[_0x2bc40f(0x6ec)]&&_0xa25264&&(_0xa25264[_0x2bc40f(0x396)](0x1),_0xa25264['setWaitMode'](_0x2bc40f(0x6cb)));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x663),_0x2f3ff5=>{const _0x8aadd2=_0x9c6fcf;if(!SceneManager[_0x8aadd2(0x319)]())return;VisuMZ[_0x8aadd2(0x5e4)](_0x2f3ff5,_0x2f3ff5);const _0x4436aa=$gameTemp[_0x8aadd2(0x970)](),_0x4c32ba=BattleManager[_0x8aadd2(0x9d9)],_0x2eb8d=_0x2f3ff5[_0x8aadd2(0x602)],_0x5dcfaa=VisuMZ[_0x8aadd2(0x599)](_0x2f3ff5['Targets']);if(!_0x4436aa||!_0x4c32ba)return;if(!_0x4c32ba['item']())return;for(const _0x1925e7 of _0x5dcfaa){if(!_0x1925e7)continue;_0x1925e7[_0x8aadd2(0x8a7)](_0x4c32ba,_0x2eb8d);}if(_0x2f3ff5['WaitForAnimation'])_0x4436aa[_0x8aadd2(0x9ad)](_0x8aadd2(0x425));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x5c2),_0x451f02=>{const _0x2b56e7=_0x9c6fcf;VisuMZ['ConvertParams'](_0x451f02,_0x451f02);const _0x33e5df=$gameTemp[_0x2b56e7(0x970)](),_0x58af88=VisuMZ[_0x2b56e7(0x599)](_0x451f02[_0x2b56e7(0x708)]),_0xef399b=_0x451f02['Filename'];if(!_0xef399b)return;for(const _0x429152 of _0x58af88){if(!_0x429152)continue;if(!_0x429152[_0x2b56e7(0x552)]())continue;_0x429152[_0x2b56e7(0xa63)](_0xef399b);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Animation_GuardAnimation',_0x242a53=>{const _0x153cea=_0x9c6fcf;if(!SceneManager[_0x153cea(0x319)]())return;VisuMZ[_0x153cea(0x5e4)](_0x242a53,_0x242a53);const _0x421b70=$gameTemp[_0x153cea(0x970)](),_0x528420=BattleManager[_0x153cea(0x3d7)],_0x1e30ac=VisuMZ[_0x153cea(0x599)](_0x242a53[_0x153cea(0x708)]),_0x1eefc3=_0x242a53[_0x153cea(0x602)];if(!_0x421b70||!_0x528420)return;const _0x30c117=$dataSkilles[_0x528420[_0x153cea(0x5d4)]()],_0x33ea8f=_0x30c117[_0x153cea(0x2ac)];$gameTemp[_0x153cea(0x2c6)](_0x1e30ac,_0x33ea8f,_0x1eefc3),_0x242a53['WaitForAnimation']&&_0x421b70[_0x153cea(0x9ad)](_0x153cea(0x425));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x2cd),_0x3ec7cb=>{const _0x4da4f7=_0x9c6fcf;if(!SceneManager[_0x4da4f7(0x319)]())return;VisuMZ[_0x4da4f7(0x5e4)](_0x3ec7cb,_0x3ec7cb);const _0x1c1e4b=$gameTemp[_0x4da4f7(0x970)](),_0x3f4468=VisuMZ['CreateActionSequenceTargets'](_0x3ec7cb[_0x4da4f7(0x708)]),_0x16e29f=Number(_0x3ec7cb[_0x4da4f7(0x439)]||0x1),_0x24b8e0=$dataItems[_0x16e29f],_0x7f0019=_0x3ec7cb['Mirror'];if(!_0x1c1e4b)return;if(!_0x24b8e0)return;let _0x374b1e=_0x24b8e0['animationId'];$gameTemp[_0x4da4f7(0x2c6)](_0x3f4468,_0x374b1e,_0x7f0019),_0x3ec7cb[_0x4da4f7(0x4f5)]&&_0x1c1e4b[_0x4da4f7(0x9ad)](_0x4da4f7(0x425));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x76d),_0x59c115=>{const _0x1b308e=_0x9c6fcf;if(!SceneManager[_0x1b308e(0x90f)])return;if(!SceneManager[_0x1b308e(0x90f)][_0x1b308e(0x21f)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ['ConvertParams'](_0x59c115,_0x59c115);const _0x5f198c=$gameTemp[_0x1b308e(0x970)](),_0x509877=Math[_0x1b308e(0xb65)](_0x59c115['pointX']),_0x32a083=Math['round'](_0x59c115[_0x1b308e(0x228)]);$gameTemp['requestPointAnimation'](_0x509877,_0x32a083,_0x59c115['AnimationID'],_0x59c115[_0x1b308e(0x602)],_0x59c115['Mute']),_0x59c115[_0x1b308e(0x6ec)]&&_0x5f198c&&(SceneManager[_0x1b308e(0x90f)]['_spriteset'][_0x1b308e(0x4bb)](),_0x5f198c[_0x1b308e(0x9ad)](_0x1b308e(0x425)));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x931),_0x2ce6e1=>{const _0x195b15=_0x9c6fcf;if(!SceneManager[_0x195b15(0x319)]())return;VisuMZ['ConvertParams'](_0x2ce6e1,_0x2ce6e1);const _0x5390c5=$gameTemp['getLastPluginCommandInterpreter'](),_0x3bd0f7=VisuMZ[_0x195b15(0x599)](_0x2ce6e1[_0x195b15(0x708)]),_0x239f3d=_0x2ce6e1['AnimationID'],_0x6124d3=_0x2ce6e1[_0x195b15(0x602)];if(!_0x5390c5)return;$gameTemp[_0x195b15(0x2c6)](_0x3bd0f7,_0x239f3d,_0x6124d3);if(_0x2ce6e1['WaitForAnimation'])_0x5390c5[_0x195b15(0x9ad)](_0x195b15(0x425));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Animation_ShowAnimationJS',_0x6c4c5d=>{const _0x4e40f8=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4e40f8(0x5e4)](_0x6c4c5d,_0x6c4c5d);const _0xbc7d72=$gameTemp[_0x4e40f8(0x970)](),_0x2ed8a5=VisuMZ[_0x4e40f8(0x599)](_0x6c4c5d[_0x4e40f8(0x708)]),_0x5a25f2=Number(_0x6c4c5d[_0x4e40f8(0x61d)])||0x1,_0x2d867d=_0x6c4c5d['Mirror'];if(!_0xbc7d72)return;$gameTemp[_0x4e40f8(0x2c6)](_0x2ed8a5,_0x5a25f2,_0x2d867d);if(_0x6c4c5d['WaitForAnimation'])_0xbc7d72[_0x4e40f8(0x9ad)](_0x4e40f8(0x425));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_Animation_SkillAnimation',_0x533a51=>{const _0x116b52=_0x9c6fcf;if(!SceneManager[_0x116b52(0x319)]())return;VisuMZ[_0x116b52(0x5e4)](_0x533a51,_0x533a51);const _0x4aea50=$gameTemp['getLastPluginCommandInterpreter'](),_0x514356=VisuMZ[_0x116b52(0x599)](_0x533a51['Targets']),_0x4c9d65=Number(_0x533a51[_0x116b52(0x707)]||0x1),_0x35cd85=$dataSkills[_0x4c9d65],_0x5246bd=_0x533a51['Mirror'];if(!_0x4aea50)return;if(!_0x35cd85)return;let _0x4afa85=_0x35cd85[_0x116b52(0x2ac)];$gameTemp['requestAnimation'](_0x514356,_0x4afa85,_0x5246bd),_0x533a51[_0x116b52(0x4f5)]&&_0x4aea50[_0x116b52(0x9ad)](_0x116b52(0x425));}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Animation_WaitForAnimation',_0x5c1cfa=>{const _0x3b7f2c=_0x9c6fcf;if(!SceneManager[_0x3b7f2c(0x319)]())return;const _0x4b3338=$gameTemp[_0x3b7f2c(0x970)]();if(!_0x4b3338)return;_0x4b3338[_0x3b7f2c(0x9ad)](_0x3b7f2c(0x425));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xb5d),_0xcfaebf=>{const _0x4926f3=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4926f3(0x5e4)](_0xcfaebf,_0xcfaebf);const _0x1ddff1=BattleManager[_0x4926f3(0x3d6)],_0x1cde45=_0xcfaebf[_0x4926f3(0x9a0)]&&Imported[_0x4926f3(0x198)];_0x1ddff1[_0x4926f3(0x38a)](_0xcfaebf[_0x4926f3(0x575)]),_0x1cde45&&Imported[_0x4926f3(0x198)]&&$gameSystem[_0x4926f3(0x958)](_0xcfaebf[_0x4926f3(0x575)]||'',_0xcfaebf[_0x4926f3(0x69f)]||0x0);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_BattleLog_Clear',_0xa34be9=>{const _0xc1dc78=_0x9c6fcf;if(!SceneManager[_0xc1dc78(0x319)]())return;const _0x12fc12=BattleManager[_0xc1dc78(0x3d6)];_0x12fc12[_0xc1dc78(0x4ec)]();}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_BattleLog_DisplayAction',_0x3002e6=>{const _0x450b05=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;const _0x109228=$gameTemp[_0x450b05(0x970)](),_0x3be32d=BattleManager[_0x450b05(0x9d9)],_0x14569b=BattleManager[_0x450b05(0x3d7)],_0x49e1da=BattleManager[_0x450b05(0x3d6)];if(!_0x109228||!_0x3be32d||!_0x14569b)return;if(!_0x3be32d[_0x450b05(0x9d3)]())return;_0x49e1da[_0x450b05(0x17c)](_0x14569b,_0x3be32d[_0x450b05(0x9d3)]()),_0x109228[_0x450b05(0x9ad)](_0x450b05(0x21c));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xb03),_0x36973a=>{const _0x261150=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;const _0x3cae53=BattleManager['_logWindow'];_0x3cae53[_0x261150(0x6a4)]();}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_BattleLog_PushBaseLine',_0x1563d5=>{const _0x436dd2=_0x9c6fcf;if(!SceneManager[_0x436dd2(0x319)]())return;const _0x23b646=BattleManager[_0x436dd2(0x3d6)];_0x23b646[_0x436dd2(0x688)]();}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x465),_0x253df4=>{const _0x157cb0=_0x9c6fcf;if(!SceneManager[_0x157cb0(0x319)]())return;const _0x4e7536=BattleManager[_0x157cb0(0x3d6)];_0x4e7536[_0x157cb0(0x2c7)]();}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x74d),_0x3c872e=>{const _0x59512e=_0x9c6fcf;if(!SceneManager[_0x59512e(0x319)]())return;VisuMZ[_0x59512e(0x5e4)](_0x3c872e,_0x3c872e),SceneManager[_0x59512e(0x90f)]['setVisibleUI'](_0x3c872e[_0x59512e(0x695)]);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x506),_0x10293b=>{const _0x4bec93=_0x9c6fcf;if(!SceneManager[_0x4bec93(0x319)]())return;const _0x32249b=$gameTemp[_0x4bec93(0x970)]();_0x32249b[_0x4bec93(0x9ad)](_0x4bec93(0x21c));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_BattleLog_WaitForNewLine',_0x5f02b1=>{const _0x5c3c76=_0x9c6fcf;if(!SceneManager[_0x5c3c76(0x319)]())return;const _0x51d4a9=$gameTemp[_0x5c3c76(0x970)](),_0x16bbd7=BattleManager[_0x5c3c76(0x3d6)];_0x16bbd7[_0x5c3c76(0x962)](),_0x51d4a9[_0x5c3c76(0x9ad)](_0x5c3c76(0x21c));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x1c5),_0x4a2cd5=>{const _0x405fdc=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x405fdc(0x87b)])return;VisuMZ[_0x405fdc(0x5e4)](_0x4a2cd5,_0x4a2cd5);const _0x25d949=$gameScreen[_0x405fdc(0xa06)]();_0x25d949[_0x405fdc(0x29e)]=_0x4a2cd5[_0x405fdc(0x8b8)];}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x162),_0x1c6d85=>{const _0x400d8f=_0x9c6fcf;if(!SceneManager[_0x400d8f(0x319)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x400d8f(0x5e4)](_0x1c6d85,_0x1c6d85);const _0x26a01b=$gameTemp['getLastPluginCommandInterpreter'](),_0x5e5ebc=_0x1c6d85['WaitForCamera'];$gameScreen[_0x400d8f(0xa8c)](_0x1c6d85['FocusX'],_0x1c6d85[_0x400d8f(0x2e3)],_0x1c6d85[_0x400d8f(0x82b)],_0x1c6d85['EasingType']);if(_0x5e5ebc)_0x26a01b[_0x400d8f(0x9ad)](_0x400d8f(0x443));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x3e9),_0x2935f0=>{const _0x1a62e6=_0x9c6fcf;if(!SceneManager[_0x1a62e6(0x319)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1a62e6(0x5e4)](_0x2935f0,_0x2935f0);const _0x596b4a=$gameTemp[_0x1a62e6(0x970)](),_0x42decc=VisuMZ['CreateActionSequenceTargets'](_0x2935f0[_0x1a62e6(0x708)]),_0x7d3901=_0x2935f0[_0x1a62e6(0x42a)];$gameScreen[_0x1a62e6(0x2a0)](_0x42decc,_0x2935f0[_0x1a62e6(0x82b)],_0x2935f0[_0x1a62e6(0x25d)]);if(_0x7d3901)_0x596b4a[_0x1a62e6(0x9ad)]('battleCamera');}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Camera_Offset',_0x22107f=>{const _0x3275a7=_0x9c6fcf;if(!SceneManager[_0x3275a7(0x319)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3275a7(0x5e4)](_0x22107f,_0x22107f);const _0x5337bc=$gameTemp[_0x3275a7(0x970)](),_0x2d88f3=_0x22107f[_0x3275a7(0x42a)];$gameScreen[_0x3275a7(0x4d8)](_0x22107f[_0x3275a7(0x30c)],_0x22107f[_0x3275a7(0x238)],_0x22107f['Duration'],_0x22107f[_0x3275a7(0x25d)]);if(_0x2d88f3)_0x5337bc[_0x3275a7(0x9ad)](_0x3275a7(0x443));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x7dd),_0x2ba73f=>{const _0x2790c4=_0x9c6fcf;if(!SceneManager[_0x2790c4(0x319)]())return;if(!Imported[_0x2790c4(0x87b)])return;VisuMZ[_0x2790c4(0x5e4)](_0x2ba73f,_0x2ba73f);const _0x58ae1f=$gameTemp[_0x2790c4(0x970)](),_0x2d8b55=_0x2ba73f[_0x2790c4(0xa73)],_0x4e6439=_0x2ba73f['ResetOffset'],_0x1cdbbd=_0x2ba73f[_0x2790c4(0x42a)];if(_0x2d8b55){const _0x571d72=Math[_0x2790c4(0xb65)](Graphics['width']/0x2),_0x4fce5d=Math['round'](Graphics[_0x2790c4(0x202)]/0x2);$gameScreen[_0x2790c4(0xa8c)](_0x571d72,_0x4fce5d,_0x2ba73f[_0x2790c4(0x82b)],_0x2ba73f[_0x2790c4(0x25d)]);}_0x4e6439&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x2ba73f[_0x2790c4(0x82b)],_0x2ba73f[_0x2790c4(0x25d)]);if(_0x1cdbbd)_0x58ae1f[_0x2790c4(0x9ad)](_0x2790c4(0x443));}),PluginManager['registerCommand'](pluginData['name'],_0x9c6fcf(0x6c3),_0x147835=>{const _0x509a33=_0x9c6fcf;if(!SceneManager[_0x509a33(0x319)]())return;if(!Imported[_0x509a33(0x87b)])return;const _0x5edf2d=$gameTemp[_0x509a33(0x970)]();if(!_0x5edf2d)return;_0x5edf2d['setWaitMode'](_0x509a33(0x443));}),VisuMZ['BattleCore'][_0x9c6fcf(0x787)]=function(_0x4d12f1){const _0x4d61be=_0x9c6fcf;_0x4d12f1['portraitFilename']='';const _0x4fb9b8=VisuMZ[_0x4d61be(0x242)][_0x4d61be(0x787)](_0x4d12f1),_0x4686b9=VisuMZ[_0x4d61be(0x599)](_0x4d12f1[_0x4d61be(0x708)])[0x0]||null;return _0x4686b9&&(_0x4fb9b8[_0x4d61be(0xa78)]=_0x4686b9['visualCutinPortraitFilename'](),_0x4fb9b8[_0x4d61be(0x766)]=_0x4686b9[_0x4d61be(0x4b8)](),_0x4fb9b8['portraitHue']=_0x4686b9[_0x4d61be(0x9ae)](),_0x4fb9b8[_0x4d61be(0x3d5)]=_0x4686b9[_0x4d61be(0x803)](),_0x4686b9[_0x4d61be(0x3fd)]()&&(_0x4686b9[_0x4d61be(0x276)]()&&(_0x4fb9b8[_0x4d61be(0x5a0)]=!_0x4fb9b8[_0x4d61be(0x5a0)]),_0x4686b9['flipVisualCutinVert']()&&(_0x4fb9b8['portraitFlipVert']=!_0x4fb9b8[_0x4d61be(0x901)]),_0x4fb9b8[_0x4d61be(0x3d5)]===_0x4d61be(0x3ec)&&(_0x4fb9b8[_0x4d61be(0x5a0)]=!_0x4fb9b8[_0x4d61be(0x5a0)]),_0x4d12f1[_0x4d61be(0x3c3)][_0x4d61be(0x7a4)]&&(_0x4fb9b8[_0x4d61be(0x564)]*=-0x1),_0x4d12f1[_0x4d61be(0x3c3)][_0x4d61be(0xa39)]&&(_0x4fb9b8[_0x4d61be(0x4fc)]*=-0x1),_0x4fb9b8['parallaxHue']+=_0x4d12f1['ExtraSettings'][_0x4d61be(0x453)]??0x0)),_0x4fb9b8;},PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Cutin_AddVisualCutinEffect',_0x395240=>{const _0x4ed121=_0x9c6fcf;if(!SceneManager[_0x4ed121(0x319)]())return;if(!Imported[_0x4ed121(0x459)])return;VisuMZ[_0x4ed121(0x5e4)](_0x395240,_0x395240);const _0x106fad=VisuMZ[_0x4ed121(0x8f5)][_0x4ed121(0x787)](_0x395240);SceneManager[_0x4ed121(0x90f)]['startVisualCutin'](_0x106fad);const _0x51c1d8=$gameTemp[_0x4ed121(0x970)]();_0x51c1d8&&_0x395240[_0x4ed121(0x61e)]&&_0x51c1d8['setWaitMode'](_0x4ed121(0x81e));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x27a),_0x21ad25=>{const _0x515b66=_0x9c6fcf;if(!SceneManager[_0x515b66(0x319)]())return;if(!Imported[_0x515b66(0x459)])return;VisuMZ[_0x515b66(0x5e4)](_0x21ad25,_0x21ad25),SceneManager['_scene'][_0x515b66(0x779)]();const _0x2abe2f=$gameTemp[_0x515b66(0x970)]();_0x2abe2f&&_0x21ad25[_0x515b66(0x7d9)]&&_0x2abe2f['setWaitMode'](_0x515b66(0x4fa));}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Cutin_EndVisualCutinEffectType',_0x3e5765=>{const _0x15a80d=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x15a80d(0x459)])return;VisuMZ[_0x15a80d(0x5e4)](_0x3e5765,_0x3e5765);const _0x293e8b=_0x3e5765['type'][_0x15a80d(0x3b9)]()[_0x15a80d(0x4a5)]();SceneManager[_0x15a80d(0x90f)]['endVisualCutin'](_0x293e8b);const _0x101b31=$gameTemp[_0x15a80d(0x970)]();_0x101b31&&_0x3e5765[_0x15a80d(0x7d9)]&&_0x101b31['setWaitMode'](_0x15a80d(0x4fa));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x71f),_0x3b76c0=>{const _0x4b2797=_0x9c6fcf;if(!SceneManager[_0x4b2797(0x319)]())return;if(!Imported[_0x4b2797(0x459)])return;const _0x89448d=$gameTemp['getLastPluginCommandInterpreter']();_0x89448d[_0x4b2797(0x9ad)](_0x4b2797(0x81e));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Cutin_WaitForExit',_0x7f452e=>{const _0x3b1d75=_0x9c6fcf;if(!SceneManager[_0x3b1d75(0x319)]())return;if(!Imported[_0x3b1d75(0x459)])return;const _0x1369b0=$gameTemp[_0x3b1d75(0x970)]();_0x1369b0['setWaitMode'](_0x3b1d75(0x4fa));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x420),_0x129387=>{const _0x3eab69=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3eab69(0x726)])return;VisuMZ[_0x3eab69(0x5e4)](_0x129387,_0x129387);const _0x72354e=VisuMZ[_0x3eab69(0x599)](_0x129387[_0x3eab69(0x708)]),_0x402ffc=_0x129387[_0x3eab69(0xac3)]['toLowerCase']()[_0x3eab69(0x4a5)]();for(const _0x3a9248 of _0x72354e){if(!_0x3a9248)continue;_0x3a9248[_0x3eab69(0x645)](_0x402ffc);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x74a),_0x4bf369=>{const _0x56c726=_0x9c6fcf;if(!SceneManager[_0x56c726(0x319)]())return;if(!Imported[_0x56c726(0x726)])return;VisuMZ['ConvertParams'](_0x4bf369,_0x4bf369);const _0x1299d9=VisuMZ['CreateActionSequenceTargets'](_0x4bf369[_0x56c726(0x708)]),_0x131661=_0x4bf369['TimeScale'];for(const _0x44f086 of _0x1299d9){if(!_0x44f086)continue;_0x44f086[_0x56c726(0xa96)]()[_0x56c726(0x7e3)]=_0x131661;}}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x601),_0x49421d=>{const _0x449b70=_0x9c6fcf;if(!SceneManager[_0x449b70(0x319)]())return;if(!Imported[_0x449b70(0x6d4)])return;VisuMZ[_0x449b70(0x5e4)](_0x49421d,_0x49421d);const _0x2a6e4a=BattleManager[_0x449b70(0x9d9)],_0x3cfbbf=_0x49421d['Elements'];if(!_0x2a6e4a)return;_0x2a6e4a['_battleCoreAddedElements']=_0x3cfbbf;}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x9b3),_0x3f0571=>{const _0x4b1a3b=_0x9c6fcf;if(!SceneManager[_0x4b1a3b(0x319)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x1e35b7=BattleManager['_action'];if(!_0x1e35b7)return;_0x1e35b7[_0x4b1a3b(0x4ae)]();}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Element_ForceElements',_0x4c508e=>{const _0x55de95=_0x9c6fcf;if(!SceneManager[_0x55de95(0x319)]())return;if(!Imported[_0x55de95(0x6d4)])return;VisuMZ[_0x55de95(0x5e4)](_0x4c508e,_0x4c508e);const _0x1017f6=BattleManager[_0x55de95(0x9d9)],_0x5376ec=_0x4c508e[_0x55de95(0x657)];if(!_0x1017f6)return;_0x1017f6[_0x55de95(0x38d)]=_0x5376ec;}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Element_NullElements',_0x596429=>{const _0x328142=_0x9c6fcf;if(!SceneManager[_0x328142(0x319)]())return;if(!Imported[_0x328142(0x6d4)])return;const _0x27ae04=BattleManager[_0x328142(0x9d9)];if(!_0x27ae04)return;_0x27ae04[_0x328142(0xa2d)]=!![];}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x838),_0x530cc5=>{const _0x152008=_0x9c6fcf;VisuMZ[_0x152008(0x3b3)]['ActSeq_Grid_ActionAnimationAtNode'](_0x530cc5);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x39f),_0x31b295=>{const _0x3a7af9=_0x9c6fcf;VisuMZ['BattleGridSystem'][_0x3a7af9(0x39f)](_0x31b295);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x16d),_0x49660e=>{const _0x5e6315=_0x9c6fcf;VisuMZ[_0x5e6315(0x3b3)][_0x5e6315(0x16d)](_0x49660e);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x1d9),_0x355c4e=>{const _0x10b699=_0x9c6fcf;VisuMZ[_0x10b699(0x3b3)][_0x10b699(0x16d)](_0x355c4e);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x756),_0x4026a6=>{const _0x12b5d0=_0x9c6fcf;VisuMZ[_0x12b5d0(0x3b3)]['ActSeq_Grid_AnimationIDAtNode'](_0x4026a6);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x298),_0x1f28f1=>{const _0x2f2cc6=_0x9c6fcf;VisuMZ[_0x2f2cc6(0x3b3)][_0x2f2cc6(0x298)](_0x1f28f1);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x73d),_0x1dd616=>{const _0x3dbb89=_0x9c6fcf;VisuMZ[_0x3dbb89(0x3b3)][_0x3dbb89(0x73d)](_0x1dd616);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Grid_ClearPassiveStatesFromNode',_0x32504b=>{const _0x2dffb8=_0x9c6fcf;VisuMZ[_0x2dffb8(0x3b3)][_0x2dffb8(0x428)](_0x32504b);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Grid_MoveTargetsInDirection',_0x1702ca=>{const _0x5d8704=_0x9c6fcf;VisuMZ[_0x5d8704(0x3b3)][_0x5d8704(0x64a)](_0x1702ca);}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_Grid_PullToTargetNode',_0x1b7ad5=>{const _0xe445e0=_0x9c6fcf;VisuMZ[_0xe445e0(0x3b3)][_0xe445e0(0x7b6)](_0x1b7ad5);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Grid_PushFromTargetNode',_0x3dc5b1=>{const _0x2a278d=_0x9c6fcf;VisuMZ[_0x2a278d(0x3b3)][_0x2a278d(0xaef)](_0x3dc5b1);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Grid_RemovePassiveStatesFromNode',_0x4b8d6a=>{const _0x3c9653=_0x9c6fcf;VisuMZ['BattleGridSystem'][_0x3c9653(0xae0)](_0x4b8d6a);}),PluginManager['registerCommand'](pluginData['name'],_0x9c6fcf(0x676),_0xc53723=>{const _0x1199b5=_0x9c6fcf;VisuMZ['BattleGridSystem'][_0x1199b5(0x676)](_0xc53723);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x12d),_0x15d720=>{const _0x359eb3=_0x9c6fcf;VisuMZ[_0x359eb3(0x3b3)][_0x359eb3(0x12d)](_0x15d720);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Grid_TraverseToNode',_0x37a155=>{const _0x53af3a=_0x9c6fcf;VisuMZ[_0x53af3a(0x3b3)][_0x53af3a(0x1f0)](_0x37a155);}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x703),_0x5eaf8f=>{const _0x3880e6=_0x9c6fcf;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x3880e6(0x319)]())return;VisuMZ[_0x3880e6(0x5e4)](_0x5eaf8f,_0x5eaf8f);const _0x5c603e=VisuMZ[_0x3880e6(0x599)](_0x5eaf8f[_0x3880e6(0x708)]);for(const _0x459755 of _0x5c603e){if(!_0x459755)continue;_0x459755[_0x3880e6(0x522)](_0x3880e6(0x34f)),_0x459755[_0x3880e6(0x522)](_0x3880e6(0x1de)),_0x459755[_0x3880e6(0x522)]('tv'),_0x459755[_0x3880e6(0x176)]();}$gamePlayer[_0x3880e6(0x2c7)]();}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x8c1),_0x1d71f0=>{const _0x38de76=_0x9c6fcf;if(!Imported[_0x38de76(0x6af)])return;if(!SceneManager[_0x38de76(0x319)]())return;VisuMZ['ConvertParams'](_0x1d71f0,_0x1d71f0);const _0x1a88c5=VisuMZ[_0x38de76(0x599)](_0x1d71f0[_0x38de76(0x708)]),_0xde3135=_0x38de76(0x1de);_0x1d71f0[_0x38de76(0x48d)]=Math[_0x38de76(0x571)](_0x1d71f0[_0x38de76(0x3cb)]/0x2),_0x1d71f0[_0x38de76(0x30a)]=_0x1d71f0[_0x38de76(0x3cb)],_0x1d71f0[_0x38de76(0x60c)]=!![];for(const _0x1de92a of _0x1a88c5){if(!_0x1de92a)continue;_0x1de92a[_0x38de76(0x7a1)](_0xde3135,_0x1d71f0);}$gamePlayer[_0x38de76(0x2c7)]();}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xb4c),_0xc367b0=>{const _0x24c53b=_0x9c6fcf;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x24c53b(0x319)]())return;VisuMZ['ConvertParams'](_0xc367b0,_0xc367b0);const _0x57a4a3=VisuMZ[_0x24c53b(0x599)](_0xc367b0[_0x24c53b(0x708)]);for(const _0x4e354a of _0x57a4a3){if(!_0x4e354a)continue;_0x4e354a[_0x24c53b(0x522)](_0x24c53b(0x1de));}$gamePlayer['refresh']();}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x734),_0x43a953=>{const _0xb32c6a=_0x9c6fcf;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0xb32c6a(0x319)]())return;VisuMZ[_0xb32c6a(0x5e4)](_0x43a953,_0x43a953);const _0x12a4a3=VisuMZ['CreateActionSequenceTargets'](_0x43a953[_0xb32c6a(0x708)]),_0x55fe8a='noise';for(const _0x313eca of _0x12a4a3){if(!_0x313eca)continue;_0x313eca[_0xb32c6a(0x7a1)](_0x55fe8a,_0x43a953);}$gamePlayer[_0xb32c6a(0x2c7)]();}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x2b3),_0xa1788c=>{const _0x5d2194=_0x9c6fcf;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x5d2194(0x319)]())return;VisuMZ[_0x5d2194(0x5e4)](_0xa1788c,_0xa1788c);const _0x231514=VisuMZ[_0x5d2194(0x599)](_0xa1788c['Targets']);for(const _0x1bbcb1 of _0x231514){if(!_0x1bbcb1)continue;_0x1bbcb1[_0x5d2194(0x522)](_0x5d2194(0x34f));}$gamePlayer[_0x5d2194(0x2c7)]();}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x7ca),_0x4fe2f4=>{const _0x7710f8=_0x9c6fcf;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x7710f8(0x319)]())return;VisuMZ[_0x7710f8(0x5e4)](_0x4fe2f4,_0x4fe2f4);const _0x2d4fd4=VisuMZ['CreateActionSequenceTargets'](_0x4fe2f4[_0x7710f8(0x708)]),_0x27dfa5='tv';for(const _0x4c6783 of _0x2d4fd4){if(!_0x4c6783)continue;_0x4c6783[_0x7710f8(0x7a1)](_0x27dfa5,_0x4fe2f4);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x6b9),_0x2f05d2=>{const _0x3b199b=_0x9c6fcf;if(!Imported[_0x3b199b(0x6af)])return;if(!SceneManager[_0x3b199b(0x319)]())return;VisuMZ[_0x3b199b(0x5e4)](_0x2f05d2,_0x2f05d2);const _0x19f536=VisuMZ['CreateActionSequenceTargets'](_0x2f05d2[_0x3b199b(0x708)]);for(const _0x5bc3c5 of _0x19f536){if(!_0x5bc3c5)continue;_0x5bc3c5[_0x3b199b(0x522)]('tv');}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0x9c6fcf(0x515),_0x5ef361=>{const _0x1953fb=_0x9c6fcf;if(!Imported[_0x1953fb(0x62f)])return;const _0x1d47da=SceneManager[_0x1953fb(0x90f)]['_spriteset'];if(!_0x1d47da)return;if(VisuMZ['ActSeqImpact'][_0x1953fb(0x14c)]<=1.04){alert(_0x1953fb(0xa4b)),SceneManager[_0x1953fb(0x2ee)]();return;}VisuMZ['ConvertParams'](_0x5ef361,_0x5ef361);const _0xb8737c=_0x5ef361[_0x1953fb(0x524)];_0x1d47da[_0x1953fb(0x577)](_0xb8737c);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x22e),_0x33d11b=>{const _0x2485a5=_0x9c6fcf;if(!SceneManager[_0x2485a5(0x319)]())return;if(!Imported[_0x2485a5(0x62f)])return;const _0x24f947=SceneManager[_0x2485a5(0x90f)][_0x2485a5(0x21f)];if(!_0x24f947)return;VisuMZ[_0x2485a5(0x5e4)](_0x33d11b,_0x33d11b);const _0x109e49=_0x33d11b[_0x2485a5(0x97b)]||0x1,_0x1f8042=_0x33d11b[_0x2485a5(0x82b)]||0x1,_0x22c67f=_0x33d11b[_0x2485a5(0x25d)]||'Linear';_0x24f947[_0x2485a5(0x4c9)](_0x109e49,_0x1f8042,_0x22c67f);}),PluginManager['registerCommand'](pluginData['name'],_0x9c6fcf(0x7f3),_0x3871d3=>{const _0x2d47b8=_0x9c6fcf;if(!Imported[_0x2d47b8(0x62f)])return;const _0x5100dc=SceneManager[_0x2d47b8(0x90f)][_0x2d47b8(0x21f)];if(!_0x5100dc)return;if(VisuMZ[_0x2d47b8(0x6a5)]['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x2d47b8(0x2ee)]();return;}VisuMZ[_0x2d47b8(0x5e4)](_0x3871d3,_0x3871d3);const _0x5183ad=_0x3871d3[_0x2d47b8(0x524)];_0x5100dc['setupDesaturateImpactFilter'](_0x5183ad);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x6ef),_0x31f396=>{const _0x201906=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2ea8d9=SceneManager[_0x201906(0x90f)][_0x201906(0x21f)];if(!_0x2ea8d9)return;VisuMZ['ConvertParams'](_0x31f396,_0x31f396);const _0x1b931d=Number(_0x31f396[_0x201906(0xab5)])||0x0,_0xaf9cd2=Number(_0x31f396[_0x201906(0xaba)]),_0x2aec8e=_0x31f396[_0x201906(0x82b)]||0x1,_0x519955=_0x31f396[_0x201906(0x25d)]||_0x201906(0x5c4);_0x2ea8d9['setupMotionBlurImpactFilter'](_0x1b931d,_0xaf9cd2,_0x2aec8e,_0x519955);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xa71),_0x522eab=>{const _0x39efbb=_0x9c6fcf;if(!SceneManager[_0x39efbb(0x319)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x18ee91=SceneManager[_0x39efbb(0x90f)][_0x39efbb(0x21f)];if(!_0x18ee91)return;VisuMZ[_0x39efbb(0x5e4)](_0x522eab,_0x522eab);const _0x58f36b=Number(_0x522eab['Angle'])||0x0,_0x51ac48=Number(_0x522eab['Rate']),_0x277ba9=_0x522eab['Duration']||0x1,_0x4f4a10=_0x522eab[_0x39efbb(0x25d)]||_0x39efbb(0x5c4),_0x2f29cc=VisuMZ[_0x39efbb(0x599)](_0x522eab[_0x39efbb(0x708)]);for(const _0x228bbc of _0x2f29cc){if(!_0x228bbc)continue;if(!_0x228bbc[_0x39efbb(0x338)]())continue;_0x228bbc['battler']()[_0x39efbb(0x126)](_0x58f36b,_0x51ac48,_0x277ba9,_0x4f4a10);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Impact_MotionTrailCreate',_0x36ad61=>{const _0x18115f=_0x9c6fcf;if(!SceneManager[_0x18115f(0x319)]())return;if(!Imported[_0x18115f(0x62f)])return;VisuMZ['ConvertParams'](_0x36ad61,_0x36ad61);const _0x4921cd={'delay':_0x36ad61[_0x18115f(0x438)],'duration':_0x36ad61[_0x18115f(0x7f0)],'hue':_0x36ad61['hue'],'opacityStart':_0x36ad61['opacityStart'],'tone':_0x36ad61[_0x18115f(0x1c2)],'visible':!![]},_0x2c2ff0=VisuMZ[_0x18115f(0x599)](_0x36ad61[_0x18115f(0x708)]);for(const _0x23603a of _0x2c2ff0){if(!_0x23603a)continue;_0x23603a[_0x18115f(0x462)](_0x4921cd);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xa00),_0x330518=>{const _0xbfdecf=_0x9c6fcf;if(!SceneManager[_0xbfdecf(0x319)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x330518,_0x330518);const _0x48fbd5=VisuMZ['CreateActionSequenceTargets'](_0x330518[_0xbfdecf(0x708)]);for(const _0x5ccd1b of _0x48fbd5){if(!_0x5ccd1b)continue;_0x5ccd1b[_0xbfdecf(0x8c9)]();}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Impact_Negative',_0x42faf7=>{const _0x37562d=_0x9c6fcf;if(!Imported[_0x37562d(0x62f)])return;const _0x29d2e6=SceneManager[_0x37562d(0x90f)][_0x37562d(0x21f)];if(!_0x29d2e6)return;if(VisuMZ[_0x37562d(0x6a5)][_0x37562d(0x14c)]<=1.04){alert(_0x37562d(0xa4b)),SceneManager['exit']();return;}VisuMZ[_0x37562d(0x5e4)](_0x42faf7,_0x42faf7);const _0x5043ea=_0x42faf7['Enable'];_0x29d2e6[_0x37562d(0x37f)](_0x5043ea);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x22d),_0x43f05a=>{const _0x1cb2bd=_0x9c6fcf;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x148eaa=SceneManager[_0x1cb2bd(0x90f)][_0x1cb2bd(0x21f)];if(!_0x148eaa)return;if(VisuMZ[_0x1cb2bd(0x6a5)][_0x1cb2bd(0x14c)]<=1.04){alert(_0x1cb2bd(0xa4b)),SceneManager['exit']();return;}VisuMZ[_0x1cb2bd(0x5e4)](_0x43f05a,_0x43f05a);const _0x2c4297=_0x43f05a['Enable'];_0x148eaa[_0x1cb2bd(0x6bc)](_0x2c4297);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x41d),_0x33a38a=>{const _0x199022=_0x9c6fcf;if(!Imported[_0x199022(0x62f)])return;const _0x4cac39=SceneManager[_0x199022(0x90f)][_0x199022(0x21f)];if(!_0x4cac39)return;VisuMZ['ConvertParams'](_0x33a38a,_0x33a38a);const _0x118ece=_0x33a38a['X']||0x0,_0x3e1529=_0x33a38a['Y']||0x0,_0xa2e573=_0x33a38a['Amp']||0x0,_0x54a4a6=_0x33a38a['Wave']||0x0,_0x4656a8=_0x33a38a[_0x199022(0x82b)]||0x1;_0x4cac39[_0x199022(0x131)](_0x118ece,_0x3e1529,_0xa2e573,_0x54a4a6,_0x4656a8);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0xa61),_0x5f1116=>{const _0x5cb47f=_0x9c6fcf;if(!SceneManager[_0x5cb47f(0x319)]())return;if(!Imported[_0x5cb47f(0x62f)])return;const _0x2a7765=SceneManager['_scene'][_0x5cb47f(0x21f)];if(!_0x2a7765)return;VisuMZ['ConvertParams'](_0x5f1116,_0x5f1116);const _0x5b7bc3=VisuMZ[_0x5cb47f(0x599)](_0x5f1116[_0x5cb47f(0x708)]),_0x4bb4e5=_0x5f1116[_0x5cb47f(0xa37)],_0x12d761=_0x5f1116[_0x5cb47f(0x30c)]||0x0,_0x297323=_0x5f1116[_0x5cb47f(0x238)]||0x0,_0x50c435=_0x5f1116['Amp']||0x0,_0xd50031=_0x5f1116[_0x5cb47f(0x93c)]||0x0,_0x4833d1=_0x5f1116[_0x5cb47f(0x82b)]||0x1;for(const _0x3574cd of _0x5b7bc3){if(!_0x3574cd)continue;if(!_0x3574cd[_0x5cb47f(0x338)]())continue;const _0x34a416=_0x3574cd['battler']();let _0x3dfc77=_0x34a416[_0x5cb47f(0x761)],_0x3e44a6=_0x34a416[_0x5cb47f(0x46a)];_0x3dfc77+=(Graphics['width']-Graphics[_0x5cb47f(0x671)])/0x2,_0x3e44a6+=(Graphics[_0x5cb47f(0x202)]-Graphics['boxHeight'])/0x2;if(_0x4bb4e5['match'](/front/i))_0x3dfc77+=(_0x3574cd[_0x5cb47f(0x3fd)]()?0x1:-0x1)*_0x34a416['mainSpriteWidth']()/0x2;else _0x4bb4e5[_0x5cb47f(0x3c6)](/back/i)&&(_0x3dfc77+=(_0x3574cd['isEnemy']()?-0x1:0x1)*_0x34a416[_0x5cb47f(0x899)]()/0x2);if(_0x4bb4e5[_0x5cb47f(0x3c6)](/head/i))_0x3e44a6-=_0x34a416[_0x5cb47f(0x3e7)]();else _0x4bb4e5[_0x5cb47f(0x3c6)](/center/i)&&(_0x3e44a6-=_0x34a416[_0x5cb47f(0x3e7)]()/0x2);_0x3dfc77+=_0x12d761,_0x3e44a6+=_0x297323,_0x2a7765[_0x5cb47f(0x131)](_0x3dfc77,_0x3e44a6,_0x50c435,_0xd50031,_0x4833d1);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Impact_ShockwaveCenterTargets',_0x5dcb6e=>{const _0x209c90=_0x9c6fcf;if(!SceneManager[_0x209c90(0x319)]())return;if(!Imported[_0x209c90(0x62f)])return;const _0x5eac6c=SceneManager[_0x209c90(0x90f)][_0x209c90(0x21f)];if(!_0x5eac6c)return;VisuMZ[_0x209c90(0x5e4)](_0x5dcb6e,_0x5dcb6e);const _0x39bc6c=VisuMZ[_0x209c90(0x599)](_0x5dcb6e[_0x209c90(0x708)]),_0x659032=_0x5dcb6e['TargetLocation'],_0x44e6df=_0x5dcb6e[_0x209c90(0x30c)]||0x0,_0x2d1c1e=_0x5dcb6e[_0x209c90(0x238)]||0x0,_0x508ba7=_0x5dcb6e['Amp']||0x0,_0x411b4b=_0x5dcb6e[_0x209c90(0x93c)]||0x0,_0x381fb8=_0x5dcb6e[_0x209c90(0x82b)]||0x1,_0x43e456=Math[_0x209c90(0x878)](..._0x39bc6c[_0x209c90(0x1f9)](_0x48f2d2=>_0x48f2d2[_0x209c90(0x338)]()[_0x209c90(0x761)]-_0x48f2d2[_0x209c90(0x338)]()[_0x209c90(0x899)]()/0x2)),_0x4b961f=Math['max'](..._0x39bc6c[_0x209c90(0x1f9)](_0xe239db=>_0xe239db[_0x209c90(0x338)]()[_0x209c90(0x761)]+_0xe239db[_0x209c90(0x338)]()['mainSpriteWidth']()/0x2)),_0x37bcd3=Math['min'](..._0x39bc6c[_0x209c90(0x1f9)](_0x352730=>_0x352730[_0x209c90(0x338)]()[_0x209c90(0x46a)]-_0x352730['battler']()['mainSpriteHeight']())),_0x5aab85=Math[_0x209c90(0x716)](..._0x39bc6c[_0x209c90(0x1f9)](_0x22ede8=>_0x22ede8[_0x209c90(0x338)]()['_baseY'])),_0x17be5f=_0x39bc6c[_0x209c90(0x4e3)](_0x4faf8d=>_0x4faf8d[_0x209c90(0x552)]())[_0x209c90(0x88e)],_0x3ce503=_0x39bc6c[_0x209c90(0x4e3)](_0x3cba14=>_0x3cba14['isEnemy']())[_0x209c90(0x88e)];let _0xa3889=0x0,_0x5c7d15=0x0;if(_0x659032[_0x209c90(0x3c6)](/front/i))_0xa3889=_0x17be5f>=_0x3ce503?_0x43e456:_0x4b961f;else{if(_0x659032[_0x209c90(0x3c6)](/middle/i))_0xa3889=(_0x43e456+_0x4b961f)/0x2,melee=-0x1;else _0x659032[_0x209c90(0x3c6)](/back/i)&&(_0xa3889=_0x17be5f>=_0x3ce503?_0x4b961f:_0x43e456);}if(_0x659032['match'](/head/i))_0x5c7d15=_0x37bcd3;else{if(_0x659032[_0x209c90(0x3c6)](/center/i))_0x5c7d15=(_0x37bcd3+_0x5aab85)/0x2;else _0x659032['match'](/base/i)&&(_0x5c7d15=_0x5aab85);}_0xa3889+=(Graphics['width']-Graphics[_0x209c90(0x671)])/0x2,_0x5c7d15+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0xa3889+=_0x44e6df,_0x5c7d15+=_0x2d1c1e,_0x5eac6c[_0x209c90(0x131)](_0xa3889,_0x5c7d15,_0x508ba7,_0x411b4b,_0x381fb8);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x8cc),_0x35a17e=>{const _0x1e34a0=_0x9c6fcf;if(!Imported[_0x1e34a0(0x62f)])return;const _0x3c5402=SceneManager[_0x1e34a0(0x90f)]['_spriteset'];if(!_0x3c5402)return;if(VisuMZ[_0x1e34a0(0x6a5)][_0x1e34a0(0x14c)]<=1.04){alert(_0x1e34a0(0xa4b)),SceneManager[_0x1e34a0(0x2ee)]();return;}VisuMZ['ConvertParams'](_0x35a17e,_0x35a17e);const _0x51e4d2=$gameTemp[_0x1e34a0(0x970)](),_0xdad2d=Math[_0x1e34a0(0x716)](0.01,_0x35a17e['Scale']);$gameTemp['setBattleImpactTimeScale'](_0xdad2d,_0x51e4d2);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x442),_0x52e895=>{const _0x52b24f=_0x9c6fcf;if(!Imported[_0x52b24f(0x62f)])return;const _0x29831a=SceneManager['_scene'][_0x52b24f(0x21f)];if(!_0x29831a)return;if(VisuMZ[_0x52b24f(0x6a5)][_0x52b24f(0x14c)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x52b24f(0x5e4)](_0x52e895,_0x52e895);const _0x498486=$gameTemp['getLastPluginCommandInterpreter'](),_0x648025=_0x52e895['ms']||0x1;VisuMZ[_0x52b24f(0x6a5)][_0x52b24f(0x182)](_0x648025,_0x498486);}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_Impact_ZoomBlurPoint',_0x191894=>{const _0x4ba450=_0x9c6fcf;if(!Imported[_0x4ba450(0x62f)])return;const _0x3e72b0=SceneManager[_0x4ba450(0x90f)][_0x4ba450(0x21f)];if(!_0x3e72b0)return;VisuMZ[_0x4ba450(0x5e4)](_0x191894,_0x191894);const _0x59ffc5=_0x191894['X']||0x0,_0x114190=_0x191894['Y']||0x0,_0x1a88be=_0x191894[_0x4ba450(0x2f7)]||0x0,_0x1a9426=_0x191894['Radius']||0x0,_0xa98099=_0x191894[_0x4ba450(0x82b)]||0x1,_0x549dd2=_0x191894['EasingType']||_0x4ba450(0x5c4);_0x3e72b0[_0x4ba450(0x1f6)](_0x1a88be,_0x59ffc5,_0x114190,_0x1a9426,_0xa98099,_0x549dd2);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x173),_0x4107a1=>{const _0x1c7372=_0x9c6fcf;if(!Imported[_0x1c7372(0x62f)])return;const _0x19995a=SceneManager[_0x1c7372(0x90f)]['_spriteset'];if(!_0x19995a)return;VisuMZ[_0x1c7372(0x5e4)](_0x4107a1,_0x4107a1);const _0x32310a=VisuMZ[_0x1c7372(0x599)](_0x4107a1[_0x1c7372(0x708)]),_0x1a4f87=_0x4107a1[_0x1c7372(0xa37)],_0x4adec7=_0x4107a1['OffsetX']||0x0,_0x5dbe58=_0x4107a1[_0x1c7372(0x238)]||0x0,_0x30e32a=_0x4107a1[_0x1c7372(0x2f7)]||0x0,_0x692c1a=_0x4107a1[_0x1c7372(0x221)]||0x0,_0x36e6e2=_0x4107a1['Duration']||0x1,_0x4694ab=_0x4107a1[_0x1c7372(0x25d)]||_0x1c7372(0x5c4),_0x36852c=Math[_0x1c7372(0x878)](..._0x32310a[_0x1c7372(0x1f9)](_0x3f9412=>_0x3f9412[_0x1c7372(0x338)]()[_0x1c7372(0x761)]-_0x3f9412[_0x1c7372(0x338)]()[_0x1c7372(0x899)]()/0x2)),_0x56734e=Math['max'](..._0x32310a[_0x1c7372(0x1f9)](_0x235b26=>_0x235b26[_0x1c7372(0x338)]()['_baseX']+_0x235b26[_0x1c7372(0x338)]()[_0x1c7372(0x899)]()/0x2)),_0x113f47=Math[_0x1c7372(0x878)](..._0x32310a[_0x1c7372(0x1f9)](_0x1f4a38=>_0x1f4a38[_0x1c7372(0x338)]()['_baseY']-_0x1f4a38[_0x1c7372(0x338)]()['mainSpriteHeight']())),_0x3f870c=Math['max'](..._0x32310a[_0x1c7372(0x1f9)](_0x19f45a=>_0x19f45a[_0x1c7372(0x338)]()['_baseY'])),_0x37aea6=_0x32310a[_0x1c7372(0x4e3)](_0x2d849d=>_0x2d849d[_0x1c7372(0x552)]())['length'],_0x4f6e2d=_0x32310a['filter'](_0x598f22=>_0x598f22['isEnemy']())['length'];let _0x92d9d2=0x0,_0x1bd697=0x0;if(_0x1a4f87[_0x1c7372(0x3c6)](/front/i))_0x92d9d2=_0x37aea6>=_0x4f6e2d?_0x36852c:_0x56734e;else{if(_0x1a4f87[_0x1c7372(0x3c6)](/middle/i))_0x92d9d2=(_0x36852c+_0x56734e)/0x2,melee=-0x1;else _0x1a4f87['match'](/back/i)&&(_0x92d9d2=_0x37aea6>=_0x4f6e2d?_0x56734e:_0x36852c);}if(_0x1a4f87['match'](/head/i))_0x1bd697=_0x113f47;else{if(_0x1a4f87[_0x1c7372(0x3c6)](/center/i))_0x1bd697=(_0x113f47+_0x3f870c)/0x2;else _0x1a4f87[_0x1c7372(0x3c6)](/base/i)&&(_0x1bd697=_0x3f870c);}_0x92d9d2+=(Graphics[_0x1c7372(0xac8)]-Graphics[_0x1c7372(0x671)])/0x2,_0x1bd697+=(Graphics[_0x1c7372(0x202)]-Graphics[_0x1c7372(0x5bb)])/0x2,_0x92d9d2+=_0x4adec7,_0x1bd697+=_0x5dbe58,_0x19995a['setupZoomBlurImpactFilter'](_0x30e32a,_0x92d9d2,_0x1bd697,_0x692c1a,_0x36e6e2,_0x4694ab);}),PluginManager['registerCommand'](pluginData['name'],_0x9c6fcf(0x3f8),_0x3bfea8=>{const _0x3fb1dc=_0x9c6fcf;if(!Imported[_0x3fb1dc(0x62f)])return;const _0xc049d7=SceneManager['_scene'][_0x3fb1dc(0x21f)];if(!_0xc049d7)return;if(VisuMZ['ActSeqImpact'][_0x3fb1dc(0x14c)]<=1.05){alert(_0x3fb1dc(0xa4b)),SceneManager[_0x3fb1dc(0x2ee)]();return;}VisuMZ[_0x3fb1dc(0x5e4)](_0x3bfea8,_0x3bfea8);const _0x18f3c2=VisuMZ[_0x3fb1dc(0x599)](_0x3bfea8[_0x3fb1dc(0x708)]),_0x4f8f36={'filename':_0x3bfea8[_0x3fb1dc(0x2f5)],'horzCells':_0x3bfea8[_0x3fb1dc(0xa2c)]||0x1,'vertCells':_0x3bfea8['vertCells']||0x1,'frameDelay':_0x3bfea8[_0x3fb1dc(0x5a7)]||0x1,'smooth':_0x3bfea8[_0x3fb1dc(0x682)]||![],'anchorX':_0x3bfea8[_0x3fb1dc(0x8e6)]||0x0,'anchorY':_0x3bfea8[_0x3fb1dc(0x9e4)]||0x0,'offsetX':_0x3bfea8['offsetX']||0x0,'offsetY':_0x3bfea8['offsetY']||0x0};for(const _0x338022 of _0x18f3c2){if(!_0x338022)continue;if(!_0x338022['battler']())continue;_0x338022[_0x3fb1dc(0x338)]()[_0x3fb1dc(0x495)](_0x4f8f36);}const _0x5002ed=$gameTemp[_0x3fb1dc(0x970)]();_0x5002ed&&_0x5002ed['setWaitMode']('battleInjectPrep');}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Inject_AnimationEnd',_0x269cff=>{const _0xcb9613=_0x9c6fcf;if(!Imported[_0xcb9613(0x62f)])return;const _0x2515c6=SceneManager[_0xcb9613(0x90f)]['_spriteset'];if(!_0x2515c6)return;if(VisuMZ[_0xcb9613(0x6a5)][_0xcb9613(0x14c)]<=1.05){alert(_0xcb9613(0xa4b)),SceneManager['exit']();return;}VisuMZ[_0xcb9613(0x5e4)](_0x269cff,_0x269cff);const _0x5e454c=VisuMZ['CreateActionSequenceTargets'](_0x269cff[_0xcb9613(0x708)]);for(const _0x32fb3f of _0x5e454c){if(!_0x32fb3f)continue;if(!_0x32fb3f[_0xcb9613(0x338)]())continue;_0x32fb3f[_0xcb9613(0x338)]()[_0xcb9613(0x51f)]();}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Inject_AnimationPauseResume',_0x4cf674=>{const _0x18c04e=_0x9c6fcf;if(!Imported[_0x18c04e(0x62f)])return;const _0x4093c6=SceneManager[_0x18c04e(0x90f)]['_spriteset'];if(!_0x4093c6)return;if(VisuMZ['ActSeqImpact'][_0x18c04e(0x14c)]<=1.05){alert(_0x18c04e(0xa4b)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x4cf674,_0x4cf674);const _0xa36051=VisuMZ['CreateActionSequenceTargets'](_0x4cf674[_0x18c04e(0x708)]),_0xa001d1=_0x4cf674[_0x18c04e(0x444)];for(const _0x250fad of _0xa36051){if(!_0x250fad)continue;if(!_0x250fad[_0x18c04e(0x338)]())continue;_0x250fad[_0x18c04e(0x338)]()[_0x18c04e(0x85f)](_0xa001d1);}}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x623),_0x472fce=>{const _0x1ec831=_0x9c6fcf;if(!SceneManager[_0x1ec831(0x319)]())return;const _0x22c814=$gameTemp[_0x1ec831(0x970)]();if(!_0x22c814)return;_0x22c814[_0x1ec831(0x9ad)]('battleInjectAni');}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_ActionEffect',_0x510f20=>{const _0x3c435d=_0x9c6fcf;if(!SceneManager[_0x3c435d(0x319)]())return;VisuMZ[_0x3c435d(0x5e4)](_0x510f20,_0x510f20);const _0x54e410=$gameTemp[_0x3c435d(0x970)](),_0x376bb1=BattleManager[_0x3c435d(0x9d9)],_0x305aef=BattleManager[_0x3c435d(0x3d7)],_0x3ff3c0=BattleManager[_0x3c435d(0x3d6)];if(!_0x54e410||!_0x376bb1||!_0x305aef)return;if(!_0x376bb1[_0x3c435d(0x9d3)]())return;const _0xf5ee84=VisuMZ[_0x3c435d(0x599)](_0x510f20['Targets']);for(const _0x2e6e9b of _0xf5ee84){if(!_0x2e6e9b)continue;_0x3ff3c0[_0x3c435d(0x4c6)](_0x3c435d(0x6dc),_0x305aef,_0x2e6e9b);}_0x54e410['setWaitMode'](_0x3c435d(0x21c));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x2ed),_0x5ec79d=>{const _0x558082=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x558082(0x762)])return;$gameTemp[_0x558082(0xae6)]=!![];}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Mechanics_AddBuffDebuff',_0x573b84=>{const _0x8fd900=_0x9c6fcf;if(!SceneManager[_0x8fd900(0x319)]())return;VisuMZ[_0x8fd900(0x5e4)](_0x573b84,_0x573b84);const _0x3650db=[_0x8fd900(0x871),'MAXMP',_0x8fd900(0x6f0),'DEF',_0x8fd900(0x64c),_0x8fd900(0x93a),_0x8fd900(0x9cf),_0x8fd900(0x8af)],_0x1ad274=_0x573b84['Buffs'],_0x1dbf07=_0x573b84[_0x8fd900(0x3cd)],_0x4b045c=_0x573b84[_0x8fd900(0x1d3)],_0x14c26f=VisuMZ[_0x8fd900(0x599)](_0x573b84['Targets']);for(const _0x2129b6 of _0x14c26f){if(!_0x2129b6)continue;for(const _0x382396 of _0x1ad274){const _0x10b462=_0x3650db[_0x8fd900(0x9c4)](_0x382396[_0x8fd900(0x5ed)]()['trim']());_0x10b462>=0x0&&_0x10b462<=0x7&&_0x2129b6[_0x8fd900(0x7e4)](_0x10b462,_0x4b045c);}for(const _0x5b5fec of _0x1dbf07){const _0x1e7cd1=_0x3650db[_0x8fd900(0x9c4)](_0x5b5fec['toUpperCase']()[_0x8fd900(0x4a5)]());_0x1e7cd1>=0x0&&_0x1e7cd1<=0x7&&_0x2129b6[_0x8fd900(0x29c)](_0x1e7cd1,_0x4b045c);}}}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x3d9),_0x147f4c=>{const _0x195593=_0x9c6fcf;if(!SceneManager[_0x195593(0x319)]())return;VisuMZ[_0x195593(0x5e4)](_0x147f4c,_0x147f4c);const _0x3dc6c4=_0x147f4c[_0x195593(0x66a)],_0x4d0f3f=VisuMZ[_0x195593(0x599)](_0x147f4c[_0x195593(0x708)]);for(const _0x4a48b1 of _0x4d0f3f){if(!_0x4a48b1)continue;for(const _0x2b2d38 of _0x3dc6c4){_0x4a48b1[_0x195593(0x5f9)](_0x2b2d38);}}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_ArmorPenetration',_0x3312cb=>{const _0xfdfbd6=_0x9c6fcf;if(!SceneManager[_0xfdfbd6(0x319)]())return;VisuMZ[_0xfdfbd6(0x5e4)](_0x3312cb,_0x3312cb);const _0x1caaef=BattleManager[_0xfdfbd6(0x9d9)],_0x4a6814={'arPenRate':_0x3312cb[_0xfdfbd6(0xa9c)],'arPenFlat':_0x3312cb['ArPenFlat'],'arRedRate':_0x3312cb[_0xfdfbd6(0x2c3)],'arRedFlat':_0x3312cb['ArRedFlat']};_0x1caaef[_0xfdfbd6(0x487)]=_0x4a6814;}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_AnalyzeWeakness',_0x421ebc=>{const _0x335d1e=_0x9c6fcf;if(!SceneManager[_0x335d1e(0x319)]())return;if(!Imported[_0x335d1e(0x48b)])return;VisuMZ['ConvertParams'](_0x421ebc,_0x421ebc);const _0x46b975=VisuMZ[_0x335d1e(0x599)](_0x421ebc[_0x335d1e(0x708)]),_0x5e7bc2=_0x421ebc[_0x335d1e(0x414)]||0x1;for(const _0x78938b of _0x46b975){if(!_0x78938b)continue;if(!_0x78938b[_0x335d1e(0x3fd)]())continue;_0x78938b[_0x335d1e(0x801)](_0x5e7bc2);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x8e5),_0x144850=>{const _0xe97565=_0x9c6fcf;if(!SceneManager[_0xe97565(0x319)]())return;if(!Imported[_0xe97565(0x718)])return;if(!BattleManager[_0xe97565(0x3dc)]())return;VisuMZ[_0xe97565(0x5e4)](_0x144850,_0x144850);const _0x2bc6f9=VisuMZ[_0xe97565(0x599)](_0x144850[_0xe97565(0x708)]),_0x362ac4=_0x144850[_0xe97565(0x624)],_0x48204f=_0x144850[_0xe97565(0x624)],_0x517cc5=_0x144850[_0xe97565(0x16f)];for(const _0x5ab613 of _0x2bc6f9){if(!_0x5ab613)continue;if(_0x5ab613[_0xe97565(0x950)]())_0x5ab613[_0xe97565(0x921)](_0x362ac4);else{if(_0x5ab613['isAtbCastingState']()){_0x5ab613['changeAtbCastTime'](_0x48204f);if(_0x517cc5)_0x5ab613['atbInterrupt']();}}}}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x502),_0x425914=>{const _0x4e7db0=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4e7db0(0x404)])return;VisuMZ[_0x4e7db0(0x5e4)](_0x425914,_0x425914);const _0x9dd738=VisuMZ[_0x4e7db0(0x599)](_0x425914[_0x4e7db0(0x708)]),_0x12f371=_0x425914[_0x4e7db0(0x8d3)];for(const _0x1da67e of _0x9dd738){if(!_0x1da67e)continue;_0x1da67e['gainStoredBoostPoints'](_0x12f371);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x421),_0x454f82=>{const _0x16b195=_0x9c6fcf;if(!SceneManager[_0x16b195(0x319)]())return;if(!Imported[_0x16b195(0x404)])return;if(!BattleManager[_0x16b195(0x3d7)])return;VisuMZ[_0x16b195(0x5e4)](_0x454f82,_0x454f82);const _0x133cba=_0x454f82[_0x16b195(0x739)];$gameVariables[_0x16b195(0x8e2)](_0x133cba,BattleManager[_0x16b195(0x3d7)]['toUseBoostPoints']());}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x829),_0x4ddcfc=>{const _0x4fd7e4=_0x9c6fcf;if(!SceneManager[_0x4fd7e4(0x319)]())return;if(!Imported[_0x4fd7e4(0x447)])return;VisuMZ[_0x4fd7e4(0x5e4)](_0x4ddcfc,_0x4ddcfc);const _0x5072d4=VisuMZ[_0x4fd7e4(0x599)](_0x4ddcfc[_0x4fd7e4(0x708)]),_0x36cd7b=_0x4ddcfc[_0x4fd7e4(0x2b2)];for(const _0x1e9b29 of _0x5072d4){if(!_0x1e9b29)continue;if(_0x1e9b29['isBreakStunned']())continue;if(!_0x1e9b29[_0x4fd7e4(0x411)]())continue;_0x1e9b29[_0x4fd7e4(0x8ac)](_0x36cd7b);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x594),_0x327add=>{const _0x4a6ed5=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4a6ed5(0x447)])return;VisuMZ[_0x4a6ed5(0x5e4)](_0x327add,_0x327add);const _0x52a76c=VisuMZ['CreateActionSequenceTargets'](_0x327add[_0x4a6ed5(0x708)]);for(const _0x24e9ee of _0x52a76c){if(!_0x24e9ee)continue;if(_0x24e9ee[_0x4a6ed5(0x418)]())continue;if(!_0x24e9ee['isAffectedByBreakShield']())continue;_0x24e9ee[_0x4a6ed5(0x2dc)]();}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x919),_0x40b4c4=>{const _0x2c78b3=_0x9c6fcf;if(!SceneManager[_0x2c78b3(0x319)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x2c78b3(0x257)]())return;VisuMZ[_0x2c78b3(0x5e4)](_0x40b4c4,_0x40b4c4);const _0x1b9224=VisuMZ[_0x2c78b3(0x599)](_0x40b4c4['Targets']),_0x27d593=_0x40b4c4['BravePoints'];for(const _0x391a61 of _0x1b9224){if(!_0x391a61)continue;_0x391a61[_0x2c78b3(0x8ce)](_0x27d593);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x8c2),_0xbee0d8=>{const _0xdfbbe2=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xdfbbe2(0x5e4)](_0xbee0d8,_0xbee0d8);const _0x4f156b=$gameTemp[_0xdfbbe2(0x970)](),_0x153a43=BattleManager[_0xdfbbe2(0x9d9)],_0x5a458c=BattleManager[_0xdfbbe2(0x3d7)];if(!_0x4f156b||!_0x153a43||!_0x5a458c)return;if(!_0x153a43['item']())return;const _0x4eeb0c=VisuMZ['CreateActionSequenceTargets'](_0xbee0d8[_0xdfbbe2(0x708)]);for(const _0x370e67 of _0x4eeb0c){if(!_0x370e67)continue;_0xbee0d8[_0xdfbbe2(0x5e5)]&&(_0x370e67[_0xdfbbe2(0xa1b)](),_0x370e67['addState'](_0x370e67[_0xdfbbe2(0x928)]())),_0x370e67[_0xdfbbe2(0x70b)]()&&_0x370e67[_0xdfbbe2(0x5a1)]();}_0x4f156b['setWaitMode'](_0xdfbbe2(0x25f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x424),_0x330982=>{const _0x379d7f=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x379d7f(0x3af)]())return;VisuMZ[_0x379d7f(0x5e4)](_0x330982,_0x330982);const _0x142297=VisuMZ['CreateActionSequenceTargets'](_0x330982[_0x379d7f(0x708)]),_0x6bc632=_0x330982[_0x379d7f(0x2e1)];for(const _0x4af9df of _0x142297){if(!_0x4af9df)continue;_0x4af9df[_0x379d7f(0x66f)](_0x6bc632);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xb4d),_0x4d88e1=>{const _0x4c8e0d=_0x9c6fcf;if(!SceneManager[_0x4c8e0d(0x319)]())return;if(!Imported[_0x4c8e0d(0x97d)])return;if(!BattleManager[_0x4c8e0d(0x3af)]())return;VisuMZ[_0x4c8e0d(0x5e4)](_0x4d88e1,_0x4d88e1);const _0x3c987d=VisuMZ[_0x4c8e0d(0x599)](_0x4d88e1['Targets']),_0x9f4a20=_0x4d88e1[_0x4c8e0d(0x624)],_0xd3c4e9=_0x4d88e1['ChargeRate'];for(const _0x4ec8db of _0x3c987d){if(!_0x4ec8db)continue;if(_0x4ec8db[_0x4c8e0d(0x259)]===_0x4c8e0d(0x713))_0x4ec8db[_0x4c8e0d(0x148)](_0x9f4a20);else _0x4ec8db[_0x4c8e0d(0x259)]==='casting'&&_0x4ec8db[_0x4c8e0d(0x4f2)](_0xd3c4e9);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_CustomDmgFormula',_0x594ad8=>{const _0xe8183d=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xe8183d(0x5e4)](_0x594ad8,_0x594ad8);const _0x471e2b=BattleManager[_0xe8183d(0x9d9)];if(!_0x471e2b)return;let _0x4b11e0=_0x594ad8[_0xe8183d(0x358)];_0x471e2b[_0xe8183d(0x66d)](_0x4b11e0);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x7d8),_0x34967d=>{const _0x2ddf80=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2ddf80(0x5e4)](_0x34967d,_0x34967d);const _0x46b44d=VisuMZ['CreateActionSequenceTargets'](_0x34967d['Targets']);for(const _0x4fdaa8 of _0x46b44d){if(!_0x4fdaa8)continue;if(_0x4fdaa8[_0x2ddf80(0x4f7)]())_0x4fdaa8[_0x2ddf80(0x36d)]();}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_DeathBreak',_0xd5d816=>{const _0x41032d=_0x9c6fcf;if(!SceneManager[_0x41032d(0x319)]())return;VisuMZ[_0x41032d(0x5e4)](_0xd5d816,_0xd5d816);const _0x3394a0=$gameTemp[_0x41032d(0x970)](),_0x259963=BattleManager['_subject'],_0x5d3ae9=_0xd5d816['JumpToLabel'];if(!_0x3394a0)return;if(!_0x259963)return;_0x259963&&_0x259963[_0x41032d(0xb27)]()&&_0x5d3ae9[_0x41032d(0x5ed)]()[_0x41032d(0x4a5)]()!==_0x41032d(0x53d)&&_0x3394a0[_0x41032d(0x2da)]([_0x5d3ae9]);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x740),_0x5aa29e=>{const _0x1ee8f5=_0x9c6fcf;if(!SceneManager[_0x1ee8f5(0x319)]())return;VisuMZ['ConvertParams'](_0x5aa29e,_0x5aa29e);const _0x9edc6b=$gameTemp['getLastPluginCommandInterpreter'](),_0x3e9cba=BattleManager[_0x1ee8f5(0x3d6)];if(!_0x9edc6b)return;const _0x41fcb8=VisuMZ['CreateActionSequenceTargets'](_0x5aa29e[_0x1ee8f5(0x6fa)]),_0x4ae847=VisuMZ[_0x1ee8f5(0x599)](_0x5aa29e[_0x1ee8f5(0x708)]);for(const _0x4750c1 of _0x41fcb8){for(const _0x5befac of _0x4ae847){if(!_0x5befac)continue;const _0x1c35dd=$dataSkills[_0x4750c1[_0x1ee8f5(0x809)]()];_0x3e9cba[_0x1ee8f5(0x4c6)](_0x1ee8f5(0x249),_0x4750c1,_0x5befac,_0x1c35dd);}}_0x9edc6b['setWaitMode'](_0x1ee8f5(0x21c));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x134),_0x45f8a7=>{const _0x1a279c=_0x9c6fcf;if(!SceneManager[_0x1a279c(0x319)]())return;VisuMZ[_0x1a279c(0x5e4)](_0x45f8a7,_0x45f8a7);const _0x724bda=$gameTemp[_0x1a279c(0x970)](),_0x4d8975=BattleManager[_0x1a279c(0x3d6)];if(!_0x724bda)return;const _0x3aac27=VisuMZ[_0x1a279c(0x599)](_0x45f8a7['Users']),_0x5786c9=VisuMZ[_0x1a279c(0x599)](_0x45f8a7[_0x1a279c(0x708)]);for(const _0x573f03 of _0x3aac27){for(const _0x431df9 of _0x5786c9){if(!_0x431df9)continue;const _0x15a360=$dataSkills[_0x573f03[_0x1a279c(0x5d4)]()];_0x4d8975[_0x1a279c(0x4c6)](_0x1a279c(0x249),_0x573f03,_0x431df9,_0x15a360);}}_0x724bda[_0x1a279c(0x9ad)](_0x1a279c(0x21c));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x49c),_0x52805a=>{const _0x2a97c8=_0x9c6fcf;if(!SceneManager[_0x2a97c8(0x319)]())return;VisuMZ[_0x2a97c8(0x5e4)](_0x52805a,_0x52805a);const _0x5344ec=$gameTemp[_0x2a97c8(0x970)](),_0x2f650a=BattleManager[_0x2a97c8(0x3d6)],_0x2decf9=Number(_0x52805a[_0x2a97c8(0x439)]||0x1),_0x4434c2=$dataItems[_0x2decf9];if(!_0x5344ec)return;if(!_0x4434c2)return;const _0x1e9407=VisuMZ['CreateActionSequenceTargets'](_0x52805a[_0x2a97c8(0x6fa)]),_0xc72101=VisuMZ[_0x2a97c8(0x599)](_0x52805a[_0x2a97c8(0x708)]);for(const _0x1ffbef of _0x1e9407){for(const _0x5a7887 of _0xc72101){if(!_0x5a7887)continue;_0x2f650a[_0x2a97c8(0x4c6)](_0x2a97c8(0x249),_0x1ffbef,_0x5a7887,_0x4434c2);}}_0x5344ec['setWaitMode'](_0x2a97c8(0x21c));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x7ef),_0x316e01=>{const _0x5032b3=_0x9c6fcf;if(!SceneManager[_0x5032b3(0x319)]())return;VisuMZ['ConvertParams'](_0x316e01,_0x316e01);let _0x2281a4=Number(_0x316e01[_0x5032b3(0x707)]||0x0);if(_0x2281a4<=0x0){const _0x5f2dc9=BattleManager['_action'];if(_0x5f2dc9&&_0x5f2dc9[_0x5032b3(0x52e)]())_0x2281a4=_0x5f2dc9['item']()['id'];else return;}const _0x48db5a=$dataSkills[_0x2281a4];if(!_0x48db5a)return;const _0x272171=VisuMZ['CreateActionSequenceTargets'](_0x316e01[_0x5032b3(0x6fa)]);for(const _0x31b4cb of _0x272171){_0x31b4cb[_0x5032b3(0x538)](_0x48db5a);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0xb63),_0x36c9db=>{const _0x1a121d=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1a121d(0x5e4)](_0x36c9db,_0x36c9db);const _0x37e7c2=$gameTemp[_0x1a121d(0x970)](),_0x464ce0=BattleManager[_0x1a121d(0x3d6)],_0x5a28a0=Number(_0x36c9db[_0x1a121d(0x707)]||0x1),_0x217516=$dataSkills[_0x5a28a0];if(!_0x37e7c2)return;if(!_0x217516)return;const _0x2cc212=VisuMZ['CreateActionSequenceTargets'](_0x36c9db[_0x1a121d(0x6fa)]),_0x308c23=VisuMZ[_0x1a121d(0x599)](_0x36c9db['Targets']);for(const _0x579bc2 of _0x2cc212){for(const _0x2a0033 of _0x308c23){if(!_0x2a0033)continue;_0x464ce0['push'](_0x1a121d(0x249),_0x579bc2,_0x2a0033,_0x217516);}}_0x37e7c2[_0x1a121d(0x9ad)](_0x1a121d(0x21c));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_EnemyEscape',_0x135281=>{const _0x3fd2ea=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3fd2ea(0x5e4)](_0x135281,_0x135281);const _0x350819=VisuMZ[_0x3fd2ea(0x599)](_0x135281[_0x3fd2ea(0x708)]);for(const _0x522716 of _0x350819){if(!_0x522716)continue;if(!_0x522716[_0x3fd2ea(0x3fd)]())continue;_0x522716[_0x3fd2ea(0x965)]();}}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Mechanics_EtbAction',_0xff1fe4=>{const _0x3b003d=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager['isETB']())return;VisuMZ[_0x3b003d(0x5e4)](_0xff1fe4,_0xff1fe4);const _0x21ef63=_0xff1fe4[_0x3b003d(0x8eb)];BattleManager['_subject']&&BattleManager[_0x3b003d(0x3d7)][_0x3b003d(0x616)]()[_0x3b003d(0x2fa)](_0x21ef63);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x90d),_0x326f91=>{const _0x588eb4=_0x9c6fcf;if(!SceneManager[_0x588eb4(0x319)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x588eb4(0x5e4)](_0x326f91,_0x326f91);const _0x5138f3=_0x326f91[_0x588eb4(0x8eb)];BattleManager['_subject']&&BattleManager['_subject'][_0x588eb4(0x616)]()[_0x588eb4(0x8b9)](_0x5138f3);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x1d7),_0xfaa6f7=>{const _0x4e636e=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4e636e(0x5e4)](_0xfaa6f7,_0xfaa6f7);const _0x1cbec5=VisuMZ[_0x4e636e(0x599)](_0xfaa6f7[_0x4e636e(0x708)]),_0x5c8464=_0xfaa6f7[_0x4e636e(0x4b4)],_0x31c156=_0xfaa6f7[_0x4e636e(0x929)],_0xd86320=_0xfaa6f7['MP_Rate'],_0x2e6258=_0xfaa6f7[_0x4e636e(0xaa6)],_0x1a8bfc=_0xfaa6f7['TP_Rate'],_0x3d5e04=_0xfaa6f7[_0x4e636e(0x1e7)],_0x7cc362=_0xfaa6f7[_0x4e636e(0x3f2)];for(const _0x6128e6 of _0x1cbec5){if(!_0x6128e6)continue;const _0x1a2206=_0x6128e6[_0x4e636e(0x69e)](),_0x306240=Math[_0x4e636e(0xb65)](_0x5c8464*_0x6128e6[_0x4e636e(0x8da)]+_0x31c156),_0x3e5b1a=Math[_0x4e636e(0xb65)](_0xd86320*_0x6128e6[_0x4e636e(0x4fe)]+_0x2e6258),_0x30fd8b=Math[_0x4e636e(0xb65)](_0x1a8bfc*_0x6128e6[_0x4e636e(0x2b7)]()+_0x3d5e04);if(_0x306240!==0x0)_0x6128e6[_0x4e636e(0x667)](_0x306240);if(_0x3e5b1a!==0x0)_0x6128e6[_0x4e636e(0x5e1)](_0x3e5b1a);if(_0x30fd8b!==0x0)_0x6128e6[_0x4e636e(0x223)](_0x30fd8b);if(_0x7cc362)_0x6128e6[_0x4e636e(0x36d)]();_0x1a2206&&_0x6128e6['isDead']()&&_0x6128e6['performCollapse']();}}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x455),_0x494493=>{const _0x1ff7ee=_0x9c6fcf;if(!SceneManager[_0x1ff7ee(0x319)]())return;VisuMZ[_0x1ff7ee(0x5e4)](_0x494493,_0x494493);const _0x1b51ae=VisuMZ[_0x1ff7ee(0x599)](_0x494493['Targets']);for(const _0x215d96 of _0x1b51ae){if(!_0x215d96)continue;_0x215d96['setImmortal'](_0x494493['Immortal']);}}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_Multipliers',_0x5e51ce=>{const _0x3ce18e=_0x9c6fcf;if(!SceneManager[_0x3ce18e(0x319)]())return;VisuMZ[_0x3ce18e(0x5e4)](_0x5e51ce,_0x5e51ce);const _0x41960c=BattleManager['_action'],_0x4c3f8c={'criticalHitRate':_0x5e51ce[_0x3ce18e(0x4c5)],'criticalHitFlat':_0x5e51ce[_0x3ce18e(0x51a)],'criticalDmgRate':_0x5e51ce[_0x3ce18e(0x7bd)],'criticalDmgFlat':_0x5e51ce[_0x3ce18e(0x332)],'damageRate':_0x5e51ce[_0x3ce18e(0xab6)],'damageFlat':_0x5e51ce[_0x3ce18e(0x5f8)],'hitRate':_0x5e51ce[_0x3ce18e(0x4ed)],'hitFlat':_0x5e51ce[_0x3ce18e(0xad1)]};_0x41960c[_0x3ce18e(0x445)]=_0x4c3f8c;}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x317),_0x2e66e9=>{const _0x24b0a3=_0x9c6fcf;if(!SceneManager[_0x24b0a3(0x319)]())return;VisuMZ[_0x24b0a3(0x5e4)](_0x2e66e9,_0x2e66e9);const _0x2403a0=_0x2e66e9[_0x24b0a3(0x376)];SceneManager[_0x24b0a3(0x90f)][_0x24b0a3(0x736)](_0x2403a0);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_OtbOrder',_0x2ca665=>{const _0x5cb2cb=_0x9c6fcf;if(!SceneManager[_0x5cb2cb(0x319)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x5cb2cb(0x9df)]())return;VisuMZ[_0x5cb2cb(0x5e4)](_0x2ca665,_0x2ca665);const _0x5b61ae=VisuMZ['CreateActionSequenceTargets'](_0x2ca665[_0x5cb2cb(0x708)]);for(const _0x582033 of _0x5b61ae){if(!_0x582033)continue;let _0x1bae37=_0x2ca665[_0x5cb2cb(0x64e)],_0x33cded=_0x2ca665[_0x5cb2cb(0x9eb)],_0x3d3d96=_0x2ca665[_0x5cb2cb(0x13e)];BattleManager[_0x5cb2cb(0x8de)][_0x5cb2cb(0x765)](_0x582033)?_0x1bae37+=_0x3d3d96:_0x33cded+=_0x3d3d96,BattleManager[_0x5cb2cb(0x67a)](_0x582033,-_0x1bae37,![]),BattleManager[_0x5cb2cb(0x67a)](_0x582033,-_0x33cded,!![]);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x797),_0x37387a=>{const _0x309362=_0x9c6fcf;if(!SceneManager[_0x309362(0x319)]())return;if(!Imported[_0x309362(0x2c5)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x309362(0x5e4)](_0x37387a,_0x37387a);const _0x4cb5ef=BattleManager[_0x309362(0x3d7)]['friendsUnit'](),_0x552788=_0x37387a[_0x309362(0x2de)],_0x3f74b1=_0x37387a[_0x309362(0x12b)]||'unchanged',_0x50c294=_0x37387a[_0x309362(0x791)]||_0x309362(0x90c),_0x3c7a9e=_0x37387a[_0x309362(0x4b5)]||0x0,_0x4a1bd6=_0x37387a['alterPriority']||0x0;(_0x4cb5ef[_0x309362(0x3d0)]()||_0x552788)&&(_0x552788&&(_0x4cb5ef['_ptbActionCost']=_0x4cb5ef[_0x309362(0x461)]||{},_0x4cb5ef[_0x309362(0x461)][_0x309362(0x7c8)]=0x0),_0x4cb5ef[_0x309362(0x5df)](_0x3f74b1,_0x50c294,_0x3c7a9e,_0x4a1bd6));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x31d),_0x4d9712=>{const _0x4d3a89=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x4d3a89(0x5e4)](_0x4d9712,_0x4d9712);const _0x34747e=BattleManager[_0x4d3a89(0x3d7)][_0x4d3a89(0x616)]();let _0x101789=Math['max'](_0x4d9712[_0x4d3a89(0x417)],0x0),_0x59a050=_0x34747e[_0x4d3a89(0x833)](),_0xdc9b6=_0x34747e[_0x4d3a89(0x3ac)]();while(_0x101789--){if(_0x59a050<=0x0&&_0xdc9b6<=0x0)break;else _0x59a050>0x0?(_0x59a050--,_0xdc9b6++):_0xdc9b6--;}_0x34747e[_0x4d3a89(0x140)](_0x59a050),_0x34747e['setHalfActionsPTB'](_0xdc9b6);}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x63a),_0x5a1960=>{const _0x421b7f=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x421b7f(0x2c5)])return;if(!BattleManager[_0x421b7f(0x72f)]())return;VisuMZ[_0x421b7f(0x5e4)](_0x5a1960,_0x5a1960);const _0x405381=BattleManager['_subject'][_0x421b7f(0x616)]();let _0x34a990=_0x5a1960['FullActions'],_0x2bb042=_0x5a1960[_0x421b7f(0x64f)];_0x405381['gainFullActionsPTB'](_0x34a990),_0x405381[_0x421b7f(0x918)](_0x2bb042);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x266a58=>{const _0x2e7349=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2e7349(0x5e4)](_0x266a58,_0x266a58);const _0x8cb106=['MAXHP',_0x2e7349(0x56f),_0x2e7349(0x6f0),'DEF',_0x2e7349(0x64c),_0x2e7349(0x93a),'AGI','LUK'],_0x40e22e=_0x266a58['Buffs'],_0x55200=_0x266a58[_0x2e7349(0x3cd)],_0xef4a86=VisuMZ[_0x2e7349(0x599)](_0x266a58[_0x2e7349(0x708)]);for(const _0x17f916 of _0xef4a86){if(!_0x17f916)continue;for(const _0x4291b8 of _0x40e22e){const _0x511056=_0x8cb106[_0x2e7349(0x9c4)](_0x4291b8[_0x2e7349(0x5ed)]()['trim']());_0x511056>=0x0&&_0x511056<=0x7&&_0x17f916[_0x2e7349(0x50f)](_0x511056)&&_0x17f916[_0x2e7349(0x199)](_0x511056);}for(const _0x3bee1d of _0x55200){const _0xf8280c=_0x8cb106[_0x2e7349(0x9c4)](_0x3bee1d[_0x2e7349(0x5ed)]()['trim']());_0xf8280c>=0x0&&_0xf8280c<=0x7&&_0x17f916[_0x2e7349(0x83b)](_0xf8280c)&&_0x17f916[_0x2e7349(0x199)](_0xf8280c);}}}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x5d8),_0x3172f1=>{const _0x265d93=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x265d93(0x5e4)](_0x3172f1,_0x3172f1);const _0x42bb2a=_0x3172f1[_0x265d93(0x66a)],_0x4a2541=VisuMZ[_0x265d93(0x599)](_0x3172f1[_0x265d93(0x708)]);for(const _0xd35cf8 of _0x4a2541){if(!_0xd35cf8)continue;for(const _0x61e3ec of _0x42bb2a){_0xd35cf8[_0x265d93(0x795)](_0x61e3ec);}}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x876),_0x43d73f=>{const _0x2b2de8=_0x9c6fcf;if(!SceneManager[_0x2b2de8(0x319)]())return;if(!Imported[_0x2b2de8(0x180)])return;VisuMZ[_0x2b2de8(0x5e4)](_0x43d73f,_0x43d73f);const _0xc1cdad=VisuMZ[_0x2b2de8(0x599)](_0x43d73f['Targets']),_0x397226=Number(_0x43d73f[_0x2b2de8(0x5aa)]),_0x4cb7ba=Number(_0x43d73f['Turns']),_0x745207=_0x43d73f[_0x2b2de8(0x869)];for(const _0x377797 of _0xc1cdad){if(!_0x377797)continue;_0x745207&&!_0x377797['isStateAffected'](_0x397226)?(_0x377797[_0x2b2de8(0x5f9)](_0x397226),_0x377797['setStateTurns'](_0x397226,_0x4cb7ba)):_0x377797['addStateTurns'](_0x397226,_0x4cb7ba);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_StateTurnsChangeTo',_0x4f70e3=>{const _0x42f568=_0x9c6fcf;if(!SceneManager[_0x42f568(0x319)]())return;if(!Imported[_0x42f568(0x180)])return;VisuMZ[_0x42f568(0x5e4)](_0x4f70e3,_0x4f70e3);const _0x5c85fe=VisuMZ['CreateActionSequenceTargets'](_0x4f70e3[_0x42f568(0x708)]),_0x52033b=Number(_0x4f70e3['StateID']),_0x4203db=Math['max'](Number(_0x4f70e3[_0x42f568(0x1d3)]),0x0),_0x3555a9=_0x4f70e3['AutoAddState'];for(const _0x1d2bce of _0x5c85fe){if(!_0x1d2bce)continue;_0x3555a9&&!_0x1d2bce[_0x42f568(0x84f)](_0x52033b)&&_0x1d2bce[_0x42f568(0x5f9)](_0x52033b),_0x1d2bce[_0x42f568(0x73b)](_0x52033b,_0x4203db);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x8e8),_0x1d1318=>{const _0x4b66b7=_0x9c6fcf;if(!SceneManager[_0x4b66b7(0x319)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x4b66b7(0x884)]())return;VisuMZ[_0x4b66b7(0x5e4)](_0x1d1318,_0x1d1318);const _0x5f3998=_0x1d1318[_0x4b66b7(0x122)],_0x48f6df=VisuMZ['CreateActionSequenceTargets'](_0x1d1318[_0x4b66b7(0x708)]),_0x458bb5=_0x1d1318[_0x4b66b7(0x261)],_0x3031dd=_0x1d1318[_0x4b66b7(0x3d2)],_0x57fa5a=_0x1d1318['ForceExploiter'],_0x121e32=BattleManager[_0x4b66b7(0x9d9)];if(_0x5f3998)for(const _0x3b25a7 of _0x48f6df){if(!_0x3b25a7)continue;if(_0x3b25a7===BattleManager['_subject'])continue;if(_0x458bb5)_0x3b25a7[_0x4b66b7(0x70a)](![]);_0x3b25a7[_0x4b66b7(0x1e9)](BattleManager[_0x4b66b7(0x3d7)],_0x121e32);}if(_0x3031dd&&BattleManager['_subject']){if(_0x57fa5a)BattleManager[_0x4b66b7(0x3d7)][_0x4b66b7(0x70a)](![]);const _0x4bad4f=_0x48f6df[0x0];BattleManager[_0x4b66b7(0x3d7)][_0x4b66b7(0x309)](_0x4bad4f,_0x121e32);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_StbExtraAction',_0x235489=>{const _0x1498b3=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1498b3(0x4f6)])return;if(!BattleManager[_0x1498b3(0x884)]())return;VisuMZ[_0x1498b3(0x5e4)](_0x235489,_0x235489);const _0x17066e=_0x235489['Actions'];BattleManager[_0x1498b3(0x3d7)]&&BattleManager['_subject']['stbGainInstant'](_0x17066e);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x4dd),_0x13febd=>{const _0x331f48=_0x9c6fcf;if(!SceneManager[_0x331f48(0x319)]())return;if(!Imported[_0x331f48(0x4f6)])return;if(!BattleManager[_0x331f48(0x884)]())return;VisuMZ['ConvertParams'](_0x13febd,_0x13febd);let _0x8d239d=_0x13febd['Actions'];if(BattleManager[_0x331f48(0x3d7)]){BattleManager[_0x331f48(0x3d7)][_0x331f48(0x8ab)]=BattleManager[_0x331f48(0x3d7)][_0x331f48(0x8ab)]||[];while(_0x8d239d--){if(BattleManager[_0x331f48(0x3d7)][_0x331f48(0x8ab)][_0x331f48(0x88e)]<=0x0)break;BattleManager[_0x331f48(0x3d7)][_0x331f48(0x8ab)][_0x331f48(0x9d7)]();}}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x44e),_0x3132f6=>{const _0x32dded=_0x9c6fcf;if(!SceneManager[_0x32dded(0x319)]())return;if(!Imported[_0x32dded(0xaa9)])return;VisuMZ[_0x32dded(0x5e4)](_0x3132f6,_0x3132f6);const _0x4b3eaa=VisuMZ['CreateActionSequenceTargets'](_0x3132f6[_0x32dded(0x708)]),_0x198659=_0x3132f6['WeaponTypeID'];for(const _0x3013db of _0x4b3eaa){if(!_0x3013db)continue;if(!_0x3013db[_0x32dded(0x552)]())continue;_0x3013db[_0x32dded(0x408)](_0x198659);}}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_Mechanics_TextPopup',_0x18c38a=>{const _0xf1258=_0x9c6fcf;if(!SceneManager[_0xf1258(0x319)]())return;VisuMZ[_0xf1258(0x5e4)](_0x18c38a,_0x18c38a);const _0x584d88=VisuMZ[_0xf1258(0x599)](_0x18c38a[_0xf1258(0x708)]),_0x53df25=_0x18c38a[_0xf1258(0x575)],_0x5493ad={'textColor':ColorManager[_0xf1258(0x514)](_0x18c38a[_0xf1258(0x406)]),'flashColor':_0x18c38a[_0xf1258(0x19d)],'flashDuration':_0x18c38a[_0xf1258(0x4c7)]};for(const _0x16fb48 of _0x584d88){if(!_0x16fb48)continue;_0x16fb48[_0xf1258(0x64d)](_0x53df25,_0x5493ad);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x94c),_0x42c3b8=>{const _0x574dbe=_0x9c6fcf;if(!SceneManager[_0x574dbe(0x319)]())return;VisuMZ['ConvertParams'](_0x42c3b8,_0x42c3b8);const _0x5a2845=VisuMZ[_0x574dbe(0x599)](_0x42c3b8['Targets']);let _0x584cb7=$gameVariables[_0x574dbe(0x99d)](_0x42c3b8['Variable']);Imported[_0x574dbe(0xb00)]&&_0x42c3b8[_0x574dbe(0x617)]&&(_0x584cb7=VisuMZ[_0x574dbe(0x6e7)](_0x584cb7));const _0x3d8454=String(_0x584cb7),_0x523cbf={'textColor':ColorManager[_0x574dbe(0x514)](_0x42c3b8[_0x574dbe(0x406)]),'flashColor':_0x42c3b8[_0x574dbe(0x19d)],'flashDuration':_0x42c3b8['FlashDuration']};for(const _0x5e17f3 of _0x5a2845){if(!_0x5e17f3)continue;_0x5e17f3[_0x574dbe(0x64d)](_0x3d8454,_0x523cbf);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x669),_0x4dab7d=>{const _0x1bca50=_0x9c6fcf;if(!SceneManager[_0x1bca50(0x319)]())return;const _0x4d9335=$gameTemp[_0x1bca50(0x970)]();if(!_0x4d9335)return;_0x4d9335[_0x1bca50(0x9ad)]('battleEffect');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Motion_ClearFreezeFrame',_0x596365=>{const _0x2b4c11=_0x9c6fcf;if(!SceneManager[_0x2b4c11(0x319)]())return;VisuMZ['ConvertParams'](_0x596365,_0x596365);const _0x50d6e1=VisuMZ[_0x2b4c11(0x599)](_0x596365['Targets']);for(const _0x24795d of _0x50d6e1){if(!_0x24795d)continue;_0x24795d[_0x2b4c11(0x367)]();}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x6c7),_0x512143=>{const _0x14172b=_0x9c6fcf;if(!SceneManager[_0x14172b(0x319)]())return;VisuMZ[_0x14172b(0x5e4)](_0x512143,_0x512143);const _0x1c95f6=VisuMZ[_0x14172b(0x599)](_0x512143[_0x14172b(0x708)]),_0x2c7dfd=_0x512143['MotionType']['toLowerCase']()[_0x14172b(0x4a5)]();let _0xd4c861=_0x512143[_0x14172b(0x2e8)];const _0x4cb6f0=_0x512143[_0x14172b(0x712)];![_0x14172b(0x254),_0x14172b(0x53f),_0x14172b(0x36e),'missile']['includes'](_0x2c7dfd)&&(_0xd4c861=![]);for(const _0x12a537 of _0x1c95f6){if(!_0x12a537)continue;_0x12a537[_0x14172b(0x75e)](_0x2c7dfd,_0xd4c861,_0x4cb6f0);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x2d3),_0x13075a=>{const _0x19f2d9=_0x9c6fcf;if(!SceneManager[_0x19f2d9(0x319)]())return;VisuMZ[_0x19f2d9(0x5e4)](_0x13075a,_0x13075a);const _0x40e87f=VisuMZ[_0x19f2d9(0x599)](_0x13075a['Targets']),_0x410598=_0x13075a['MotionType'][_0x19f2d9(0x3b9)]()[_0x19f2d9(0x4a5)](),_0x1af068=_0x13075a[_0x19f2d9(0x2e8)];for(const _0x460204 of _0x40e87f){if(!_0x460204)continue;_0x460204[_0x19f2d9(0x12a)]=_0x1af068;if(_0x410598[_0x19f2d9(0x3c6)](/ATTACK[ ](\d+)/i))_0x460204['performAttackSlot'](Number(RegExp['$1']));else _0x410598===_0x19f2d9(0x254)?_0x460204[_0x19f2d9(0xb0e)]():_0x460204[_0x19f2d9(0x297)](_0x410598);if(!_0x1af068)_0x460204[_0x19f2d9(0x23c)](0x0);else{if(_0x1af068&&['thrust',_0x19f2d9(0x36e),_0x19f2d9(0x76e)][_0x19f2d9(0x765)](_0x410598)){}}_0x460204[_0x19f2d9(0x12a)]=undefined;}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Motion_PerformAction',_0x283267=>{const _0x22486=_0x9c6fcf;if(!SceneManager[_0x22486(0x319)]())return;VisuMZ[_0x22486(0x5e4)](_0x283267,_0x283267);const _0x58d3bb=BattleManager[_0x22486(0x9d9)];if(!_0x58d3bb)return;if(!_0x58d3bb[_0x22486(0x9d3)]())return;const _0x548551=VisuMZ[_0x22486(0x599)](_0x283267[_0x22486(0x708)]);for(const _0x5e0867 of _0x548551){if(!_0x5e0867)continue;_0x5e0867[_0x22486(0x2b9)](_0x58d3bb);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x4f4),_0x10cb0b=>{const _0x24cd00=_0x9c6fcf;if(!SceneManager[_0x24cd00(0x319)]())return;VisuMZ[_0x24cd00(0x5e4)](_0x10cb0b,_0x10cb0b);const _0x2f2cd6=VisuMZ[_0x24cd00(0x599)](_0x10cb0b['Targets']);for(const _0x104c1c of _0x2f2cd6){if(!_0x104c1c)continue;if(!_0x104c1c['battler']())continue;_0x104c1c[_0x24cd00(0x338)]()[_0x24cd00(0x24f)]();}}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x72e),_0x19a13=>{const _0x26cc73=_0x9c6fcf;if(!SceneManager[_0x26cc73(0x319)]())return;VisuMZ[_0x26cc73(0x5e4)](_0x19a13,_0x19a13);const _0x84b4ee=$gameTemp['getLastPluginCommandInterpreter'](),_0x59f5a8=_0x19a13['MotionFrameWait']*Sprite_Battler[_0x26cc73(0x5be)];_0x84b4ee[_0x26cc73(0x396)](_0x59f5a8);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x819),_0x7c5752=>{const _0x2c8d2c=_0x9c6fcf;if(!SceneManager[_0x2c8d2c(0x319)]())return;VisuMZ[_0x2c8d2c(0x5e4)](_0x7c5752,_0x7c5752);const _0x2b9f0=$gameTemp[_0x2c8d2c(0x970)](),_0x127b52=BattleManager[_0x2c8d2c(0x9d9)];if(!_0x2b9f0||!_0x127b52)return;if(!_0x127b52[_0x2c8d2c(0x9d3)]())return;const _0x5a3b56=VisuMZ[_0x2c8d2c(0x599)](_0x7c5752['Targets']);for(const _0x183588 of _0x5a3b56){if(!_0x183588)continue;_0x183588[_0x2c8d2c(0x8f4)](_0x127b52);}if(_0x7c5752[_0x2c8d2c(0x6d8)])_0x2b9f0[_0x2c8d2c(0x9ad)](_0x2c8d2c(0x31f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x5ec),_0x568434=>{const _0x101455=_0x9c6fcf;if(!SceneManager[_0x101455(0x319)]())return;if(!$gameSystem[_0x101455(0x95c)]())return;VisuMZ[_0x101455(0x5e4)](_0x568434,_0x568434);const _0x5c2888=$gameTemp[_0x101455(0x970)](),_0x41eb87=VisuMZ[_0x101455(0x599)](_0x568434[_0x101455(0x708)]),_0x5718a2=_0x568434[_0x101455(0xb35)],_0x53f1a4=_0x568434[_0x101455(0x971)],_0x40c27a=_0x568434['DistanceY'],_0x789ba0=_0x568434[_0x101455(0x82b)],_0x4a4c86=_0x568434['FaceDirection'],_0x32ed30=_0x568434[_0x101455(0x25d)],_0x77062a=_0x568434[_0x101455(0x1cf)],_0x48e7c2=_0x568434[_0x101455(0x6d8)];if(!_0x5c2888)return;const _0x3ba30f=VisuMZ[_0x101455(0x8f5)][_0x101455(0x19c)];for(const _0x239945 of _0x41eb87){if(!_0x239945)continue;let _0x3e50e8=_0x53f1a4,_0x1a9341=_0x40c27a;if(_0x5718a2['match'](/horz/i))_0x3e50e8*=_0x239945[_0x101455(0x552)]()?-0x1:0x1;if(_0x5718a2[_0x101455(0x3c6)](/vert/i))_0x1a9341*=_0x239945[_0x101455(0x552)]()?-0x1:0x1;if(_0x239945['isActor']())_0x3e50e8-=_0x3ba30f['Actor'][_0x101455(0x30c)],_0x1a9341-=_0x3ba30f['Actor'][_0x101455(0x238)];else _0x239945[_0x101455(0x3fd)]()&&(_0x3e50e8-=_0x3ba30f['Enemy']['OffsetX'],_0x1a9341-=_0x3ba30f[_0x101455(0x7b3)][_0x101455(0x238)]);const _0x3686cd=_0x3e50e8;_0x239945['moveBattlerHomeDistance'](_0x3e50e8,_0x1a9341,_0x789ba0,_0x4a4c86,_0x32ed30),_0x239945['requestMotion'](_0x77062a);}if(_0x48e7c2)_0x5c2888['setWaitMode'](_0x101455(0x31f));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xb5f),_0x45ec5b=>{const _0x497ac2=_0x9c6fcf;if(!SceneManager[_0x497ac2(0x319)]())return;if(!$gameSystem[_0x497ac2(0x95c)]())return;VisuMZ[_0x497ac2(0x5e4)](_0x45ec5b,_0x45ec5b);const _0x1e28d3=$gameTemp[_0x497ac2(0x970)](),_0x5810da=VisuMZ[_0x497ac2(0x599)](_0x45ec5b[_0x497ac2(0x708)]),_0xb51255=_0x45ec5b[_0x497ac2(0x1ab)],_0x4fbbaf=_0x45ec5b[_0x497ac2(0x30c)],_0x2f8c07=_0x45ec5b['OffsetY'],_0x2f92a0=_0x45ec5b[_0x497ac2(0x82b)],_0x99d0cd=_0x45ec5b[_0x497ac2(0x1b8)],_0x621866=_0x45ec5b[_0x497ac2(0x25d)],_0x1a7b56=_0x45ec5b['MotionType'],_0x5ed666=_0x45ec5b['WaitForMovement'];if(!_0x1e28d3)return;for(const _0x3ed770 of _0x5810da){if(!_0x3ed770)continue;const _0x357a16=_0x45ec5b['DestinationJS'](_0x3ed770)||{'x':0x0,'y':0x0};let _0x5a40bd=_0x357a16['x'],_0x468a8b=_0x357a16['y'];if(_0xb51255[_0x497ac2(0x3c6)](/none/i))_0x5a40bd+=_0x4fbbaf,_0x468a8b+=_0x2f8c07;else{if(_0xb51255[_0x497ac2(0x3c6)](/horz/i)&&_0xb51255[_0x497ac2(0x3c6)](/vert/i))_0x5a40bd+=_0x3ed770[_0x497ac2(0x552)]()?-_0x4fbbaf:_0x4fbbaf,_0x468a8b+=_0x3ed770[_0x497ac2(0x552)]()?-_0x2f8c07:_0x2f8c07;else{if(_0xb51255[_0x497ac2(0x3c6)](/horz/i))_0x5a40bd+=_0x3ed770[_0x497ac2(0x552)]()?-_0x4fbbaf:_0x4fbbaf,_0x468a8b+=_0x2f8c07;else _0xb51255[_0x497ac2(0x3c6)](/vert/i)&&(_0x5a40bd+=_0x4fbbaf,_0x468a8b+=_0x3ed770['isActor']()?-_0x2f8c07:_0x2f8c07);}}_0x3ed770[_0x497ac2(0x379)](_0x5a40bd,_0x468a8b,_0x2f92a0,_0x99d0cd,_0x621866,-0x1),_0x3ed770[_0x497ac2(0x297)](_0x1a7b56);}if(_0x5ed666)_0x1e28d3[_0x497ac2(0x9ad)](_0x497ac2(0x31f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x573),_0x2a51b8=>{const _0x2a16ed=_0x9c6fcf;if(!SceneManager[_0x2a16ed(0x319)]())return;if(!$gameSystem[_0x2a16ed(0x95c)]())return;VisuMZ['ConvertParams'](_0x2a51b8,_0x2a51b8);const _0x4843d2=$gameTemp[_0x2a16ed(0x970)](),_0x2c2860=VisuMZ[_0x2a16ed(0x599)](_0x2a51b8[_0x2a16ed(0x708)]),_0x529b1d=_0x2a51b8[_0x2a16ed(0x84a)],_0x5ece10=_0x2a51b8[_0x2a16ed(0x1ab)],_0x393dab=_0x2a51b8[_0x2a16ed(0x30c)],_0x25b3fd=_0x2a51b8[_0x2a16ed(0x238)],_0x2348db=_0x2a51b8[_0x2a16ed(0x82b)],_0x387647=_0x2a51b8['FaceDirection'],_0xc16522=_0x2a51b8['EasingType'],_0x382a59=_0x2a51b8[_0x2a16ed(0x1cf)],_0xb2eec3=_0x2a51b8['WaitForMovement'];if(!_0x4843d2)return;for(const _0x3d92af of _0x2c2860){if(!_0x3d92af)continue;let _0x59b31e=_0x3d92af[_0x2a16ed(0x338)]()[_0x2a16ed(0x761)],_0x15f5b7=_0x3d92af[_0x2a16ed(0x338)]()['_baseY'];if(_0x529b1d[_0x2a16ed(0x3c6)](/home/i))_0x59b31e=_0x3d92af[_0x2a16ed(0x338)]()[_0x2a16ed(0x606)],_0x15f5b7=_0x3d92af[_0x2a16ed(0x338)]()[_0x2a16ed(0x17a)];else{if(_0x529b1d['match'](/center/i))_0x59b31e=Graphics[_0x2a16ed(0x671)]/0x2,_0x15f5b7=Graphics['boxHeight']/0x2;else _0x529b1d[_0x2a16ed(0x3c6)](/point (\d+), (\d+)/i)&&(_0x59b31e=Number(RegExp['$1']),_0x15f5b7=Number(RegExp['$2']));}if(_0x5ece10[_0x2a16ed(0x3c6)](/none/i))_0x59b31e+=_0x393dab,_0x15f5b7+=_0x25b3fd;else{if(_0x5ece10['match'](/horz/i)&&_0x5ece10[_0x2a16ed(0x3c6)](/vert/i))_0x59b31e+=_0x3d92af[_0x2a16ed(0x552)]()?-_0x393dab:_0x393dab,_0x15f5b7+=_0x3d92af['isActor']()?-_0x25b3fd:_0x25b3fd;else{if(_0x5ece10[_0x2a16ed(0x3c6)](/horz/i))_0x59b31e+=_0x3d92af['isActor']()?-_0x393dab:_0x393dab,_0x15f5b7+=_0x25b3fd;else _0x5ece10[_0x2a16ed(0x3c6)](/vert/i)&&(_0x59b31e+=_0x393dab,_0x15f5b7+=_0x3d92af['isActor']()?-_0x25b3fd:_0x25b3fd);}}_0x3d92af[_0x2a16ed(0x379)](_0x59b31e,_0x15f5b7,_0x2348db,_0x387647,_0xc16522,-0x1),_0x3d92af[_0x2a16ed(0x297)](_0x382a59);}if(_0xb2eec3)_0x4843d2[_0x2a16ed(0x9ad)](_0x2a16ed(0x31f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x998),_0x11ff16=>{const _0x1ad25b=_0x9c6fcf;if(!SceneManager[_0x1ad25b(0x319)]())return;if(!$gameSystem[_0x1ad25b(0x95c)]())return;VisuMZ['ConvertParams'](_0x11ff16,_0x11ff16);const _0x38dae5=$gameTemp[_0x1ad25b(0x970)](),_0x14f97d=VisuMZ['CreateActionSequenceTargets'](_0x11ff16[_0x1ad25b(0x34a)]),_0x351be4=VisuMZ[_0x1ad25b(0x599)](_0x11ff16['Targets2']),_0x43915d=_0x11ff16[_0x1ad25b(0xa37)];let _0x287459=_0x11ff16[_0x1ad25b(0x271)];const _0x3c6b79=_0x11ff16[_0x1ad25b(0x1ab)],_0x21da66=_0x11ff16[_0x1ad25b(0x30c)],_0xa6ccb3=_0x11ff16['OffsetY'],_0x22cbef=_0x11ff16['Duration'],_0x5dd032=_0x11ff16['FaceDirection'],_0x61071d=_0x11ff16[_0x1ad25b(0x25d)],_0x342949=_0x11ff16[_0x1ad25b(0x1cf)],_0x454283=_0x11ff16['WaitForMovement'],_0x39dae4=Math['min'](..._0x351be4[_0x1ad25b(0x1f9)](_0xd7a7fc=>_0xd7a7fc['battler']()[_0x1ad25b(0x761)]-_0xd7a7fc[_0x1ad25b(0x338)]()[_0x1ad25b(0x899)]()/0x2)),_0x6855a0=Math[_0x1ad25b(0x716)](..._0x351be4[_0x1ad25b(0x1f9)](_0x51ace6=>_0x51ace6['battler']()['_baseX']+_0x51ace6[_0x1ad25b(0x338)]()[_0x1ad25b(0x899)]()/0x2)),_0x5075f5=Math[_0x1ad25b(0x878)](..._0x351be4[_0x1ad25b(0x1f9)](_0x11aa59=>_0x11aa59[_0x1ad25b(0x338)]()[_0x1ad25b(0x46a)]-_0x11aa59[_0x1ad25b(0x338)]()[_0x1ad25b(0x3e7)]())),_0xd04f47=Math['max'](..._0x351be4[_0x1ad25b(0x1f9)](_0x22bb56=>_0x22bb56[_0x1ad25b(0x338)]()[_0x1ad25b(0x46a)])),_0x43c1dd=_0x351be4['filter'](_0x9b4b7f=>_0x9b4b7f[_0x1ad25b(0x552)]())['length'],_0x208965=_0x351be4[_0x1ad25b(0x4e3)](_0x2e106e=>_0x2e106e[_0x1ad25b(0x3fd)]())[_0x1ad25b(0x88e)];let _0x1d7f65=0x0,_0x38c359=0x0;if(_0x43915d[_0x1ad25b(0x3c6)](/front/i))_0x1d7f65=_0x43c1dd>=_0x208965?_0x39dae4:_0x6855a0;else{if(_0x43915d['match'](/middle/i))_0x1d7f65=(_0x39dae4+_0x6855a0)/0x2,_0x287459=-0x1;else _0x43915d[_0x1ad25b(0x3c6)](/back/i)&&(_0x1d7f65=_0x43c1dd>=_0x208965?_0x6855a0:_0x39dae4);}if(_0x43915d[_0x1ad25b(0x3c6)](/head/i))_0x38c359=_0x5075f5;else{if(_0x43915d[_0x1ad25b(0x3c6)](/center/i))_0x38c359=(_0x5075f5+_0xd04f47)/0x2;else _0x43915d['match'](/base/i)&&(_0x38c359=_0xd04f47);}if(!_0x38dae5)return;for(const _0x765893 of _0x14f97d){if(!_0x765893)continue;let _0x40209d=_0x1d7f65,_0x133c22=_0x38c359;if(_0x3c6b79[_0x1ad25b(0x3c6)](/none/i))_0x40209d+=_0x21da66,_0x133c22+=_0xa6ccb3;else{if(_0x3c6b79[_0x1ad25b(0x3c6)](/horz/i)&&_0x3c6b79[_0x1ad25b(0x3c6)](/vert/i))_0x40209d+=_0x765893[_0x1ad25b(0x552)]()?-_0x21da66:_0x21da66,_0x133c22+=_0x765893[_0x1ad25b(0x552)]()?-_0xa6ccb3:_0xa6ccb3;else{if(_0x3c6b79['match'](/horz/i))_0x40209d+=_0x765893['isActor']()?-_0x21da66:_0x21da66,_0x133c22+=_0xa6ccb3;else _0x3c6b79['match'](/vert/i)&&(_0x40209d+=_0x21da66,_0x133c22+=_0x765893[_0x1ad25b(0x552)]()?-_0xa6ccb3:_0xa6ccb3);}}_0x765893[_0x1ad25b(0x379)](_0x40209d,_0x133c22,_0x22cbef,_0x5dd032,_0x61071d,_0x287459),_0x765893[_0x1ad25b(0x297)](_0x342949);}if(_0x454283)_0x38dae5[_0x1ad25b(0x9ad)](_0x1ad25b(0x31f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Movement_FaceDirection',_0x387cb2=>{const _0xc56f9e=_0x9c6fcf;if(!SceneManager[_0xc56f9e(0x319)]())return;if(!$gameSystem[_0xc56f9e(0x95c)]())return;VisuMZ[_0xc56f9e(0x5e4)](_0x387cb2,_0x387cb2);const _0x185a0b=VisuMZ['CreateActionSequenceTargets'](_0x387cb2[_0xc56f9e(0x708)]);let _0x597671=_0x387cb2[_0xc56f9e(0xa55)][_0xc56f9e(0x3c6)](/back/i);for(const _0x42cc0d of _0x185a0b){if(!_0x42cc0d)continue;if(_0x387cb2[_0xc56f9e(0xa55)]['match'](/rand/i))_0x597671=Math['randomInt'](0x2);_0x42cc0d['setBattlerFlip'](!!_0x597671);}}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x48a),_0x7b7162=>{const _0x552d94=_0x9c6fcf;if(!SceneManager[_0x552d94(0x319)]())return;if(!$gameSystem[_0x552d94(0x95c)]())return;VisuMZ['ConvertParams'](_0x7b7162,_0x7b7162);const _0x58313f=VisuMZ['CreateActionSequenceTargets'](_0x7b7162[_0x552d94(0x708)]),_0x898d18=_0x7b7162[_0x552d94(0x50d)];for(const _0x4f2487 of _0x58313f){if(!_0x4f2487)continue;const _0x3a8bfa=_0x7b7162[_0x552d94(0x542)](_0x4f2487)||{'x':0x0,'y':0x0};let _0x18d7a9=_0x3a8bfa['x'],_0x470ab0=_0x3a8bfa['y'];_0x4f2487[_0x552d94(0x8a4)](Math[_0x552d94(0xb65)](_0x18d7a9),Math[_0x552d94(0xb65)](_0x470ab0),!!_0x898d18);}}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_Movement_FacePoint',_0x30e965=>{const _0xd213ae=_0x9c6fcf;if(!SceneManager[_0xd213ae(0x319)]())return;if(!$gameSystem[_0xd213ae(0x95c)]())return;VisuMZ[_0xd213ae(0x5e4)](_0x30e965,_0x30e965);const _0x4a7595=VisuMZ['CreateActionSequenceTargets'](_0x30e965[_0xd213ae(0x708)]);let _0x52c3d2=_0x30e965[_0xd213ae(0x717)];const _0x4cedcf=_0x30e965[_0xd213ae(0x50d)];for(const _0xadcb5b of _0x4a7595){if(!_0xadcb5b)continue;let _0x17623c=_0xadcb5b[_0xd213ae(0x338)]()[_0xd213ae(0x761)],_0x569b50=_0xadcb5b[_0xd213ae(0x338)]()[_0xd213ae(0x46a)];if(_0x52c3d2['match'](/home/i))_0x17623c=_0xadcb5b[_0xd213ae(0x338)]()[_0xd213ae(0x606)],_0x569b50=_0xadcb5b[_0xd213ae(0x338)]()[_0xd213ae(0x17a)];else{if(_0x52c3d2[_0xd213ae(0x3c6)](/center/i))_0x17623c=Graphics[_0xd213ae(0x671)]/0x2,_0x569b50=Graphics[_0xd213ae(0x5bb)]/0x2;else _0x52c3d2[_0xd213ae(0x3c6)](/point (\d+), (\d+)/i)&&(_0x17623c=Number(RegExp['$1']),_0x569b50=Number(RegExp['$2']));}_0xadcb5b[_0xd213ae(0x8a4)](Math[_0xd213ae(0xb65)](_0x17623c),Math[_0xd213ae(0xb65)](_0x569b50),!!_0x4cedcf);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xb4b),_0x5b1d3d=>{const _0xe81f36=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0xe81f36(0x95c)]())return;VisuMZ['ConvertParams'](_0x5b1d3d,_0x5b1d3d);const _0x3bdbe1=VisuMZ[_0xe81f36(0x599)](_0x5b1d3d[_0xe81f36(0x34a)]),_0x549948=VisuMZ[_0xe81f36(0x599)](_0x5b1d3d[_0xe81f36(0x9e0)]),_0x15a338=_0x549948[_0xe81f36(0x1f9)](_0x531b79=>_0x531b79&&_0x531b79[_0xe81f36(0x338)]()?_0x531b79[_0xe81f36(0x338)]()[_0xe81f36(0x761)]:0x0)/(_0x549948[_0xe81f36(0x88e)]||0x1),_0x423e48=_0x549948[_0xe81f36(0x1f9)](_0xea42e2=>_0xea42e2&&_0xea42e2[_0xe81f36(0x338)]()?_0xea42e2[_0xe81f36(0x338)]()[_0xe81f36(0x46a)]:0x0)/(_0x549948[_0xe81f36(0x88e)]||0x1),_0x452482=_0x5b1d3d[_0xe81f36(0x50d)];for(const _0x3b1b8a of _0x3bdbe1){if(!_0x3b1b8a)continue;_0x3b1b8a['setBattlerFacePoint'](Math[_0xe81f36(0xb65)](_0x15a338),Math['round'](_0x423e48),!!_0x452482);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x1e5),_0x1fc7cb=>{const _0x3de2a0=_0x9c6fcf;if(!SceneManager[_0x3de2a0(0x319)]())return;VisuMZ[_0x3de2a0(0x5e4)](_0x1fc7cb,_0x1fc7cb);const _0x184058=$gameTemp[_0x3de2a0(0x970)](),_0x1b3445=VisuMZ[_0x3de2a0(0x599)](_0x1fc7cb[_0x3de2a0(0x708)]),_0x2f3845=_0x1fc7cb[_0x3de2a0(0x699)],_0x2624be=_0x1fc7cb[_0x3de2a0(0x82b)],_0x47ce54=_0x1fc7cb[_0x3de2a0(0x25d)],_0x5af7b1=_0x1fc7cb['WaitForFloat'];if(!_0x184058)return;for(const _0x276217 of _0x1b3445){if(!_0x276217)continue;_0x276217[_0x3de2a0(0x7cb)](_0x2f3845,_0x2624be,_0x47ce54);}if(_0x5af7b1)_0x184058[_0x3de2a0(0x9ad)]('battleFloat');}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Movement_HomeReset',_0x4762f7=>{const _0x5c9acc=_0x9c6fcf;if(!SceneManager[_0x5c9acc(0x319)]())return;VisuMZ[_0x5c9acc(0x5e4)](_0x4762f7,_0x4762f7);const _0x453340=$gameTemp[_0x5c9acc(0x970)]();if(!_0x453340)return;const _0x2ee233=VisuMZ[_0x5c9acc(0x599)](_0x4762f7[_0x5c9acc(0x708)]);for(const _0x47551a of _0x2ee233){if(!_0x47551a)continue;_0x47551a[_0x5c9acc(0xb45)]();}BattleManager['_subject']&&BattleManager['_subject'][_0x5c9acc(0xaa8)]();if(_0x4762f7[_0x5c9acc(0x6d8)])_0x453340[_0x5c9acc(0x9ad)](_0x5c9acc(0x31f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x3cf),_0x29cf57=>{const _0x25d2d7=_0x9c6fcf;if(!SceneManager[_0x25d2d7(0x319)]())return;VisuMZ[_0x25d2d7(0x5e4)](_0x29cf57,_0x29cf57);const _0x380c93=$gameTemp[_0x25d2d7(0x970)](),_0x17394d=VisuMZ[_0x25d2d7(0x599)](_0x29cf57[_0x25d2d7(0x708)]),_0x9c96ca=_0x29cf57[_0x25d2d7(0x699)],_0x22642e=_0x29cf57['Duration'],_0x113c57=_0x29cf57[_0x25d2d7(0x916)];if(!_0x380c93)return;for(const _0x2edd47 of _0x17394d){if(!_0x2edd47)continue;_0x2edd47['jumpBattler'](_0x9c96ca,_0x22642e);}if(_0x113c57)_0x380c93[_0x25d2d7(0x9ad)]('battleJump');}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x7c9),_0x372c23=>{const _0x46c855=_0x9c6fcf;if(!SceneManager[_0x46c855(0x319)]())return;if(!$gameSystem[_0x46c855(0x95c)]())return;VisuMZ[_0x46c855(0x5e4)](_0x372c23,_0x372c23);const _0x210e92=$gameTemp[_0x46c855(0x970)](),_0x18db61=VisuMZ[_0x46c855(0x599)](_0x372c23[_0x46c855(0x708)]),_0x2f6525=_0x372c23[_0x46c855(0xb35)],_0x19b828=_0x372c23[_0x46c855(0x971)],_0x5635f7=_0x372c23[_0x46c855(0x73a)],_0x1cd4c0=_0x372c23['Duration'],_0x5892a4=_0x372c23[_0x46c855(0x1b8)],_0x4255b8=_0x372c23['EasingType'],_0x4e136c=_0x372c23[_0x46c855(0x1cf)],_0x2b28ad=_0x372c23[_0x46c855(0x6d8)];if(!_0x210e92)return;for(const _0x2b9e8e of _0x18db61){if(!_0x2b9e8e)continue;let _0x305c73=_0x19b828,_0x9a7fba=_0x5635f7;if(_0x2f6525[_0x46c855(0x3c6)](/horz/i))_0x305c73*=_0x2b9e8e[_0x46c855(0x552)]()?-0x1:0x1;if(_0x2f6525[_0x46c855(0x3c6)](/vert/i))_0x9a7fba*=_0x2b9e8e[_0x46c855(0x552)]()?-0x1:0x1;_0x2b9e8e[_0x46c855(0x994)](_0x305c73,_0x9a7fba,_0x1cd4c0,_0x5892a4,_0x4255b8),_0x2b9e8e[_0x46c855(0x297)](_0x4e136c);}if(_0x2b28ad)_0x210e92[_0x46c855(0x9ad)](_0x46c855(0x31f));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x90b),_0xb7476f=>{const _0x5a3d81=_0x9c6fcf;if(!SceneManager[_0x5a3d81(0x319)]())return;if(!$gameSystem[_0x5a3d81(0x95c)]())return;VisuMZ[_0x5a3d81(0x5e4)](_0xb7476f,_0xb7476f);const _0xbfe8dc=$gameTemp[_0x5a3d81(0x970)](),_0x9ff509=VisuMZ[_0x5a3d81(0x599)](_0xb7476f[_0x5a3d81(0x708)]),_0x5dc2f5=_0xb7476f['OffsetAdjust'],_0x49b5b3=_0xb7476f[_0x5a3d81(0x30c)],_0x471225=_0xb7476f['OffsetY'],_0x8c2720=_0xb7476f[_0x5a3d81(0x82b)],_0x4e29a7=_0xb7476f[_0x5a3d81(0x1b8)],_0x242e5f=_0xb7476f[_0x5a3d81(0x25d)],_0x23bb00=_0xb7476f[_0x5a3d81(0x1cf)],_0x4e326d=_0xb7476f[_0x5a3d81(0x6d8)];if(!_0xbfe8dc)return;for(const _0x396e0e of _0x9ff509){if(!_0x396e0e)continue;const _0x1996e9=_0xb7476f['DestinationJS'](_0x396e0e)||{'x':0x0,'y':0x0};let _0x57e515=_0x1996e9['x'],_0x49a6a8=_0x1996e9['y'];if(_0x5dc2f5[_0x5a3d81(0x3c6)](/none/i))_0x57e515+=_0x49b5b3,_0x49a6a8+=_0x471225;else{if(_0x5dc2f5[_0x5a3d81(0x3c6)](/horz/i)&&_0x5dc2f5[_0x5a3d81(0x3c6)](/vert/i))_0x57e515+=_0x396e0e[_0x5a3d81(0x552)]()?-_0x49b5b3:_0x49b5b3,_0x49a6a8+=_0x396e0e[_0x5a3d81(0x552)]()?-_0x471225:_0x471225;else{if(_0x5dc2f5['match'](/horz/i))_0x57e515+=_0x396e0e[_0x5a3d81(0x552)]()?-_0x49b5b3:_0x49b5b3,_0x49a6a8+=_0x471225;else _0x5dc2f5[_0x5a3d81(0x3c6)](/vert/i)&&(_0x57e515+=_0x49b5b3,_0x49a6a8+=_0x396e0e[_0x5a3d81(0x552)]()?-_0x471225:_0x471225);}}_0x396e0e['moveBattlerToPoint'](_0x57e515,_0x49a6a8,_0x8c2720,_0x4e29a7,_0x242e5f,-0x1),_0x396e0e['requestMotion'](_0x23bb00);}if(_0x4e326d)_0xbfe8dc[_0x5a3d81(0x9ad)](_0x5a3d81(0x31f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],'ActSeq_Movement_MoveToPoint',_0x5f2f79=>{const _0x1f54e6=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1f54e6(0x5e4)](_0x5f2f79,_0x5f2f79);const _0x44f62d=$gameTemp[_0x1f54e6(0x970)](),_0x745245=VisuMZ[_0x1f54e6(0x599)](_0x5f2f79[_0x1f54e6(0x708)]),_0xe10704=_0x5f2f79[_0x1f54e6(0x84a)],_0xc0e218=_0x5f2f79[_0x1f54e6(0x1ab)],_0x28e48d=_0x5f2f79[_0x1f54e6(0x30c)],_0x24443b=_0x5f2f79[_0x1f54e6(0x238)],_0x37eeb7=_0x5f2f79[_0x1f54e6(0x82b)],_0x1377d6=_0x5f2f79[_0x1f54e6(0x1b8)],_0x105757=_0x5f2f79[_0x1f54e6(0x25d)],_0x383090=_0x5f2f79['MotionType'],_0x2bf0ce=_0x5f2f79['WaitForMovement'];if(!_0x44f62d)return;for(const _0x3c2110 of _0x745245){if(!_0x3c2110)continue;let _0x62b237=_0x3c2110[_0x1f54e6(0x338)]()[_0x1f54e6(0x761)],_0x3bd68b=_0x3c2110[_0x1f54e6(0x338)]()[_0x1f54e6(0x46a)];if(_0xe10704[_0x1f54e6(0x3c6)](/home/i))_0x62b237=_0x3c2110[_0x1f54e6(0x338)]()['_homeX'],_0x3bd68b=_0x3c2110['battler']()['_homeY'];else{if(_0xe10704['match'](/center/i))_0x62b237=Graphics[_0x1f54e6(0x671)]/0x2,_0x3bd68b=Graphics['boxHeight']/0x2;else _0xe10704['match'](/point (\d+), (\d+)/i)&&(_0x62b237=Number(RegExp['$1']),_0x3bd68b=Number(RegExp['$2']));}if(_0xc0e218[_0x1f54e6(0x3c6)](/none/i))_0x62b237+=_0x28e48d,_0x3bd68b+=_0x24443b;else{if(_0xc0e218[_0x1f54e6(0x3c6)](/horz/i)&&_0xc0e218[_0x1f54e6(0x3c6)](/vert/i))_0x62b237+=_0x3c2110[_0x1f54e6(0x552)]()?-_0x28e48d:_0x28e48d,_0x3bd68b+=_0x3c2110[_0x1f54e6(0x552)]()?-_0x24443b:_0x24443b;else{if(_0xc0e218[_0x1f54e6(0x3c6)](/horz/i))_0x62b237+=_0x3c2110['isActor']()?-_0x28e48d:_0x28e48d,_0x3bd68b+=_0x24443b;else _0xc0e218['match'](/vert/i)&&(_0x62b237+=_0x28e48d,_0x3bd68b+=_0x3c2110[_0x1f54e6(0x552)]()?-_0x24443b:_0x24443b);}}_0x3c2110[_0x1f54e6(0x4af)](_0x62b237,_0x3bd68b,_0x37eeb7,_0x1377d6,_0x105757,-0x1),_0x3c2110['requestMotion'](_0x383090);}if(_0x2bf0ce)_0x44f62d['setWaitMode'](_0x1f54e6(0x31f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x721),_0x409570=>{const _0x50e264=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x50e264(0x5e4)](_0x409570,_0x409570);const _0x4303d4=$gameTemp[_0x50e264(0x970)](),_0x434980=VisuMZ[_0x50e264(0x599)](_0x409570['Targets1']),_0x51a39f=VisuMZ[_0x50e264(0x599)](_0x409570['Targets2']),_0x2fab9f=_0x409570[_0x50e264(0xa37)];let _0x2f0071=_0x409570[_0x50e264(0x271)];const _0x234d46=_0x409570[_0x50e264(0x1ab)],_0x7e9a24=_0x409570[_0x50e264(0x30c)],_0x55dec3=_0x409570[_0x50e264(0x238)],_0x537870=_0x409570[_0x50e264(0x82b)],_0x3ab31f=_0x409570[_0x50e264(0x1b8)],_0x29e4e1=_0x409570[_0x50e264(0x25d)],_0x18e8ef=_0x409570[_0x50e264(0x1cf)],_0x1bb9e9=_0x409570['WaitForMovement'],_0x215306=Math[_0x50e264(0x878)](..._0x51a39f[_0x50e264(0x1f9)](_0xdf130c=>_0xdf130c[_0x50e264(0x338)]()[_0x50e264(0x761)]-_0xdf130c[_0x50e264(0x338)]()[_0x50e264(0x899)]()/0x2)),_0x963d0e=Math[_0x50e264(0x716)](..._0x51a39f['map'](_0x3b6e45=>_0x3b6e45[_0x50e264(0x338)]()[_0x50e264(0x761)]+_0x3b6e45[_0x50e264(0x338)]()['mainSpriteWidth']()/0x2)),_0x4d20d6=Math[_0x50e264(0x878)](..._0x51a39f[_0x50e264(0x1f9)](_0x322c45=>_0x322c45[_0x50e264(0x338)]()[_0x50e264(0x46a)]-_0x322c45[_0x50e264(0x338)]()[_0x50e264(0x3e7)]())),_0x687bc1=Math[_0x50e264(0x716)](..._0x51a39f[_0x50e264(0x1f9)](_0x331234=>_0x331234['battler']()[_0x50e264(0x46a)])),_0x52c983=_0x51a39f[_0x50e264(0x4e3)](_0x2bbc2c=>_0x2bbc2c['isActor']())[_0x50e264(0x88e)],_0x41324a=_0x51a39f[_0x50e264(0x4e3)](_0x570a44=>_0x570a44[_0x50e264(0x3fd)]())['length'];let _0x1f0e55=0x0,_0x6caeef=0x0;if(_0x2fab9f['match'](/front/i))_0x1f0e55=_0x52c983>=_0x41324a?_0x215306:_0x963d0e;else{if(_0x2fab9f[_0x50e264(0x3c6)](/middle/i))_0x1f0e55=(_0x215306+_0x963d0e)/0x2,_0x2f0071=-0x1;else _0x2fab9f[_0x50e264(0x3c6)](/back/i)&&(_0x1f0e55=_0x52c983>=_0x41324a?_0x963d0e:_0x215306);}if(_0x2fab9f[_0x50e264(0x3c6)](/head/i))_0x6caeef=_0x4d20d6;else{if(_0x2fab9f['match'](/center/i))_0x6caeef=(_0x4d20d6+_0x687bc1)/0x2;else _0x2fab9f['match'](/base/i)&&(_0x6caeef=_0x687bc1);}if(!_0x4303d4)return;for(const _0x42747e of _0x434980){if(!_0x42747e)continue;let _0x5c7c79=_0x1f0e55,_0x273d31=_0x6caeef;if(_0x234d46[_0x50e264(0x3c6)](/none/i))_0x5c7c79+=_0x7e9a24,_0x273d31+=_0x55dec3;else{if(_0x234d46[_0x50e264(0x3c6)](/horz/i)&&_0x234d46['match'](/vert/i))_0x5c7c79+=_0x42747e[_0x50e264(0x552)]()?-_0x7e9a24:_0x7e9a24,_0x273d31+=_0x42747e['isActor']()?-_0x55dec3:_0x55dec3;else{if(_0x234d46[_0x50e264(0x3c6)](/horz/i))_0x5c7c79+=_0x42747e[_0x50e264(0x552)]()?-_0x7e9a24:_0x7e9a24,_0x273d31+=_0x55dec3;else _0x234d46[_0x50e264(0x3c6)](/vert/i)&&(_0x5c7c79+=_0x7e9a24,_0x273d31+=_0x42747e['isActor']()?-_0x55dec3:_0x55dec3);}}_0x42747e[_0x50e264(0x4af)](_0x5c7c79,_0x273d31,_0x537870,_0x3ab31f,_0x29e4e1,_0x2f0071),_0x42747e[_0x50e264(0x297)](_0x18e8ef);}if(_0x1bb9e9)_0x4303d4[_0x50e264(0x9ad)](_0x50e264(0x31f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Movement_Opacity',_0xaa7dc2=>{const _0x311d2c=_0x9c6fcf;if(!SceneManager[_0x311d2c(0x319)]())return;VisuMZ[_0x311d2c(0x5e4)](_0xaa7dc2,_0xaa7dc2);const _0x1f08bf=$gameTemp[_0x311d2c(0x970)](),_0x518457=VisuMZ[_0x311d2c(0x599)](_0xaa7dc2[_0x311d2c(0x708)]),_0x5618a3=_0xaa7dc2['Opacity'],_0x5e9f7e=_0xaa7dc2[_0x311d2c(0x82b)],_0x2d7cb0=_0xaa7dc2[_0x311d2c(0x25d)],_0x261c7c=_0xaa7dc2[_0x311d2c(0xb40)];if(!_0x1f08bf)return;for(const _0xb4947b of _0x518457){if(!_0xb4947b)continue;_0xb4947b[_0x311d2c(0x725)](_0x5618a3,_0x5e9f7e,_0x2d7cb0);}if(_0x261c7c)_0x1f08bf[_0x311d2c(0x9ad)](_0x311d2c(0x1e3));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Movement_Scale',_0x3ecf7e=>{const _0x50a27f=_0x9c6fcf;if(!SceneManager[_0x50a27f(0x319)]())return;VisuMZ[_0x50a27f(0x5e4)](_0x3ecf7e,_0x3ecf7e);const _0x1576d1=$gameTemp['getLastPluginCommandInterpreter'](),_0x4c1da1=VisuMZ[_0x50a27f(0x599)](_0x3ecf7e[_0x50a27f(0x708)]),_0x3ccda1=_0x3ecf7e[_0x50a27f(0xb52)],_0x5d26bc=_0x3ecf7e[_0x50a27f(0x9e5)],_0x150e5f=_0x3ecf7e[_0x50a27f(0x82b)],_0x306531=_0x3ecf7e['EasingType'],_0x12aa7d=_0x3ecf7e[_0x50a27f(0x97f)];if(!_0x1576d1)return;for(const _0x32ae3f of _0x4c1da1){if(!_0x32ae3f)continue;_0x32ae3f[_0x50a27f(0x357)](_0x3ccda1,_0x5d26bc,_0x150e5f,_0x306531);}if(_0x12aa7d)_0x1576d1['setWaitMode']('battleGrow');}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x160),_0x35b6b0=>{const _0x38b0fd=_0x9c6fcf;if(!SceneManager[_0x38b0fd(0x319)]())return;VisuMZ[_0x38b0fd(0x5e4)](_0x35b6b0,_0x35b6b0);const _0x44c0cd=$gameTemp[_0x38b0fd(0x970)](),_0x5051a2=VisuMZ[_0x38b0fd(0x599)](_0x35b6b0[_0x38b0fd(0x708)]),_0x3fcf5c=_0x35b6b0[_0x38b0fd(0x1c3)],_0x5500dd=_0x35b6b0[_0x38b0fd(0x1a8)],_0xbd93db=_0x35b6b0[_0x38b0fd(0x82b)],_0x3ddae8=_0x35b6b0['EasingType'],_0x41956d=_0x35b6b0[_0x38b0fd(0x253)];if(!_0x44c0cd)return;for(const _0x21212c of _0x5051a2){if(!_0x21212c)continue;_0x21212c[_0x38b0fd(0x501)](_0x3fcf5c,_0x5500dd,_0xbd93db,_0x3ddae8);}if(_0x41956d)_0x44c0cd[_0x38b0fd(0x9ad)](_0x38b0fd(0xa2f));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x4e7),_0x4a00ef=>{const _0x6c2402=_0x9c6fcf;if(!SceneManager[_0x6c2402(0x319)]())return;VisuMZ[_0x6c2402(0x5e4)](_0x4a00ef,_0x4a00ef);const _0x40881c=$gameTemp[_0x6c2402(0x970)](),_0x31d6ae=VisuMZ['CreateActionSequenceTargets'](_0x4a00ef['Targets']),_0x2ae156=_0x4a00ef[_0x6c2402(0xab5)],_0x27d59b=_0x4a00ef[_0x6c2402(0x82b)],_0xf395fb=_0x4a00ef[_0x6c2402(0x25d)],_0x2c3b24=_0x4a00ef[_0x6c2402(0x806)],_0x5b9fdb=_0x4a00ef[_0x6c2402(0xa3b)];if(!_0x40881c)return;for(const _0x148336 of _0x31d6ae){if(!_0x148336)continue;_0x148336['spinBattler'](_0x2ae156,_0x27d59b,_0xf395fb,_0x2c3b24);}if(_0x5b9fdb)_0x40881c[_0x6c2402(0x9ad)](_0x6c2402(0x951));}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],'ActSeq_Movement_WaitForFloat',_0x51625f=>{const _0x328f55=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;const _0x354e43=$gameTemp[_0x328f55(0x970)]();if(!_0x354e43)return;_0x354e43[_0x328f55(0x9ad)](_0x328f55(0x24e));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Movement_WaitForJump',_0x59195e=>{const _0x61d0e6=_0x9c6fcf;if(!SceneManager[_0x61d0e6(0x319)]())return;const _0x436f32=$gameTemp[_0x61d0e6(0x970)]();if(!_0x436f32)return;_0x436f32[_0x61d0e6(0x9ad)](_0x61d0e6(0x208));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0xa3c),_0x2dc94a=>{const _0x9c7f75=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;const _0x4d4ef0=$gameTemp[_0x9c7f75(0x970)]();if(!_0x4d4ef0)return;_0x4d4ef0['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x1ee),_0x496c79=>{const _0x3fc59c=_0x9c6fcf;if(!SceneManager[_0x3fc59c(0x319)]())return;const _0x2e93a3=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2e93a3)return;_0x2e93a3[_0x3fc59c(0x9ad)](_0x3fc59c(0x1e3));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x415),_0x45e580=>{const _0x205c49=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;const _0xf8ba52=$gameTemp[_0x205c49(0x970)]();if(!_0xf8ba52)return;_0xf8ba52[_0x205c49(0x9ad)](_0x205c49(0xa01));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x973),_0x450992=>{const _0xa67eb6=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;const _0x3b0a36=$gameTemp[_0xa67eb6(0x970)]();if(!_0x3b0a36)return;_0x3b0a36[_0xa67eb6(0x9ad)]('battleSpriteSkew');}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x897),_0x197fb8=>{const _0x5419ff=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;const _0x2457f2=$gameTemp[_0x5419ff(0x970)]();if(!_0x2457f2)return;_0x2457f2[_0x5419ff(0x9ad)](_0x5419ff(0x951));}),VisuMZ['BattleCore'][_0x9c6fcf(0x268)]=function(){const _0x97f723=_0x9c6fcf;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;if(VisuMZ[_0x97f723(0x8c3)][_0x97f723(0x14c)]<1.08){let _0x2bf1b6='';_0x2bf1b6+=_0x97f723(0xa7b),_0x2bf1b6+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x2bf1b6),SceneManager[_0x97f723(0x2ee)]();}},PluginManager['registerCommand'](pluginData['name'],_0x9c6fcf(0x1a0),_0x11c0a2=>{const _0x2d429d=_0x9c6fcf;if(!SceneManager[_0x2d429d(0x319)]())return;if(!Imported[_0x2d429d(0x6e2)])return;VisuMZ[_0x2d429d(0x5e4)](_0x11c0a2,_0x11c0a2),VisuMZ[_0x2d429d(0x8f5)][_0x2d429d(0x268)]();const _0x4f13c6=$gameTemp[_0x2d429d(0x970)](),_0x321a5a=_0x11c0a2[_0x2d429d(0xaf0)];if(!_0x4f13c6)return;const _0x1535ab=BattleManager[_0x2d429d(0x21f)];if(!_0x1535ab)return;_0x1535ab['createActionSequenceProjectile'](_0x11c0a2);if(_0x321a5a)_0x4f13c6[_0x2d429d(0x9ad)]('battleProjectiles');}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Projectile_Icon',_0x339373=>{const _0x2e3f24=_0x9c6fcf;if(!SceneManager[_0x2e3f24(0x319)]())return;if(!Imported[_0x2e3f24(0x6e2)])return;VisuMZ['ConvertParams'](_0x339373,_0x339373),VisuMZ[_0x2e3f24(0x8f5)][_0x2e3f24(0x268)]();const _0x561491=$gameTemp[_0x2e3f24(0x970)](),_0x5c4011=_0x339373[_0x2e3f24(0xaf0)];if(!_0x561491)return;const _0x54e8e8=BattleManager[_0x2e3f24(0x21f)];if(!_0x54e8e8)return;_0x54e8e8[_0x2e3f24(0x9db)](_0x339373);if(_0x5c4011)_0x561491['setWaitMode'](_0x2e3f24(0x26e));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Projectile_Picture',_0x169b95=>{const _0x2b7388=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2b7388(0x6e2)])return;VisuMZ[_0x2b7388(0x5e4)](_0x169b95,_0x169b95),VisuMZ[_0x2b7388(0x8f5)][_0x2b7388(0x268)]();const _0x12197d=$gameTemp[_0x2b7388(0x970)](),_0x339c37=_0x169b95[_0x2b7388(0xaf0)];if(!_0x12197d)return;const _0x3b2b32=BattleManager['_spriteset'];if(!_0x3b2b32)return;_0x3b2b32[_0x2b7388(0x9db)](_0x169b95);if(_0x339c37)_0x12197d['setWaitMode']('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x120),_0x5d23cd=>{const _0x2a93ad=_0x9c6fcf;if(!SceneManager[_0x2a93ad(0x319)]())return;if(!Imported[_0x2a93ad(0x87b)])return;VisuMZ[_0x2a93ad(0x5e4)](_0x5d23cd,_0x5d23cd);const _0x18d351=$gameTemp['getLastPluginCommandInterpreter'](),_0x5bbb73=_0x5d23cd['WaitForSkew'];if(!_0x18d351)return;$gameScreen[_0x2a93ad(0x362)](_0x5d23cd['SkewX'],_0x5d23cd[_0x2a93ad(0x1a8)],_0x5d23cd['Duration'],_0x5d23cd[_0x2a93ad(0x25d)]);if(_0x5bbb73)_0x18d351[_0x2a93ad(0x9ad)](_0x2a93ad(0x773));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x57f),_0x2a657f=>{const _0x4745ff=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4745ff(0x5e4)](_0x2a657f,_0x2a657f);const _0x4293b9=$gameTemp['getLastPluginCommandInterpreter'](),_0x2e8c19=_0x2a657f[_0x4745ff(0x253)];if(!_0x4293b9)return;$gameScreen[_0x4745ff(0x362)](0x0,0x0,_0x2a657f[_0x4745ff(0x82b)],_0x2a657f[_0x4745ff(0x25d)]);if(_0x2e8c19)_0x4293b9[_0x4745ff(0x9ad)]('battleSkew');}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x9c6),_0x1896cc=>{const _0x12cf3a=_0x9c6fcf;if(!SceneManager[_0x12cf3a(0x319)]())return;if(!Imported[_0x12cf3a(0x87b)])return;const _0x5d6c61=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5d6c61)return;_0x5d6c61[_0x12cf3a(0x9ad)](_0x12cf3a(0x773));}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x9a7),_0x17de2e=>{const _0x41834d=_0x9c6fcf;if(!SceneManager[_0x41834d(0x319)]())return;VisuMZ[_0x41834d(0x5e4)](_0x17de2e,_0x17de2e);const _0x44190e=$gameTemp[_0x41834d(0x970)](),_0x3c5fb2=_0x17de2e[_0x41834d(0x9f1)],_0x566f8c=_0x17de2e[_0x41834d(0xada)];if(!_0x44190e)return;BattleManager[_0x41834d(0x3c4)]=_0x3c5fb2,BattleManager[_0x41834d(0xaee)]=BattleManager[_0x41834d(0x14e)]?BattleManager[_0x41834d(0x14e)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x41834d(0xaee)]&&_0x566f8c[_0x41834d(0x5ed)]()[_0x41834d(0x4a5)]()!==_0x41834d(0x53d)&&_0x44190e[_0x41834d(0x2da)]([_0x566f8c]);}),PluginManager['registerCommand'](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x98f),_0x1b91bf=>{const _0x55f54a=_0x9c6fcf;if(!SceneManager[_0x55f54a(0x319)]())return;VisuMZ[_0x55f54a(0x5e4)](_0x1b91bf,_0x1b91bf);const _0x4b86a1=$gameTemp[_0x55f54a(0x970)](),_0x4666c4=_0x1b91bf[_0x55f54a(0xada)];if(!_0x4b86a1)return;BattleManager['_targetIndex']++,BattleManager[_0x55f54a(0xaee)]=BattleManager[_0x55f54a(0x14e)][BattleManager[_0x55f54a(0x3c4)]]||null,BattleManager[_0x55f54a(0xaee)]&&_0x4666c4['toUpperCase']()[_0x55f54a(0x4a5)]()!==_0x55f54a(0x53d)&&_0x4b86a1[_0x55f54a(0x2da)]([_0x4666c4]);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_Target_PrevTarget',_0x316c22=>{const _0x87c51a=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x87c51a(0x5e4)](_0x316c22,_0x316c22);const _0x1ba2de=$gameTemp[_0x87c51a(0x970)](),_0xd91aea=_0x316c22['JumpToLabel'];if(!_0x1ba2de)return;BattleManager[_0x87c51a(0x3c4)]--,BattleManager[_0x87c51a(0xaee)]=BattleManager[_0x87c51a(0x14e)][BattleManager['_targetIndex']]||null,BattleManager[_0x87c51a(0xaee)]&&_0xd91aea[_0x87c51a(0x5ed)]()[_0x87c51a(0x4a5)]()!==_0x87c51a(0x53d)&&_0x1ba2de['command119']([_0xd91aea]);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x5e7),_0x13254d=>{const _0x439ace=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x439ace(0x5e4)](_0x13254d,_0x13254d);const _0x3f089f=$gameTemp[_0x439ace(0x970)](),_0x5351fa=_0x13254d[_0x439ace(0x381)],_0x70d7b1=_0x13254d[_0x439ace(0xada)];if(!_0x3f089f)return;const _0x9a6820=BattleManager['_targetIndex'];for(;;){BattleManager[_0x439ace(0x3c4)]=Math[_0x439ace(0x316)](BattleManager[_0x439ace(0x14e)][_0x439ace(0x88e)]);if(!_0x5351fa)break;if(BattleManager[_0x439ace(0x3c4)]!==_0x9a6820)break;if(BattleManager[_0x439ace(0x14e)][_0x439ace(0x88e)]<=0x1){BattleManager[_0x439ace(0x3c4)]=0x0;break;}}BattleManager[_0x439ace(0xaee)]=BattleManager[_0x439ace(0x14e)][BattleManager[_0x439ace(0x3c4)]]||null,BattleManager[_0x439ace(0xaee)]&&_0x70d7b1[_0x439ace(0x5ed)]()['trim']()!==_0x439ace(0x53d)&&_0x3f089f[_0x439ace(0x2da)]([_0x70d7b1]);}),PluginManager[_0x9c6fcf(0xaab)](pluginData['name'],_0x9c6fcf(0x677),_0x441e0c=>{const _0x26a133=_0x9c6fcf;if(!SceneManager[_0x26a133(0x319)]())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager[_0x26a133(0x510)])return;VisuMZ[_0x26a133(0x5e4)](_0x441e0c,_0x441e0c);const _0xf27bf0=VisuMZ[_0x26a133(0x599)](_0x441e0c[_0x26a133(0x708)]);let _0x3d2d41=_0x441e0c[_0x26a133(0xa45)]||'';for(const _0x582069 of _0xf27bf0){if(!_0x582069)continue;_0x582069['playBattleVoice'](_0x3d2d41);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],'ActSeq_BattleVoice_PlaySpecialLine',_0x24d755=>{const _0x140475=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x140475(0x12e)])return;if(!ConfigManager[_0x140475(0x510)])return;VisuMZ[_0x140475(0x5e4)](_0x24d755,_0x24d755);const _0x334728=VisuMZ['CreateActionSequenceTargets'](_0x24d755['Targets']);let _0x3cd87f=(_0x24d755['VoiceLineType']||'')+(_0x24d755[_0x140475(0x551)]||'');for(const _0x427593 of _0x334728){if(!_0x427593)continue;_0x427593[_0x140475(0x6cd)](_0x3cd87f);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x54c),_0x383b15=>{const _0x4613aa=_0x9c6fcf;if(!SceneManager[_0x4613aa(0x319)]())return;VisuMZ[_0x4613aa(0x5e4)](_0x383b15,_0x383b15);const _0x5c9332=VisuMZ[_0x4613aa(0x599)](_0x383b15[_0x4613aa(0x708)]);for(const _0x475cc7 of _0x5c9332){if(!_0x475cc7)continue;if(!_0x475cc7[_0x4613aa(0x552)]())continue;_0x475cc7[_0x4613aa(0x659)]();}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x2bf),_0x2252b9=>{const _0x9b1619=_0x9c6fcf;if(!SceneManager[_0x9b1619(0x319)]())return;VisuMZ[_0x9b1619(0x5e4)](_0x2252b9,_0x2252b9);const _0x24835e=$gameTemp[_0x9b1619(0x970)]();let _0x1c8325=![];const _0x1944c7=_0x2252b9[_0x9b1619(0xada)],_0x59271d=VisuMZ[_0x9b1619(0x599)](_0x2252b9[_0x9b1619(0x708)]);for(const _0x49c160 of _0x59271d){if(!_0x49c160)continue;if(!_0x49c160[_0x9b1619(0x552)]())continue;_0x49c160[_0x9b1619(0x6b5)](),_0x49c160[_0x9b1619(0x26b)]()['length']>0x0?_0x1c8325=!![]:_0x49c160[_0x9b1619(0x659)]();}_0x1c8325&&_0x1944c7['toUpperCase']()[_0x9b1619(0x4a5)]()!==_0x9b1619(0x53d)&&_0x24835e[_0x9b1619(0x2da)]([_0x1944c7]);}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x40f),_0x850e3e=>{const _0x3badb4=_0x9c6fcf;if(!SceneManager[_0x3badb4(0x319)]())return;VisuMZ[_0x3badb4(0x5e4)](_0x850e3e,_0x850e3e);let _0x5260bd=_0x850e3e['SlotID'];_0x5260bd--,_0x5260bd=Math[_0x3badb4(0x716)](_0x5260bd,0x0);const _0xb4e7de=VisuMZ[_0x3badb4(0x599)](_0x850e3e['Targets']);for(const _0x5e6ed3 of _0xb4e7de){if(!_0x5e6ed3)continue;if(!_0x5e6ed3[_0x3badb4(0x552)]())continue;_0x5e6ed3[_0x3badb4(0x3f3)](_0x5260bd);}}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x34d),_0x2b4497=>{const _0x30c952=_0x9c6fcf;if(!SceneManager[_0x30c952(0x319)]())return;if(!Imported[_0x30c952(0x87b)])return;VisuMZ[_0x30c952(0x5e4)](_0x2b4497,_0x2b4497);const _0x2d1b58=$gameTemp[_0x30c952(0x970)](),_0x1caa77=_0x2b4497[_0x30c952(0x895)];if(!_0x2d1b58)return;$gameScreen[_0x30c952(0xadd)](_0x2b4497[_0x30c952(0x1c1)],_0x2b4497[_0x30c952(0x82b)],_0x2b4497['EasingType']);if(_0x1caa77)_0x2d1b58[_0x30c952(0x9ad)](_0x30c952(0x811));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x900),_0x44913b=>{const _0x2e6675=_0x9c6fcf;if(!SceneManager[_0x2e6675(0x319)]())return;if(!Imported[_0x2e6675(0x87b)])return;VisuMZ[_0x2e6675(0x5e4)](_0x44913b,_0x44913b);const _0x21b763=$gameTemp[_0x2e6675(0x970)](),_0x4963aa=_0x44913b[_0x2e6675(0x895)];if(!_0x21b763)return;$gameScreen[_0x2e6675(0xadd)](0x1,_0x44913b[_0x2e6675(0x82b)],_0x44913b['EasingType']);if(_0x4963aa)_0x21b763[_0x2e6675(0x9ad)](_0x2e6675(0x811));}),PluginManager[_0x9c6fcf(0xaab)](pluginData[_0x9c6fcf(0x613)],_0x9c6fcf(0x4eb),_0x52160c=>{const _0x4a3d29=_0x9c6fcf;if(!SceneManager[_0x4a3d29(0x319)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x78fbc6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x78fbc6)return;_0x78fbc6[_0x4a3d29(0x9ad)](_0x4a3d29(0x811));}),VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xa34)]=Scene_Boot[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8ba)],Scene_Boot['prototype'][_0x9c6fcf(0x8ba)]=function(){const _0x4947a2=_0x9c6fcf;this[_0x4947a2(0x77f)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x4947a2(0x327)](),this[_0x4947a2(0x748)](),VisuMZ['BattleCore'][_0x4947a2(0xa34)]['call'](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x4947a2(0xab8)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x751)]=function(){const _0x2d5d99=_0x9c6fcf;if(VisuMZ[_0x2d5d99(0x709)])return;this[_0x2d5d99(0x35a)](),this[_0x2d5d99(0x614)](),this[_0x2d5d99(0x86c)]();},Scene_Boot[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x77f)]=function(){const _0x347a8c=_0x9c6fcf,_0x4d4876=$dataSystem[_0x347a8c(0x8c6)][_0x347a8c(0x88e)];for(let _0x295277=0x0;_0x295277<_0x4d4876;_0x295277++){const _0x3c99d1=$dataSystem[_0x347a8c(0x649)][_0x295277];if(_0x3c99d1)continue;$dataSystem['attackMotions'][_0x295277]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x849)]=function(){const _0x520191=_0x9c6fcf,_0x52733b=VisuMZ['BattleCore'][_0x520191(0x19c)];_0x52733b[_0x520191(0x9a9)][_0x520191(0x8ad)]===undefined&&(_0x52733b[_0x520191(0x9a9)][_0x520191(0x8ad)]=_0x520191(0x834)),_0x52733b['Actor'][_0x520191(0xa13)]===undefined&&(_0x52733b[_0x520191(0x6e6)][_0x520191(0xa13)]=![]),_0x52733b[_0x520191(0x7b3)][_0x520191(0xa13)]===undefined&&(_0x52733b['Enemy']['SmoothImage']=!![]),_0x52733b['Actor'][_0x520191(0x674)]===undefined&&(_0x52733b['Actor'][_0x520191(0x674)]=![]),_0x52733b[_0x520191(0x6e6)][_0x520191(0x83c)]===undefined&&(_0x52733b[_0x520191(0x6e6)]['PrioritySortActors']=!![]);},VisuMZ[_0x9c6fcf(0x7c5)]={},Scene_Boot['prototype']['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x17fe09=_0x9c6fcf;for(const _0x562ecc of VisuMZ[_0x17fe09(0x8f5)][_0x17fe09(0x19c)]['Damage']['DamageStyleList']){if(!_0x562ecc)continue;const _0xf6a72f=_0x562ecc[_0x17fe09(0xa09)]['toUpperCase']()['trim']();VisuMZ[_0x17fe09(0x7c5)][_0xf6a72f]=_0x562ecc;}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x942)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x748)]=function(){const _0x1ae638=_0x9c6fcf,_0x3df1e2=VisuMZ['BattleCore'][_0x1ae638(0x942)],_0x1208df=_0x1ae638(0x1b4),_0x134a6a=[[_0x1ae638(0x449),_0x1ae638(0xaa3)],[_0x1ae638(0x98d),'POST-']],_0xfe5471=[[_0x1ae638(0x52d),_0x1ae638(0x4e8)],['%1Damage%2JS',_0x1ae638(0x656)]],_0x44dc1b=[['',''],[_0x1ae638(0x374),_0x1ae638(0x30f)],['AsTarget','AS\x20TARGET']];for(const _0x71740a of _0xfe5471){for(const _0x373626 of _0x44dc1b){for(const _0x38909d of _0x134a6a){const _0x1c4d40=_0x71740a[0x0][_0x1ae638(0x9da)](_0x38909d[0x0],_0x373626[0x0]),_0x2db1b7=_0x71740a[0x1][_0x1ae638(0x9da)](_0x38909d[0x1],_0x373626[0x1])['trim'](),_0x49e74c=new RegExp(_0x1208df[_0x1ae638(0x9da)](_0x2db1b7),'i');_0x3df1e2[_0x1c4d40]=_0x49e74c;}}}const _0x2eb11b=[['%1StartActionJS','JS\x20%1START\x20ACTION'],['%1EndActionJS',_0x1ae638(0x42d)]];for(const _0x4e078d of _0x2eb11b){for(const _0x13193d of _0x134a6a){const _0x26aa21=_0x4e078d[0x0][_0x1ae638(0x9da)](_0x13193d[0x0]),_0xcd4807=_0x4e078d[0x1][_0x1ae638(0x9da)](_0x13193d[0x1]),_0x5ccb28=new RegExp(_0x1208df['format'](_0xcd4807),'i');_0x3df1e2[_0x26aa21]=_0x5ccb28;}}const _0x9929c1=[[_0x1ae638(0x84b),'JS\x20%1START\x20BATTLE'],['%1EndBattleJS',_0x1ae638(0x8c0)],[_0x1ae638(0xa75),'JS\x20BATTLE\x20VICTORY'],[_0x1ae638(0x7bf),_0x1ae638(0x4d3)],[_0x1ae638(0xadf),'JS\x20ESCAPE\x20SUCCESS'],[_0x1ae638(0x5a9),'JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS',_0x1ae638(0x72c)],[_0x1ae638(0x38f),_0x1ae638(0x3a5)],['%1RegenerateJS','JS\x20%1REGENERATE']];for(const _0x1cf95a of _0x9929c1){for(const _0x20162d of _0x134a6a){const _0x7b7ce2=_0x1cf95a[0x0][_0x1ae638(0x9da)](_0x20162d[0x0]),_0x3c7c91=_0x1cf95a[0x1][_0x1ae638(0x9da)](_0x20162d[0x1]),_0x60d78d=new RegExp(_0x1208df['format'](_0x3c7c91),'i');_0x3df1e2[_0x7b7ce2]=_0x60d78d;}}},Scene_Boot['prototype'][_0x9c6fcf(0x35a)]=function(){const _0x4cada4=_0x9c6fcf,_0x11cb1e=$dataSkills['concat']($dataItems);for(const _0x24ce3a of _0x11cb1e){if(!_0x24ce3a)continue;VisuMZ['BattleCore'][_0x4cada4(0x30b)](_0x24ce3a);}},Scene_Boot[_0x9c6fcf(0x1ef)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x858b22=_0x9c6fcf,_0x2a739f=$dataActors[_0x858b22(0x312)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x44f6c6 of _0x2a739f){if(!_0x44f6c6)continue;VisuMZ[_0x858b22(0x8f5)][_0x858b22(0x155)](_0x44f6c6);}},Scene_Boot['prototype'][_0x9c6fcf(0xab8)]=function(){const _0x35713c=_0x9c6fcf,_0x1749fe=VisuMZ[_0x35713c(0x8f5)][_0x35713c(0x19c)]['Mechanics'][_0x35713c(0x549)],_0x818171=[];for(const _0x6e123c of _0x1749fe){const _0x22a7cc=$dataTroops[_0x6e123c];if(_0x22a7cc)_0x818171[_0x35713c(0x4c6)](JsonEx['makeDeepCopy'](_0x22a7cc));}for(const _0x217ff3 of $dataTroops){if(!_0x217ff3)continue;for(const _0x53c162 of _0x818171){if(_0x53c162['id']===_0x217ff3['id'])continue;_0x217ff3['pages']=_0x217ff3[_0x35713c(0x777)][_0x35713c(0x312)](_0x53c162[_0x35713c(0x777)]);}}},Scene_Boot['prototype'][_0x9c6fcf(0x4ea)]=function(){const _0x1c40e8=_0x9c6fcf,_0x31af90=VisuMZ['BattleCore'][_0x1c40e8(0x19c)][_0x1c40e8(0xb07)];if(_0x31af90['BattleStartEvent']>0x0&&$dataCommonEvents[_0x31af90[_0x1c40e8(0x393)]]){const _0x40bd33=$dataCommonEvents[_0x31af90[_0x1c40e8(0x393)]],_0x27ae8a=_0x40bd33[_0x1c40e8(0x61b)][_0x1c40e8(0x88e)]-0x2,_0x3b9d8a=_0x40bd33[_0x1c40e8(0x61b)][_0x27ae8a];if(_0x3b9d8a&&_0x3b9d8a[_0x1c40e8(0x3aa)]!==0xe6){const _0x4298cc={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x1283d6=_0x40bd33[_0x1c40e8(0x61b)][_0x1c40e8(0x373)]();_0x40bd33['list'][_0x1c40e8(0xa24)](_0x4298cc),_0x40bd33[_0x1c40e8(0x61b)][_0x1c40e8(0xa24)](_0x1283d6);}}},Scene_Boot[_0x9c6fcf(0x1ef)]['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0xcc4999=_0x9c6fcf;VisuMZ[_0xcc4999(0x8f5)][_0xcc4999(0x553)](),VisuMZ[_0xcc4999(0x8f5)][_0xcc4999(0x285)]($dataSkills),VisuMZ[_0xcc4999(0x8f5)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x553)]=function(){const _0x4e0366=_0x9c6fcf;VisuMZ[_0x4e0366(0x8f5)][_0x4e0366(0x61a)]={};for(const _0x4a221f of $dataCommonEvents){if(!_0x4a221f)continue;if(_0x4a221f[_0x4e0366(0x613)]['match'](/\[(.*)\]/i)){let _0x16b26a=String(RegExp['$1'])[_0x4e0366(0xb09)](/,/g,'')[_0x4e0366(0x5ed)]()['trim']();VisuMZ[_0x4e0366(0x8f5)][_0x4e0366(0x61a)][_0x16b26a]=_0x4a221f['id'];}}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x285)]=function(_0x3cc6c3){const _0xbf1478=_0x9c6fcf;for(const _0x1c6cd6 of _0x3cc6c3){if(!_0x1c6cd6)continue;VisuMZ[_0xbf1478(0x8f5)][_0xbf1478(0x927)](_0x1c6cd6);}},VisuMZ[_0x9c6fcf(0x8f5)]['BindCommonEventKeysForObj']=function(_0x2a34dd){const _0x19179c=_0x9c6fcf;if(!_0x2a34dd)return;if(!_0x2a34dd['effects'])return;VisuMZ[_0x19179c(0x8f5)]['_commonEventKey']=VisuMZ[_0x19179c(0x8f5)][_0x19179c(0x61a)]||{};const _0x371f3e=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x390509=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x35da6e=[];const _0x114652=_0x2a34dd[_0x19179c(0x468)][_0x19179c(0x3c6)](_0x371f3e);if(_0x114652){for(const _0x168b90 of _0x114652){_0x168b90[_0x19179c(0x3c6)](_0x371f3e);const _0xda989c=String(RegExp['$1'])[_0x19179c(0x8d8)](',')[_0x19179c(0x1f9)](_0x1a3790=>String(_0x1a3790)['toUpperCase']()[_0x19179c(0x4a5)]());_0x35da6e=_0x35da6e['concat'](_0xda989c);}!_0x2a34dd[_0x19179c(0x468)][_0x19179c(0x3c6)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2a34dd[_0x19179c(0x468)]+=_0x19179c(0x8dc));;}if(_0x2a34dd['note']['match'](_0x390509)){const _0x3fc670=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x19179c(0x1f9)](_0x32cb67=>String(_0x32cb67)[_0x19179c(0x5ed)]()[_0x19179c(0x4a5)]());_0x35da6e=_0x35da6e[_0x19179c(0x312)](_0x3fc670);!_0x2a34dd[_0x19179c(0x468)][_0x19179c(0x3c6)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2a34dd[_0x19179c(0x468)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0x46a83f of _0x35da6e){if(VisuMZ[_0x19179c(0x8f5)][_0x19179c(0x61a)][_0x46a83f]){const _0x3031ec=VisuMZ['BattleCore']['_commonEventKey'][_0x46a83f],_0x33132={'code':0x2c,'dataId':_0x3031ec,'value1':0x1,'value2':0x0};_0x2a34dd[_0x19179c(0x387)][_0x19179c(0x4c6)](_0x33132);}}},Scene_Boot['prototype'][_0x9c6fcf(0x86c)]=function(){const _0x5e76c2=_0x9c6fcf,_0x32a40a=$dataSkills['concat']($dataItems);for(const _0x4acc08 of _0x32a40a){if(!_0x4acc08)continue;VisuMZ[_0x5e76c2(0x8f5)][_0x5e76c2(0x59f)](_0x4acc08);}},VisuMZ[_0x9c6fcf(0x8f5)]['ParseActorNotetags']=VisuMZ['ParseActorNotetags'],VisuMZ[_0x9c6fcf(0x2eb)]=function(_0x4ce59f){const _0x5cda88=_0x9c6fcf;VisuMZ[_0x5cda88(0x8f5)][_0x5cda88(0x2eb)]&&VisuMZ['BattleCore'][_0x5cda88(0x2eb)]['call'](this,_0x4ce59f),VisuMZ[_0x5cda88(0x8f5)]['Parse_Notetags_TraitObjects'](_0x4ce59f);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x8e7)]=VisuMZ[_0x9c6fcf(0x8e7)],VisuMZ[_0x9c6fcf(0x8e7)]=function(_0x58f87b){const _0x10a1d9=_0x9c6fcf;VisuMZ['BattleCore']['ParseClassNotetags']&&VisuMZ[_0x10a1d9(0x8f5)][_0x10a1d9(0x8e7)]['call'](this,_0x58f87b),VisuMZ[_0x10a1d9(0x8f5)][_0x10a1d9(0x155)](_0x58f87b);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x5dd)]=VisuMZ[_0x9c6fcf(0x5dd)],VisuMZ[_0x9c6fcf(0x5dd)]=function(_0x59cd74){const _0x4a2ef1=_0x9c6fcf;VisuMZ[_0x4a2ef1(0x8f5)][_0x4a2ef1(0x5dd)]&&VisuMZ[_0x4a2ef1(0x8f5)]['ParseSkillNotetags'][_0x4a2ef1(0x7df)](this,_0x59cd74),VisuMZ[_0x4a2ef1(0x8f5)]['Parse_Notetags_Action'](_0x59cd74),VisuMZ[_0x4a2ef1(0x8f5)][_0x4a2ef1(0x59f)](_0x59cd74);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x62d)]=VisuMZ[_0x9c6fcf(0x62d)],VisuMZ[_0x9c6fcf(0x62d)]=function(_0xb8da51){const _0xc5e809=_0x9c6fcf;VisuMZ[_0xc5e809(0x8f5)][_0xc5e809(0x62d)]&&VisuMZ['BattleCore'][_0xc5e809(0x62d)][_0xc5e809(0x7df)](this,_0xb8da51),VisuMZ[_0xc5e809(0x8f5)][_0xc5e809(0x30b)](_0xb8da51),VisuMZ['BattleCore'][_0xc5e809(0x59f)](_0xb8da51);},VisuMZ['BattleCore'][_0x9c6fcf(0x4d7)]=VisuMZ[_0x9c6fcf(0x4d7)],VisuMZ[_0x9c6fcf(0x4d7)]=function(_0x26614b){const _0x3a8ab9=_0x9c6fcf;VisuMZ[_0x3a8ab9(0x8f5)]['ParseWeaponNotetags']&&VisuMZ['BattleCore']['ParseWeaponNotetags']['call'](this,_0x26614b),VisuMZ[_0x3a8ab9(0x8f5)][_0x3a8ab9(0x155)](_0x26614b);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x4e1)]=VisuMZ[_0x9c6fcf(0x4e1)],VisuMZ[_0x9c6fcf(0x4e1)]=function(_0x39c63b){const _0xc4c5ed=_0x9c6fcf;VisuMZ[_0xc4c5ed(0x8f5)][_0xc4c5ed(0x4e1)]&&VisuMZ[_0xc4c5ed(0x8f5)][_0xc4c5ed(0x4e1)]['call'](this,_0x39c63b),VisuMZ[_0xc4c5ed(0x8f5)][_0xc4c5ed(0x155)](_0x39c63b);},VisuMZ['BattleCore'][_0x9c6fcf(0x534)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x9c6fcf(0x534)]=function(_0x4d696d){const _0x1488b0=_0x9c6fcf;VisuMZ[_0x1488b0(0x8f5)][_0x1488b0(0x534)]&&VisuMZ[_0x1488b0(0x8f5)][_0x1488b0(0x534)][_0x1488b0(0x7df)](this,_0x4d696d),VisuMZ[_0x1488b0(0x8f5)][_0x1488b0(0x155)](_0x4d696d);},VisuMZ['BattleCore'][_0x9c6fcf(0x8fa)]=VisuMZ[_0x9c6fcf(0x8fa)],VisuMZ[_0x9c6fcf(0x8fa)]=function(_0x280d26){const _0x59d132=_0x9c6fcf;VisuMZ[_0x59d132(0x8f5)][_0x59d132(0x8fa)]&&VisuMZ[_0x59d132(0x8f5)][_0x59d132(0x8fa)][_0x59d132(0x7df)](this,_0x280d26),VisuMZ[_0x59d132(0x8f5)][_0x59d132(0x155)](_0x280d26);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x30b)]=function(_0x15b009){const _0xcda991=_0x9c6fcf,_0x4f3f0f=[_0xcda991(0x15f),_0xcda991(0x4e9),_0xcda991(0x4bd),'PostDamageJS',_0xcda991(0x655),_0xcda991(0x8fd),_0xcda991(0x8f7),_0xcda991(0x7c1)];for(const _0x501741 of _0x4f3f0f){VisuMZ['BattleCore'][_0xcda991(0x475)](_0x15b009,_0x501741);}const _0x567df2=_0x15b009['note'];_0x567df2[_0xcda991(0x3c6)](/<ALWAYS CRITICAL/i)&&(_0x15b009['damage']['critical']=!![]),_0x567df2[_0xcda991(0x3c6)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x15b009[_0xcda991(0x212)]=Math['max'](0x1,Number(RegExp['$1']))),_0x567df2['match'](/<TARGET:[ ](.*)>/i)&&(_0x15b009['scope']=String(RegExp['$1'])['toUpperCase']()[_0xcda991(0x4a5)]());},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x155)]=function(_0x477b8d){const _0x22eddd=_0x9c6fcf,_0x38c6a0=[_0x22eddd(0x715),'PostApplyAsUserJS',_0x22eddd(0x817),_0x22eddd(0x280),_0x22eddd(0x948),_0x22eddd(0x386),'PreDamageAsTargetJS','PostDamageAsTargetJS','PreStartActionJS','PostStartActionJS',_0x22eddd(0x8f7),'PostEndActionJS',_0x22eddd(0x293),_0x22eddd(0x9b5),_0x22eddd(0x1af),_0x22eddd(0x14d),_0x22eddd(0xa75),_0x22eddd(0x7bf),_0x22eddd(0xadf),_0x22eddd(0x5a9),_0x22eddd(0x4d9),'PostStartTurnJS','PreEndTurnJS',_0x22eddd(0x303),_0x22eddd(0x647),_0x22eddd(0xad9)];for(const _0x174116 of _0x38c6a0){VisuMZ[_0x22eddd(0x8f5)]['createJS'](_0x477b8d,_0x174116);}const _0x18a23e=[_0x22eddd(0x986),_0x22eddd(0x5a2),_0x22eddd(0x151),_0x22eddd(0x7af),_0x22eddd(0xa22)];for(const _0x342ed4 of _0x18a23e){VisuMZ[_0x22eddd(0x8f5)][_0x22eddd(0x870)](_0x477b8d,_0x342ed4);}},VisuMZ[_0x9c6fcf(0x8f5)]['Parse_Notetags_Targets']=function(_0x3148a2){const _0xf57c29=_0x9c6fcf,_0x1bea01=_0x3148a2['note'];if(_0x1bea01['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x40567e=String(RegExp['$1']),_0x3b94ea=VisuMZ[_0xf57c29(0x8f5)][_0xf57c29(0x6a3)](_0x3148a2,_0xf57c29(0x708));VisuMZ[_0xf57c29(0x8f5)]['createTargetsJS'](_0x40567e,_0x3b94ea);}if(_0x1bea01[_0xf57c29(0x3c6)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x5a049d=String(RegExp['$1']),_0x2dfcf3=VisuMZ['BattleCore'][_0xf57c29(0x6a3)](_0x3148a2,_0xf57c29(0x3ed));VisuMZ[_0xf57c29(0x8f5)][_0xf57c29(0xb4a)](_0x5a049d,_0x2dfcf3);}},VisuMZ[_0x9c6fcf(0x8f5)]['JS']={},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x475)]=function(_0x6b91b6,_0x781314){const _0x1195e9=_0x9c6fcf,_0x12c984=_0x6b91b6['note'];if(_0x12c984[_0x1195e9(0x3c6)](VisuMZ[_0x1195e9(0x8f5)][_0x1195e9(0x942)][_0x781314])){const _0x16f9d5=RegExp['$1'],_0x15dae1=_0x1195e9(0x557)[_0x1195e9(0x9da)](_0x16f9d5),_0x588fc5=VisuMZ[_0x1195e9(0x8f5)][_0x1195e9(0x6a3)](_0x6b91b6,_0x781314);VisuMZ['BattleCore']['JS'][_0x588fc5]=new Function(_0x15dae1);}},VisuMZ[_0x9c6fcf(0x8f5)]['createKeyJS']=function(_0x49ada9,_0x535104){const _0x29ebb2=_0x9c6fcf;if(VisuMZ[_0x29ebb2(0x6a3)])return VisuMZ[_0x29ebb2(0x6a3)](_0x49ada9,_0x535104);let _0x44f749='';if($dataActors[_0x29ebb2(0x765)](_0x49ada9))_0x44f749='Actor-%1-%2'[_0x29ebb2(0x9da)](_0x49ada9['id'],_0x535104);if($dataClasses['includes'](_0x49ada9))_0x44f749='Class-%1-%2'['format'](_0x49ada9['id'],_0x535104);if($dataSkills[_0x29ebb2(0x765)](_0x49ada9))_0x44f749=_0x29ebb2(0x87c)[_0x29ebb2(0x9da)](_0x49ada9['id'],_0x535104);if($dataItems['includes'](_0x49ada9))_0x44f749=_0x29ebb2(0x74c)[_0x29ebb2(0x9da)](_0x49ada9['id'],_0x535104);if($dataWeapons[_0x29ebb2(0x765)](_0x49ada9))_0x44f749=_0x29ebb2(0x5e3)[_0x29ebb2(0x9da)](_0x49ada9['id'],_0x535104);if($dataArmors[_0x29ebb2(0x765)](_0x49ada9))_0x44f749=_0x29ebb2(0x143)[_0x29ebb2(0x9da)](_0x49ada9['id'],_0x535104);if($dataEnemies[_0x29ebb2(0x765)](_0x49ada9))_0x44f749=_0x29ebb2(0x85b)[_0x29ebb2(0x9da)](_0x49ada9['id'],_0x535104);if($dataStates['includes'](_0x49ada9))_0x44f749=_0x29ebb2(0x516)[_0x29ebb2(0x9da)](_0x49ada9['id'],_0x535104);return _0x44f749;},VisuMZ['BattleCore'][_0x9c6fcf(0x7a7)]=function(_0xf578b5,_0x1d3058){const _0x10601b=_0x9c6fcf,_0x5495da='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x10601b(0x9da)](_0xf578b5);VisuMZ[_0x10601b(0x8f5)]['JS'][_0x1d3058]=new Function(_0x5495da);},VisuMZ[_0x9c6fcf(0x8f5)]['createCommandVisibleJS']=function(_0x113ff7,_0x4eab59){const _0x5d9fcf=_0x9c6fcf,_0x4b9092=_0x5d9fcf(0xa20)[_0x5d9fcf(0x9da)](_0x113ff7);VisuMZ[_0x5d9fcf(0x8f5)]['JS'][_0x4eab59]=new Function(_0x4b9092);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x870)]=function(_0x44b97c,_0x31b64c){const _0x22bfb3=_0x9c6fcf,_0x1fd191=_0x44b97c[_0x22bfb3(0x468)];if(_0x1fd191[_0x22bfb3(0x3c6)](VisuMZ[_0x22bfb3(0x8f5)][_0x22bfb3(0x942)][_0x31b64c])){const _0x2da1f7=RegExp['$1'],_0x18e84e='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'['format'](_0x2da1f7),_0x3f328e=VisuMZ[_0x22bfb3(0x8f5)][_0x22bfb3(0x6a3)](_0x44b97c,_0x31b64c);VisuMZ[_0x22bfb3(0x8f5)]['JS'][_0x3f328e]=new Function(_0x18e84e);}},TextManager[_0x9c6fcf(0x57a)]=VisuMZ['BattleCore']['Settings'][_0x9c6fcf(0x3c0)][_0x9c6fcf(0x7c7)],TextManager[_0x9c6fcf(0x13c)]=VisuMZ[_0x9c6fcf(0x8f5)]['Settings'][_0x9c6fcf(0x36a)]['StartName'],TextManager[_0x9c6fcf(0x8ea)]=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0x36a)][_0x9c6fcf(0x827)],TextManager[_0x9c6fcf(0x6e8)]=VisuMZ['BattleCore'][_0x9c6fcf(0x19c)][_0x9c6fcf(0x1a7)][_0x9c6fcf(0xa09)],ColorManager[_0x9c6fcf(0x514)]=function(_0x1f583d){const _0x4d2d38=_0x9c6fcf;return _0x1f583d=String(_0x1f583d),_0x1f583d['match'](/#(.*)/i)?_0x4d2d38(0x300)[_0x4d2d38(0x9da)](String(RegExp['$1'])):this['textColor'](Number(_0x1f583d));},DataManager['getDamageStyle']=function(_0x4a64ce){const _0x6c88a=_0x9c6fcf;if(_0x4a64ce[_0x6c88a(0x468)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x63adfc=String(RegExp['$1'])[_0x6c88a(0x5ed)]()[_0x6c88a(0x4a5)]();if(_0x63adfc==='MANUAL')return _0x6c88a(0x2f0);if(VisuMZ['DamageStyles'][_0x63adfc])return _0x63adfc;}const _0x369544=VisuMZ['BattleCore'][_0x6c88a(0x19c)]['Damage'][_0x6c88a(0x471)]['toUpperCase']()[_0x6c88a(0x4a5)]();if(VisuMZ['DamageStyles'][_0x369544])return _0x369544;return'MANUAL';},DataManager[_0x9c6fcf(0x7d1)]=function(_0x390f6f){const _0x3bf7ea=_0x9c6fcf;_0x390f6f=_0x390f6f['toUpperCase']()[_0x3bf7ea(0x4a5)](),this['_stypeIDs']=this[_0x3bf7ea(0xac2)]||{};if(this['_stypeIDs'][_0x390f6f])return this[_0x3bf7ea(0xac2)][_0x390f6f];for(let _0x79d11e=0x1;_0x79d11e<0x64;_0x79d11e++){if(!$dataSystem[_0x3bf7ea(0x1b5)][_0x79d11e])continue;let _0x145105=$dataSystem[_0x3bf7ea(0x1b5)][_0x79d11e][_0x3bf7ea(0x5ed)]()[_0x3bf7ea(0x4a5)]();_0x145105=_0x145105[_0x3bf7ea(0xb09)](/\x1I\[(\d+)\]/gi,''),_0x145105=_0x145105[_0x3bf7ea(0xb09)](/\\I\[(\d+)\]/gi,''),this[_0x3bf7ea(0xac2)][_0x145105]=_0x79d11e;}return this['_stypeIDs'][_0x390f6f]||0x0;},DataManager['getSkillIdWithName']=function(_0x2ef05e){const _0x42faeb=_0x9c6fcf;_0x2ef05e=_0x2ef05e[_0x42faeb(0x5ed)]()[_0x42faeb(0x4a5)](),this['_skillIDs']=this[_0x42faeb(0x41a)]||{};if(this['_skillIDs'][_0x2ef05e])return this[_0x42faeb(0x41a)][_0x2ef05e];for(const _0x3451a8 of $dataSkills){if(!_0x3451a8)continue;this['_skillIDs'][_0x3451a8[_0x42faeb(0x613)][_0x42faeb(0x5ed)]()[_0x42faeb(0x4a5)]()]=_0x3451a8['id'];}return this[_0x42faeb(0x41a)][_0x2ef05e]||0x0;},DataManager[_0x9c6fcf(0x646)]=function(_0xd0853b){const _0x34424d=_0x9c6fcf;_0xd0853b=_0xd0853b[_0x34424d(0x5ed)]()[_0x34424d(0x4a5)](),this['_enemyIDs']=this[_0x34424d(0x292)]||{};if(this['_enemyIDs'][_0xd0853b])return this['_enemyIDs'][_0xd0853b];for(const _0x2c46fb of $dataEnemies){if(!_0x2c46fb)continue;this['_enemyIDs'][_0x2c46fb[_0x34424d(0x613)][_0x34424d(0x5ed)]()[_0x34424d(0x4a5)]()]=_0x2c46fb['id'];}return this[_0x34424d(0x292)][_0xd0853b]||0x0;},DataManager[_0x9c6fcf(0x597)]=function(_0x498211){const _0x3a34a0=_0x9c6fcf;_0x498211=_0x498211[_0x3a34a0(0x5ed)]()[_0x3a34a0(0x4a5)](),this[_0x3a34a0(0x5cd)]=this[_0x3a34a0(0x5cd)]||{};if(this[_0x3a34a0(0x5cd)][_0x498211])return this[_0x3a34a0(0x5cd)][_0x498211];for(let _0x1ab339=0x1;_0x1ab339<0x64;_0x1ab339++){if(!$dataSystem[_0x3a34a0(0x8c6)][_0x1ab339])continue;let _0x1ac0c0=$dataSystem[_0x3a34a0(0x8c6)][_0x1ab339][_0x3a34a0(0x5ed)]()[_0x3a34a0(0x4a5)]();_0x1ac0c0=_0x1ac0c0[_0x3a34a0(0xb09)](/\x1I\[(\d+)\]/gi,''),_0x1ac0c0=_0x1ac0c0['replace'](/\\I\[(\d+)\]/gi,''),this[_0x3a34a0(0x5cd)][_0x1ac0c0]=_0x1ab339;}return this[_0x3a34a0(0x5cd)][_0x3a34a0(0x51d)]=0x0,this[_0x3a34a0(0x5cd)][_0x498211]||0x0;},DataManager[_0x9c6fcf(0xa16)]=function(_0x227673){const _0x2ba546=_0x9c6fcf,_0x4631c9=_0x2ba546(0x375);let _0x2d1804=_0x227673[_0x2ba546(0x533)],_0x128650=_0x227673[_0x2ba546(0x613)];const _0x2d9bbd=_0x227673['note'];return _0x2d9bbd[_0x2ba546(0x3c6)](/<DISPLAY ICON: (\d+)>/i)&&(_0x2d1804=Number(RegExp['$1'])),_0x2d9bbd[_0x2ba546(0x3c6)](/<DISPLAY TEXT: (.*)>/i)&&(_0x128650=String(RegExp['$1'])),_0x4631c9[_0x2ba546(0x9da)](_0x2d1804,_0x128650);},DataManager[_0x9c6fcf(0x366)]=function(_0x2f7fa9){const _0x27540f=_0x9c6fcf;return _0x2f7fa9[_0x27540f(0x468)]['match'](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x2f7fa9[_0x27540f(0x613)];},DataManager['battleCommandIcon']=function(_0x4bd759){const _0x3f3701=_0x9c6fcf;return _0x4bd759[_0x3f3701(0x468)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x4bd759['iconIndex'];},DataManager[_0x9c6fcf(0x588)]=function(_0x16a807){const _0xfa8b3=_0x9c6fcf,_0xf1857f=$dataEnemies[_0x16a807];if(_0xf1857f){if(_0xf1857f[_0xfa8b3(0x468)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x234a65=String(RegExp['$1'])[_0xfa8b3(0x8d8)](/[\r\n]+/)[_0xfa8b3(0x7e5)](''),_0xc97e04=this['processRandomizedData'](_0x234a65);_0x16a807=this['getEnemyIdWithName'](_0xc97e04)||_0x16a807,_0x16a807=DataManager[_0xfa8b3(0x588)](_0x16a807);}}return _0x16a807;},DataManager[_0x9c6fcf(0x7eb)]=function(_0x30caa0){const _0x6e677c=_0x9c6fcf;let _0x3eac03=0x0;const _0x1dc56f={};for(const _0x1ab002 of _0x30caa0){if(_0x1ab002[_0x6e677c(0x3c6)](/(.*):[ ](\d+)/i)){const _0x41a22e=String(RegExp['$1'])['trim'](),_0x31f177=Number(RegExp['$2']);_0x1dc56f[_0x41a22e]=_0x31f177,_0x3eac03+=_0x31f177;}else{if(_0x1ab002[_0x6e677c(0x3c6)](/(.*):[ ](\d+\.?\d+)/i)){const _0x4be1f7=String(RegExp['$1'])[_0x6e677c(0x4a5)](),_0x5e47e5=Number(RegExp['$2']);_0x1dc56f[_0x4be1f7]=_0x5e47e5,_0x3eac03+=_0x5e47e5;}else _0x1ab002!==''&&(_0x1dc56f[_0x1ab002]=0x1,_0x3eac03++);}}if(_0x3eac03<=0x0)return'';let _0xcc6711=Math[_0x6e677c(0x644)]()*_0x3eac03;for(const _0x5e06cf in _0x1dc56f){_0xcc6711-=_0x1dc56f[_0x5e06cf];if(_0xcc6711<=0x0)return _0x5e06cf;}return'';},DataManager[_0x9c6fcf(0x8be)]=function(_0x46580d){const _0x37b1f9=_0x9c6fcf;if(!_0x46580d)return![];if(!VisuMZ[_0x37b1f9(0x8f5)][_0x37b1f9(0x19c)][_0x37b1f9(0x7fe)][_0x37b1f9(0x8a9)])return![];if(_0x46580d[_0x37b1f9(0x468)][_0x37b1f9(0x3c6)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x46580d[_0x37b1f9(0x468)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x46c2d8 of _0x46580d['effects']){if(!_0x46c2d8)continue;if(_0x46c2d8['code']===Game_Action[_0x37b1f9(0x3dd)])return!![];}return![];},DataManager[_0x9c6fcf(0x67b)]=function(_0x3732a9){const _0x184c8c=_0x9c6fcf,_0xc83978=$dataTroops[_0x3732a9];if(!_0xc83978)return'';let _0x5b707e='';_0x5b707e+=_0xc83978[_0x184c8c(0x613)];for(const _0x4bfb12 of _0xc83978[_0x184c8c(0x777)]){for(const _0x1f80d6 of _0x4bfb12[_0x184c8c(0x61b)]){[0x6c,0x198]['includes'](_0x1f80d6[_0x184c8c(0x3aa)])&&(_0x5b707e+='\x0a',_0x5b707e+=_0x1f80d6['parameters'][0x0]);}}return _0x5b707e;},ConfigManager[_0x9c6fcf(0x95e)]=ConfigManager[_0x9c6fcf(0x95e)]??![],ConfigManager[_0x9c6fcf(0x46b)]=ConfigManager[_0x9c6fcf(0x46b)]??![],ConfigManager[_0x9c6fcf(0x6e8)]=ConfigManager[_0x9c6fcf(0x6e8)]??!![],VisuMZ[_0x9c6fcf(0x8f5)]['ConfigManager_makeData']=ConfigManager[_0x9c6fcf(0x4cf)],ConfigManager[_0x9c6fcf(0x4cf)]=function(){const _0x32d36a=_0x9c6fcf,_0x4856ba=VisuMZ[_0x32d36a(0x8f5)]['ConfigManager_makeData'][_0x32d36a(0x7df)](this);return _0x4856ba['autoBattleAtStart']=this[_0x32d36a(0x95e)],_0x4856ba[_0x32d36a(0x46b)]=this[_0x32d36a(0x46b)],_0x4856ba['visualHpGauge']=this['visualHpGauge'],_0x4856ba;},VisuMZ['BattleCore']['ConfigManager_applyData']=ConfigManager[_0x9c6fcf(0x3f0)],ConfigManager['applyData']=function(_0x3fe455){const _0x14128b=_0x9c6fcf;VisuMZ[_0x14128b(0x8f5)]['ConfigManager_applyData'][_0x14128b(0x7df)](this,_0x3fe455),_0x14128b(0x95e)in _0x3fe455?this['autoBattleAtStart']=_0x3fe455[_0x14128b(0x95e)]:this[_0x14128b(0x95e)]=![],_0x14128b(0x46b)in _0x3fe455?this[_0x14128b(0x46b)]=_0x3fe455['autoBattleUseSkills']:this['autoBattleUseSkills']=![],_0x14128b(0x6e8)in _0x3fe455?this['visualHpGauge']=_0x3fe455[_0x14128b(0x6e8)]:this[_0x14128b(0x6e8)]=!![];},ImageManager['svActorHorzCells']=ImageManager[_0x9c6fcf(0x1a2)]||0x9,ImageManager[_0x9c6fcf(0xaa4)]=ImageManager[_0x9c6fcf(0xaa4)]||0x6,VisuMZ[_0x9c6fcf(0x8f5)]['BattleManager_setup']=BattleManager[_0x9c6fcf(0xa66)],BattleManager['setup']=function(_0x33afd1,_0x45202d,_0x1a91d7){const _0x4eb98f=_0x9c6fcf;VisuMZ[_0x4eb98f(0x8f5)]['BattleManager_setup']['call'](this,_0x33afd1,_0x45202d,_0x1a91d7),this[_0x4eb98f(0x7aa)]={};},VisuMZ[_0x9c6fcf(0x8f5)]['BattleManager_initMembers']=BattleManager[_0x9c6fcf(0x875)],BattleManager[_0x9c6fcf(0x875)]=function(){const _0x217030=_0x9c6fcf;VisuMZ[_0x217030(0x8f5)]['BattleManager_initMembers'][_0x217030(0x7df)](this),this[_0x217030(0xb64)]=[];},BattleManager[_0x9c6fcf(0x334)]=function(){const _0x1dda2f=_0x9c6fcf;if(!SceneManager[_0x1dda2f(0x319)]())return;const _0x3e4e47=SceneManager[_0x1dda2f(0x90f)][_0x1dda2f(0x197)];if(_0x3e4e47)_0x3e4e47[_0x1dda2f(0x57d)]();},BattleManager[_0x9c6fcf(0x9f9)]=function(){const _0x5b2b6c=_0x9c6fcf;if(BattleManager[_0x5b2b6c(0x89e)]())return _0x5b2b6c(0x18b);return'DTB';},BattleManager[_0x9c6fcf(0xa6a)]=function(_0x196e63){const _0x409c0c=_0x9c6fcf;return _0x196e63=_0x196e63[_0x409c0c(0x5ed)]()['trim'](),this[_0x409c0c(0x9f9)]()===_0x196e63;},BattleManager['isDTB']=function(){const _0x544bb0=_0x9c6fcf;return this[_0x544bb0(0xa6a)](_0x544bb0(0x5dc));},BattleManager['isTurnBased']=function(){const _0x17616d=_0x9c6fcf;return this[_0x17616d(0x605)]();},BattleManager[_0x9c6fcf(0xae1)]=function(){const _0x336a00=_0x9c6fcf;return!this[_0x336a00(0x53e)]();},BattleManager['isTeamBased']=function(){const _0x1893d7=_0x9c6fcf;return!this[_0x1893d7(0x53e)]()&&!this[_0x1893d7(0xae1)]();},BattleManager['getBattlerFromKey']=function(_0x45e3e6){const _0x2a3528=_0x9c6fcf;this[_0x2a3528(0x7aa)]=this[_0x2a3528(0x7aa)]||{};if(this[_0x2a3528(0x7aa)][_0x45e3e6]!==undefined)return this['_battlerKeyCache'][_0x45e3e6];this[_0x2a3528(0x7aa)][_0x45e3e6]=null;const _0xd0e8eb=this[_0x2a3528(0x4fb)](),_0x374439=_0xd0e8eb[_0x2a3528(0x531)](_0x31729b=>_0x31729b[_0x2a3528(0x29b)]()===_0x45e3e6);if(_0x374439)this[_0x2a3528(0x7aa)][_0x45e3e6]=_0x374439;return this['_battlerKeyCache'][_0x45e3e6];},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x29b)]=function(){const _0x5a695a=_0x9c6fcf;return _0x5a695a(0x58b)['format'](this[_0x5a695a(0x552)]()?_0x5a695a(0x23a):_0x5a695a(0x2c9),this[_0x5a695a(0x613)]());},Game_Action['prototype'][_0x9c6fcf(0x767)]=function(_0x4faddb){const _0x571660=_0x9c6fcf;if(this[_0x571660(0xa9f)]!=='')return;typeof _0x4faddb===_0x571660(0x196)?this[_0x571660(0xa9f)]=_0x4faddb['toLowerCase']()[_0x571660(0x4a5)]():this[_0x571660(0xa9f)]=_0x4faddb[_0x571660(0x29b)]();},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6b2)]=function(){const _0x44f032=_0x9c6fcf;return[this[_0x44f032(0xa49)]()];},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa49)]=function(){const _0x482e68=_0x9c6fcf,_0x8eb279=this['_targetBattlerKey']||'',_0x579060=BattleManager[_0x482e68(0x904)](_0x8eb279);if(!_0x579060)return this['getBattlerKeyTargetReplacement']();if(!_0x579060[_0x482e68(0x69e)]())return this['getBattlerKeyTargetReplacement']();return _0x579060;},Game_Action[_0x9c6fcf(0x1ef)]['getBattlerKeyTargetReplacement']=function(){const _0x51cb15=_0x9c6fcf,_0x98b9cc=this['_targetBattlerKey'];return _0x98b9cc[_0x51cb15(0x3c6)](/ACTOR/i)?this[_0x51cb15(0x616)]()[_0x51cb15(0x3b4)]():this[_0x51cb15(0xa70)]()['trueRandomTarget']();},BattleManager[_0x9c6fcf(0x89f)]=function(){const _0x784d88=_0x9c6fcf;return this[_0x784d88(0x4fb)]()['filter'](_0x15cc1f=>_0x15cc1f[_0x784d88(0x822)]());},BattleManager[_0x9c6fcf(0x194)]=function(_0x2a2d24){const _0x2f0a72=_0x9c6fcf;_0x2a2d24===_0x2f0a72(0xa75)&&(this[_0x2f0a72(0x203)]=!![]),$gameParty['processBattleCoreJS'](_0x2a2d24),$gameTroop[_0x2f0a72(0x194)](_0x2a2d24);},VisuMZ['BattleCore'][_0x9c6fcf(0xb22)]=BattleManager[_0x9c6fcf(0x771)],BattleManager[_0x9c6fcf(0x771)]=function(){const _0x167db3=_0x9c6fcf;this[_0x167db3(0xabc)]=![],this[_0x167db3(0x6d5)]=ConfigManager['autoBattleAtStart'],this[_0x167db3(0x203)]=![],this[_0x167db3(0x194)](_0x167db3(0x293)),VisuMZ['BattleCore']['BattleManager_startBattle'][_0x167db3(0x7df)](this),this[_0x167db3(0x194)](_0x167db3(0x9b5));},BattleManager['processPostBattleCommonEvents']=function(_0x2dd0a5){const _0x523bdb=_0x9c6fcf,_0x286920=VisuMZ[_0x523bdb(0x8f5)]['Settings'][_0x523bdb(0xb07)];_0x2dd0a5!==_0x523bdb(0x9e9)&&_0x286920['BattleEndEvent']&&VisuMZ['BattleCore'][_0x523bdb(0xae9)](_0x286920['BattleEndEvent'])&&$gameTemp['reserveCommonEvent'](_0x286920[_0x523bdb(0x84c)]);const _0x4c1abb=_0x523bdb(0x3df)['format'](_0x2dd0a5);_0x286920[_0x4c1abb]&&VisuMZ[_0x523bdb(0x8f5)]['CheckMapBattleEventValid'](_0x286920[_0x4c1abb])&&$gameTemp[_0x523bdb(0xaf9)](_0x286920[_0x4c1abb]);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x6de)]=BattleManager[_0x9c6fcf(0x8b7)],BattleManager['abort']=function(){const _0x1b2157=_0x9c6fcf;VisuMZ[_0x1b2157(0x8f5)][_0x1b2157(0x6de)]['call'](this),SceneManager[_0x1b2157(0x319)]()&&BattleManager[_0x1b2157(0xb0d)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x42b)]=BattleManager[_0x9c6fcf(0x2e7)],BattleManager[_0x9c6fcf(0x2e7)]=function(){const _0x423a27=_0x9c6fcf;if(this[_0x423a27(0x9f3)]==='turn'){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0x423a27(0x8f5)][_0x423a27(0x42b)][_0x423a27(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xa5f)]=BattleManager[_0x9c6fcf(0x164)],BattleManager[_0x9c6fcf(0x164)]=function(){const _0x2c2a65=_0x9c6fcf;this['_endingBattle']=!![],this[_0x2c2a65(0x194)](_0x2c2a65(0xa75)),VisuMZ['BattleCore'][_0x2c2a65(0xa5f)]['call'](this),this[_0x2c2a65(0x990)](_0x2c2a65(0xa10));},VisuMZ['BattleCore']['BattleManager_processAbort']=BattleManager['processAbort'],BattleManager['processAbort']=function(){const _0x2556ac=_0x9c6fcf;this[_0x2556ac(0x203)]=!![],VisuMZ[_0x2556ac(0x8f5)]['BattleManager_processAbort'][_0x2556ac(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x7e6)]=BattleManager['processDefeat'],BattleManager[_0x9c6fcf(0xa0e)]=function(){const _0x2d2631=_0x9c6fcf;this[_0x2d2631(0x203)]=!![],this['processBattleCoreJS'](_0x2d2631(0x7bf)),VisuMZ[_0x2d2631(0x8f5)]['BattleManager_processDefeat']['call'](this),this['processPostBattleCommonEvents'](_0x2d2631(0x52f));},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x3a7)]=BattleManager[_0x9c6fcf(0x20e)],BattleManager[_0x9c6fcf(0x20e)]=function(_0x3dd432){const _0x369492=_0x9c6fcf;this[_0x369492(0xabc)]=!![],this[_0x369492(0x6d5)]=![],this[_0x369492(0x194)]('PreEndBattleJS'),VisuMZ[_0x369492(0x8f5)]['BattleManager_endBattle']['call'](this,_0x3dd432),this[_0x369492(0x194)](_0x369492(0x14d));},VisuMZ[_0x9c6fcf(0x8f5)]['BattleManager_startTurn']=BattleManager[_0x9c6fcf(0x301)],BattleManager[_0x9c6fcf(0x301)]=function(){const _0x571a28=_0x9c6fcf;if(this[_0x571a28(0x53e)]())this[_0x571a28(0x194)]('PreStartTurnJS');VisuMZ['BattleCore']['BattleManager_startTurn']['call'](this);if(this[_0x571a28(0x53e)]())this[_0x571a28(0x194)](_0x571a28(0x54d));},BattleManager['processTurn']=function(){const _0x44ab9a=_0x9c6fcf,_0x1b0b3b=this[_0x44ab9a(0x3d7)],_0x57ee38=_0x1b0b3b[_0x44ab9a(0x9d5)]();_0x57ee38?(_0x57ee38[_0x44ab9a(0xa6c)](),_0x57ee38[_0x44ab9a(0x35b)]()?(this[_0x44ab9a(0x43a)](),_0x1b0b3b['removeCurrentAction']()):(_0x1b0b3b[_0x44ab9a(0x785)](),this['endAction']())):(this[_0x44ab9a(0x497)](),this[_0x44ab9a(0x3d7)]=null);},VisuMZ['BattleCore'][_0x9c6fcf(0xa48)]=BattleManager[_0x9c6fcf(0x43a)],BattleManager[_0x9c6fcf(0x43a)]=function(){const _0xdf49b3=_0x9c6fcf,_0x489844=this[_0xdf49b3(0x3d7)][_0xdf49b3(0x9d5)](),_0x295dc3=this[_0xdf49b3(0x3d7)];_0x489844&&_0x489844[_0xdf49b3(0x38c)]()===_0x295dc3&&_0x489844[_0xdf49b3(0x608)]('PreStartActionJS'),VisuMZ[_0xdf49b3(0x8f5)]['BattleManager_startAction']['call'](this),_0x489844&&_0x489844[_0xdf49b3(0x38c)]()===_0x295dc3&&_0x489844[_0xdf49b3(0x608)](_0xdf49b3(0x8fd));},VisuMZ[_0x9c6fcf(0x8f5)]['BattleManager_endAction']=BattleManager['endAction'],BattleManager[_0x9c6fcf(0x497)]=function(){const _0x8b57c3=_0x9c6fcf,_0x5d6650=this['_action'],_0x2b4168=this[_0x8b57c3(0x3d7)];_0x5d6650&&_0x5d6650!==this[_0x8b57c3(0x2a9)]&&_0x5d6650[_0x8b57c3(0x38c)]()===_0x2b4168&&_0x5d6650['actionBattleCoreJS']('PreEndActionJS'),this[_0x8b57c3(0x3d7)]?VisuMZ[_0x8b57c3(0x8f5)]['BattleManager_endAction']['call'](this):this[_0x8b57c3(0x9f3)]=_0x8b57c3(0x94d),_0x5d6650&&_0x5d6650!==this['_lastAction']&&_0x5d6650[_0x8b57c3(0x38c)]()===_0x2b4168&&_0x5d6650[_0x8b57c3(0x608)](_0x8b57c3(0x7c1)),this['refreshBattlerMotions'](this['allBattleMembers']()),this['_lastAction']=this[_0x8b57c3(0x9d9)];},BattleManager['refreshBattlerMotions']=function(_0x465fd3){const _0xc6f605=_0x9c6fcf;for(const _0x38cad4 of _0x465fd3){if(!_0x38cad4)continue;if(!_0x38cad4[_0xc6f605(0x338)]())continue;_0x38cad4[_0xc6f605(0x338)]()[_0xc6f605(0x24f)]();}},BattleManager[_0x9c6fcf(0xafc)]=function(){!this['_logWindow']['isBusy']()&&this['endAction']();},Game_Battler['prototype'][_0x9c6fcf(0x1f1)]=function(){const _0x37f7f1=_0x9c6fcf;this['clearResult']();if(Imported[_0x37f7f1(0x180)]){const _0x3074ee=VisuMZ[_0x37f7f1(0x450)][_0x37f7f1(0x19c)][_0x37f7f1(0x66a)];_0x3074ee&&_0x3074ee['ActionEndUpdate']===![]&&this[_0x37f7f1(0x384)](0x1);}else this[_0x37f7f1(0x384)](0x1);this[_0x37f7f1(0x4ac)]();},BattleManager[_0x9c6fcf(0x96e)]=function(){const _0x20e785=_0x9c6fcf;this['_escapeRatio']=VisuMZ['BattleCore'][_0x20e785(0x19c)][_0x20e785(0xb07)][_0x20e785(0x1fa)][_0x20e785(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x7a9)]=BattleManager['onEscapeSuccess'],BattleManager[_0x9c6fcf(0x491)]=function(){const _0x570af8=_0x9c6fcf;this[_0x570af8(0x194)](_0x570af8(0xadf)),BattleManager[_0x570af8(0x21f)][_0x570af8(0x289)](),VisuMZ[_0x570af8(0x8f5)][_0x570af8(0x7a9)]['call'](this),this[_0x570af8(0x990)](_0x570af8(0x75d));},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x7d3)]=BattleManager[_0x9c6fcf(0x985)],BattleManager['onEscapeFailure']=function(){const _0x5f0294=_0x9c6fcf;this[_0x5f0294(0x194)](_0x5f0294(0x5a9));const _0x28546b=this[_0x5f0294(0x4c8)];VisuMZ['BattleCore']['BattleManager_onEscapeFailure'][_0x5f0294(0x7df)](this),this[_0x5f0294(0x4c8)]=_0x28546b+VisuMZ[_0x5f0294(0x8f5)]['Settings'][_0x5f0294(0xb07)]['CalcEscapeRaiseJS']['call'](this),this[_0x5f0294(0x344)]=![],this[_0x5f0294(0x990)](_0x5f0294(0x9e9));},BattleManager[_0x9c6fcf(0x2a8)]=function(){const _0x3c8e77=_0x9c6fcf;let _0x3d3b76=![];if(this[_0x3c8e77(0x3ea)]())for(const _0x3876fe of $gameTroop[_0x3c8e77(0x8c4)]()){this['_logWindow'][_0x3c8e77(0x4c6)](_0x3c8e77(0x38a),TextManager['emerge'][_0x3c8e77(0x9da)](_0x3876fe)),this[_0x3c8e77(0x3d6)][_0x3c8e77(0x4c6)](_0x3c8e77(0x396)),_0x3d3b76=!![];}if(this[_0x3c8e77(0x79a)])this[_0x3c8e77(0x3d6)]['push'](_0x3c8e77(0x38a),TextManager[_0x3c8e77(0xa92)][_0x3c8e77(0x9da)]($gameParty[_0x3c8e77(0x613)]())),this['_logWindow'][_0x3c8e77(0x4c6)]('wait');else this[_0x3c8e77(0x56e)]&&(this[_0x3c8e77(0x3d6)][_0x3c8e77(0x4c6)](_0x3c8e77(0x38a),TextManager[_0x3c8e77(0x51c)][_0x3c8e77(0x9da)]($gameParty[_0x3c8e77(0x613)]())),this['_logWindow'][_0x3c8e77(0x4c6)](_0x3c8e77(0x396)));_0x3d3b76&&(this[_0x3c8e77(0x3d6)][_0x3c8e77(0x4c6)](_0x3c8e77(0x396)),this[_0x3c8e77(0x3d6)][_0x3c8e77(0x4c6)](_0x3c8e77(0x4ec))),this[_0x3c8e77(0x89e)]()&&this[_0x3c8e77(0x13f)]()&&(this[_0x3c8e77(0x7d2)]=![]);},BattleManager[_0x9c6fcf(0x3ea)]=function(){const _0x2a04e6=_0x9c6fcf;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x2a04e6(0x8f5)][_0x2a04e6(0x19c)][_0x2a04e6(0x7b3)]['EmergeText'];},VisuMZ['BattleCore'][_0x9c6fcf(0x3d3)]=BattleManager[_0x9c6fcf(0x7ba)],BattleManager[_0x9c6fcf(0x7ba)]=function(){const _0x1af053=_0x9c6fcf;VisuMZ[_0x1af053(0x8f5)][_0x1af053(0x3d3)][_0x1af053(0x7df)](this),this[_0x1af053(0x605)]()&&this[_0x1af053(0x13f)]()&&!this['_surprise']&&$gameParty[_0x1af053(0x397)]()&&this['selectNextCommand']();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x16f18f=_0x9c6fcf;return VisuMZ[_0x16f18f(0x8f5)][_0x16f18f(0x19c)][_0x16f18f(0x3c0)][_0x16f18f(0x71e)];},BattleManager[_0x9c6fcf(0xab3)]=function(){const _0x590300=_0x9c6fcf;this[_0x590300(0x3bb)]()&&this[_0x590300(0x7d4)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x609)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x609)]=function(){const _0x575226=_0x9c6fcf;VisuMZ['BattleCore'][_0x575226(0x9f5)][_0x575226(0x7df)](this),BattleManager[_0x575226(0x89e)]()&&BattleManager[_0x575226(0x7d2)]&&(BattleManager[_0x575226(0x7d2)]=![],this[_0x575226(0x926)]());},BattleManager['emulateAction']=function(_0x117375,_0x53ceb5,_0x3bd0cc){const _0x9d67ad=_0x9c6fcf;if(!_0x3bd0cc)return;if(!_0x117375)return;if(!_0x53ceb5)return;const _0x3cbecc=this['_action'];this[_0x9d67ad(0x9d9)]=new Game_Action(_0x117375);if(DataManager[_0x9d67ad(0x7ea)](_0x3bd0cc))this[_0x9d67ad(0x9d9)][_0x9d67ad(0x7ab)](_0x3bd0cc['id']);if(DataManager[_0x9d67ad(0x52e)](_0x3bd0cc))this[_0x9d67ad(0x9d9)][_0x9d67ad(0xb34)](_0x3bd0cc['id']);if(this[_0x9d67ad(0x9d9)][_0x9d67ad(0x9d3)]())BattleManager[_0x9d67ad(0x336)](_0x117375,_0x53ceb5);this[_0x9d67ad(0x9d9)]=_0x3cbecc;},BattleManager['invokeMagicReflection']=function(_0x52c814,_0x1dd882){const _0x34bb04=_0x9c6fcf;this['_action']['_reflectionTarget']=_0x1dd882,this[_0x34bb04(0x3d6)][_0x34bb04(0x78a)](_0x1dd882),this['_logWindow'][_0x34bb04(0x251)](_0x52c814,this[_0x34bb04(0x9d9)]),this[_0x34bb04(0x9d9)][_0x34bb04(0xa4c)](_0x52c814),this[_0x34bb04(0x3d6)][_0x34bb04(0x556)](_0x52c814,_0x52c814);},VisuMZ[_0x9c6fcf(0x8f5)]['BattleManager_makeActionOrders']=BattleManager[_0x9c6fcf(0x8db)],BattleManager['makeActionOrders']=function(){const _0x304de1=_0x9c6fcf;VisuMZ[_0x304de1(0x8f5)][_0x304de1(0x1ba)][_0x304de1(0x7df)](this),this[_0x304de1(0x8de)]=this[_0x304de1(0x8de)][_0x304de1(0x4e3)](_0x418f17=>_0x418f17&&_0x418f17[_0x304de1(0x6a0)]());},VisuMZ[_0x9c6fcf(0x8f5)]['BattleManager_updatePhase']=BattleManager['updatePhase'],BattleManager[_0x9c6fcf(0x92b)]=function(_0x12ba68){const _0x29b5cc=_0x9c6fcf;if(this[_0x29b5cc(0x9f3)]===_0x29b5cc(0x360))this['updateCustomActionSequence']();else this[_0x29b5cc(0x9f3)]===_0x29b5cc(0x1f5)?this[_0x29b5cc(0x8ed)]():VisuMZ[_0x29b5cc(0x8f5)][_0x29b5cc(0x989)][_0x29b5cc(0x7df)](this,_0x12ba68);},BattleManager[_0x9c6fcf(0x701)]=function(){const _0x2b2c11=_0x9c6fcf;this[_0x2b2c11(0x14e)]=this[_0x2b2c11(0x632)][_0x2b2c11(0x237)](0x0),this[_0x2b2c11(0x3c4)]=0x0,this[_0x2b2c11(0xaee)]=this[_0x2b2c11(0x14e)][0x0]||null,this[_0x2b2c11(0x9f3)]=_0x2b2c11(0x360);},BattleManager[_0x9c6fcf(0x9ef)]=function(){const _0x3f39d1=_0x9c6fcf;!this[_0x3f39d1(0x530)]()&&!this[_0x3f39d1(0x3d6)][_0x3f39d1(0x441)]()&&(this['_phase']='action');},BattleManager[_0x9c6fcf(0x1f5)]=function(_0x31ef7c){const _0x2f9e9a=_0x9c6fcf;this['_actionBattlers'][_0x2f9e9a(0x7e5)](_0x31ef7c);if(_0x31ef7c===this[_0x2f9e9a(0x3d7)])return;const _0x4bb724=JsonEx[_0x2f9e9a(0x9ce)](_0x31ef7c[_0x2f9e9a(0x9d5)]());this[_0x2f9e9a(0xb64)][_0x2f9e9a(0x4c6)]([_0x31ef7c,_0x4bb724]);},BattleManager[_0x9c6fcf(0x40b)]=function(){},BattleManager[_0x9c6fcf(0x63b)]=function(){const _0x16ee6c=_0x9c6fcf;if(this['isTpb']())this[_0x16ee6c(0x9f3)]=_0x16ee6c(0x94d);else this['_forcedBattlers'][_0x16ee6c(0x88e)]>0x0?this[_0x16ee6c(0x9f3)]=_0x16ee6c(0x94d):this[_0x16ee6c(0x7ba)]();},BattleManager[_0x9c6fcf(0x860)]=function(){const _0x109305=_0x9c6fcf,_0xb6ac6=this[_0x109305(0x3d7)];_0xb6ac6&&this[_0x109305(0x89e)]()&&_0xb6ac6[_0x109305(0x32b)](_0x109305(0x6e4));for(;;){const _0xd1b5b0=this['getNextSubjectFromPool']();if(!_0xd1b5b0)return null;if(_0xd1b5b0['isBattleMember']()&&_0xd1b5b0[_0x109305(0x69e)]())return _0xd1b5b0;}},BattleManager[_0x9c6fcf(0xb21)]=function(){const _0x29db87=_0x9c6fcf;if(this['_forcedBattlers'][_0x29db87(0x88e)]>0x0){const _0x508f2d=this[_0x29db87(0xb64)][_0x29db87(0x9d7)](),_0x57dfff=_0x508f2d[0x0];return _0x57dfff[_0x29db87(0x8ab)]=_0x57dfff[_0x29db87(0x8ab)]||[],_0x57dfff[_0x29db87(0x8ab)][0x0]=_0x508f2d[0x1],_0x57dfff;}else return this['_actionBattlers'][_0x29db87(0x9d7)]();},VisuMZ['BattleCore'][_0x9c6fcf(0x23e)]=Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1f5)],Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1f5)]=function(_0x1dbd9b,_0x434daa){const _0x609349=_0x9c6fcf;VisuMZ['BattleCore']['Game_Battler_forceAction'][_0x609349(0x7df)](this,_0x1dbd9b,_0x434daa),this['_actions'][this[_0x609349(0x8ab)][_0x609349(0x88e)]-0x1][_0x609349(0x149)]=!![];},Game_Interpreter['prototype'][_0x9c6fcf(0x44f)]=function(_0x29cc44){const _0x4bf0fd=_0x9c6fcf;return this[_0x4bf0fd(0xad5)](_0x29cc44[0x0],_0x29cc44[0x1],_0x1794fe=>{const _0x6f12c4=_0x4bf0fd;!_0x1794fe[_0x6f12c4(0x70b)]()&&(_0x1794fe[_0x6f12c4(0x1f5)](_0x29cc44[0x2],_0x29cc44[0x3]),BattleManager[_0x6f12c4(0x1f5)](_0x1794fe));}),!![];},VisuMZ['BattleCore'][_0x9c6fcf(0x47b)]=Game_Battler[_0x9c6fcf(0x1ef)]['makeSpeed'],Game_Battler['prototype'][_0x9c6fcf(0x15a)]=function(){const _0x5e5435=_0x9c6fcf;VisuMZ[_0x5e5435(0x8f5)][_0x5e5435(0x47b)][_0x5e5435(0x7df)](this),this[_0x5e5435(0x8ab)][_0x5e5435(0x88e)]<=0x0&&(this[_0x5e5435(0x42c)]=Number[_0x5e5435(0x6f8)]);},BattleManager[_0x9c6fcf(0x3d4)]=function(){const _0x4092e2=_0x9c6fcf;if(VisuMZ[_0x4092e2(0x8f5)][_0x4092e2(0x19c)][_0x4092e2(0x9a9)][_0x4092e2(0x55f)]??!![])return![];return SceneManager[_0x4092e2(0x319)]()&&this['_endingBattle'];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xb3f)]=BattleManager['selectNextCommand'],BattleManager[_0x9c6fcf(0x7d4)]=function(){const _0x30d474=_0x9c6fcf;this['isTpb']()?this[_0x30d474(0x668)]():VisuMZ[_0x30d474(0x8f5)][_0x30d474(0xb3f)][_0x30d474(0x7df)](this);},BattleManager[_0x9c6fcf(0x668)]=function(){const _0x127fd7=_0x9c6fcf;if(this[_0x127fd7(0x380)]){if(this[_0x127fd7(0x380)][_0x127fd7(0x7d4)]())return;this['finishActorInput'](),this['checkTpbInputClose'](),!this[_0x127fd7(0x3d7)]&&!this[_0x127fd7(0x380)]&&SceneManager[_0x127fd7(0x90f)]['updateBattleProcess']();}else!this[_0x127fd7(0x3d7)]&&this[_0x127fd7(0x15d)]();},BattleManager[_0x9c6fcf(0x9c0)]=function(){const _0x44819c=_0x9c6fcf;(!this[_0x44819c(0x3bb)]()||this['needsActorInputCancel']())&&(this['_tpbSceneChangeCacheActor']&&(!$gameParty[_0x44819c(0x14b)]()[_0x44819c(0x765)](this[_0x44819c(0xb44)])&&(this[_0x44819c(0xb44)]=null)),!this['_tpbSceneChangeCacheActor']?(this[_0x44819c(0x1ec)](),this['_currentActor']=null,this[_0x44819c(0x344)]=![]):this['revertTpbCachedActor']());},BattleManager[_0x9c6fcf(0x47c)]=function(){const _0xfcc633=_0x9c6fcf;!$gameParty['battleMembers']()[_0xfcc633(0x765)](this[_0xfcc633(0xb44)])&&(this['_tpbSceneChangeCacheActor']=null),this[_0xfcc633(0xb44)]?(this['_currentActor']=this[_0xfcc633(0xb44)],this[_0xfcc633(0x380)]['_tpbState']='charged',this[_0xfcc633(0x344)]=!![],this[_0xfcc633(0xb44)]=null):(this[_0xfcc633(0x1ec)](),this[_0xfcc633(0x380)]=null,this['_inputting']=![]);},VisuMZ[_0x9c6fcf(0x8f5)]['BattleManager_isTpbMainPhase']=BattleManager[_0x9c6fcf(0x383)],BattleManager[_0x9c6fcf(0x383)]=function(){const _0x25247b=_0x9c6fcf;return this[_0x25247b(0x9f3)]===_0x25247b(0x360)?this[_0x25247b(0x2cf)]():VisuMZ[_0x25247b(0x8f5)][_0x25247b(0x6c8)][_0x25247b(0x7df)](this);},BattleManager[_0x9c6fcf(0x2cf)]=function(){return this['isActiveTpb']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x935)]=BattleManager['cancelActorInput'],BattleManager['cancelActorInput']=function(){const _0x98eab=_0x9c6fcf;this[_0x98eab(0x89e)]()&&this['_phase']==='battleEnd'&&(this[_0x98eab(0x380)]=null),VisuMZ[_0x98eab(0x8f5)][_0x98eab(0x935)][_0x98eab(0x7df)](this);},VisuMZ['BattleCore']['BattleManager_inputtingAction']=BattleManager[_0x9c6fcf(0x356)],BattleManager[_0x9c6fcf(0x356)]=function(){const _0x1027df=_0x9c6fcf,_0x6727aa=this['_currentActor'];if(_0x6727aa&&!_0x6727aa['inputtingAction']()){const _0x39d34f=_0x6727aa['_actionInputIndex'];_0x6727aa[_0x1027df(0x8ab)][_0x39d34f]=new Game_Action(_0x6727aa);}return VisuMZ['BattleCore'][_0x1027df(0x56a)][_0x1027df(0x7df)](this);},VisuMZ['BattleCore'][_0x9c6fcf(0x437)]=BattleManager['checkSubstitute'],BattleManager[_0x9c6fcf(0x4c2)]=function(_0x2099d1){const _0xb9aedc=_0x9c6fcf;if(this[_0xb9aedc(0x9d9)]['isForFriend']())return![];return VisuMZ[_0xb9aedc(0x8f5)]['BattleManager_checkSubstitute'][_0xb9aedc(0x7df)](this,_0x2099d1);},SceneManager['isSceneBattle']=function(){const _0x5590ee=_0x9c6fcf;return this[_0x5590ee(0x90f)]&&this[_0x5590ee(0x90f)][_0x5590ee(0x788)]===Scene_Battle;},SceneManager[_0x9c6fcf(0x980)]=function(){return Spriteset_Battle['prototype']['isFlipped']();},SceneManager[_0x9c6fcf(0x678)]=function(){const _0x20e13c=_0x9c6fcf;if(SceneManager[_0x20e13c(0x87f)](Scene_Options))return!![];return![];},SceneManager[_0x9c6fcf(0x4da)]=function(){const _0x1a21fd=_0x9c6fcf;if(SceneManager[_0x1a21fd(0x6d7)](Scene_Options))return!![];return![];},SceneManager[_0x9c6fcf(0x818)]=function(_0x70a620){const _0x45ca93=_0x9c6fcf;if(!SceneManager[_0x45ca93(0x319)]())return!![];const _0x21bf04=[_0x45ca93(0x57c),_0x45ca93(0x183),_0x45ca93(0x419)];return _0x21bf04[_0x45ca93(0x765)](_0x70a620[_0x45ca93(0x613)]);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x8f0)]=SceneManager[_0x9c6fcf(0x4c6)],SceneManager['push']=function(_0x38d1a4){const _0x1b227b=_0x9c6fcf;if(!SceneManager['checkSceneBattleTransitionable'](_0x38d1a4))return this[_0x1b227b(0x65f)](_0x38d1a4);VisuMZ[_0x1b227b(0x8f5)][_0x1b227b(0x8f0)][_0x1b227b(0x7df)](this,_0x38d1a4);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x36ff65){const _0x2b0c69=_0x9c6fcf;if(!$gameTemp[_0x2b0c69(0x23f)]())return;if(this[_0x2b0c69(0x19b)])return;this[_0x2b0c69(0x19b)]=!![];let _0xbec3ff='';_0xbec3ff+=_0x2b0c69(0x46f),_0xbec3ff+=_0x2b0c69(0x988)[_0x2b0c69(0x9da)](_0x36ff65['name']),alert(_0xbec3ff);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x32e)]=Game_Temp[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)],Game_Temp[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(){const _0xac66a6=_0x9c6fcf;VisuMZ[_0xac66a6(0x8f5)][_0xac66a6(0x32e)][_0xac66a6(0x7df)](this),this[_0xac66a6(0x9d0)]=[];},VisuMZ['BattleCore'][_0x9c6fcf(0x2b6)]=Game_Temp['prototype']['requestAnimation'],Game_Temp[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c6)]=function(_0x405b75,_0x4b7410,_0x44a192){const _0x213e27=_0x9c6fcf;_0x405b75=_0x405b75[_0x213e27(0x4e3)]((_0x3379c3,_0xa3e62b,_0x3d6580)=>_0x3d6580[_0x213e27(0x9c4)](_0x3379c3)===_0xa3e62b);SceneManager['isSceneBattle']()&&SceneManager[_0x213e27(0x980)]()&&(_0x44a192=!_0x44a192);VisuMZ[_0x213e27(0x8f5)][_0x213e27(0x2b6)]['call'](this,_0x405b75,_0x4b7410,_0x44a192);SceneManager[_0x213e27(0x319)]()&&BattleManager['_spriteset']['processAnimationRequests']();for(const _0x3cdb10 of _0x405b75){_0x3cdb10&&_0x3cdb10[_0x213e27(0x3fd)]&&_0x3cdb10[_0x213e27(0x3fd)]()&&_0x3cdb10[_0x213e27(0x71b)]();}},Game_Temp['prototype'][_0x9c6fcf(0x776)]=function(_0x4dabd4){const _0x496e26=_0x9c6fcf;this[_0x496e26(0x9c5)]=_0x4dabd4;},Game_Temp['prototype'][_0x9c6fcf(0x970)]=function(){const _0xa3685b=_0x9c6fcf;return this[_0xa3685b(0x9c5)];},Game_Temp[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x639)]=function(){const _0x53569f=_0x9c6fcf;this[_0x53569f(0x7fc)]=undefined;},Game_Temp[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5eb)]=function(_0x3f393f){const _0xcae9aa=_0x9c6fcf;$gameMap&&$dataMap&&$dataMap[_0xcae9aa(0x468)]&&this[_0xcae9aa(0x2d7)]($dataMap['note']);const _0x476176=$dataTroops[_0x3f393f];if(_0x476176){let _0x372063=DataManager[_0xcae9aa(0x67b)](_0x476176['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x372063);}},Game_Temp[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2d7)]=function(_0x3d0ea8){const _0x30c05a=_0x9c6fcf;if(!_0x3d0ea8)return;if(_0x3d0ea8['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x49687c=String(RegExp['$1']);if(_0x49687c[_0x30c05a(0x3c6)](/DEFAULT/i))this[_0x30c05a(0x7fc)]=_0x30c05a(0x295);else{if(_0x49687c[_0x30c05a(0x3c6)](/LIST/i))this['_forcedBattleLayout']='list';else{if(_0x49687c[_0x30c05a(0x3c6)](/XP/i))this[_0x30c05a(0x7fc)]='xp';else{if(_0x49687c[_0x30c05a(0x3c6)](/PORTRAIT/i))this[_0x30c05a(0x7fc)]=_0x30c05a(0x7c0);else{if(_0x49687c[_0x30c05a(0x3c6)](/BORDER/i))this[_0x30c05a(0x7fc)]='border';else{if(_0x49687c[_0x30c05a(0x3c6)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x30c05a(0xa89)]?this['_forcedBattleLayout']='sideview_ui':this[_0x30c05a(0x7fc)]=_0x30c05a(0x295);else _0x49687c['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x30c05a(0x446)]?this[_0x30c05a(0x7fc)]=_0x30c05a(0x365):this[_0x30c05a(0x7fc)]=_0x30c05a(0x295));}}}}}}},VisuMZ['BattleCore']['Game_Temp_requestBalloon']=Game_Temp['prototype']['requestBalloon'],Game_Temp[_0x9c6fcf(0x1ef)]['requestBalloon']=function(_0x50b22c,_0x41d09c){const _0x26e40e=_0x9c6fcf;SceneManager[_0x26e40e(0x319)]()?this[_0x26e40e(0x700)](_0x50b22c,_0x41d09c):VisuMZ[_0x26e40e(0x8f5)][_0x26e40e(0x157)][_0x26e40e(0x7df)](this,_0x50b22c,_0x41d09c);},Game_Temp['prototype'][_0x9c6fcf(0x700)]=function(_0x33df1c,_0x3ea068){const _0x23d007=_0x9c6fcf,_0x65a706={'target':_0x33df1c,'balloonId':_0x3ea068};this['_battleBalloonQueue']=this[_0x23d007(0x9d0)]||[],this[_0x23d007(0x9d0)]['push'](_0x65a706);},Game_Temp[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x744)]=function(){const _0x3928a3=_0x9c6fcf;return this['_battleBalloonQueue']=this[_0x3928a3(0x9d0)]||[],this[_0x3928a3(0x9d0)][_0x3928a3(0x9d7)]();},Game_Temp[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x24d)]=function(){const _0x1114fd=_0x9c6fcf;this[_0x1114fd(0x9d0)]=[];},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaae)]=function(){const _0x43b9ad=_0x9c6fcf;this['_battleBalloonSprites']===undefined&&(this[_0x43b9ad(0x925)]=[]);for(const _0x286b90 of this[_0x43b9ad(0x925)]){!_0x286b90[_0x43b9ad(0x4aa)]()&&this[_0x43b9ad(0x5ae)](_0x286b90);}this[_0x43b9ad(0x903)]();},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x903)]=function(){const _0x1d6aa7=_0x9c6fcf;for(;;){const _0xf09245=$gameTemp[_0x1d6aa7(0x744)]();if(_0xf09245)this[_0x1d6aa7(0xad2)](_0xf09245);else break;}},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xad2)]=function(_0x33a9e7){const _0x599fd3=_0x9c6fcf,_0x47cfe1=this[_0x599fd3(0xb60)](_0x33a9e7['target']);if(_0x47cfe1){let _0x12e0fe=null;Imported[_0x599fd3(0x911)]&&Array[_0x599fd3(0x850)](_0x33a9e7[_0x599fd3(0xa9e)])?_0x12e0fe=new Sprite_IconBalloon():_0x12e0fe=new Sprite_Balloon(),_0x12e0fe[_0x599fd3(0x675)]=_0x33a9e7[_0x599fd3(0x1b3)],_0x12e0fe[_0x599fd3(0xaee)]=_0x47cfe1,_0x12e0fe[_0x599fd3(0xaee)][_0x599fd3(0x31a)]=_0x47cfe1,_0x12e0fe[_0x599fd3(0xa66)](_0x47cfe1,_0x33a9e7[_0x599fd3(0xa9e)]),BattleManager[_0x599fd3(0x9c9)](_0x12e0fe),this[_0x599fd3(0x925)][_0x599fd3(0x4c6)](_0x12e0fe);}},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ae)]=function(_0x1c9d6c){const _0x514488=_0x9c6fcf;this['_battleBalloonSprites'][_0x514488(0x7e5)](_0x1c9d6c),BattleManager['removeChildFromUiContainer'](_0x1c9d6c),_0x1c9d6c[_0x514488(0x209)]();},Sprite_Battler[_0x9c6fcf(0x1ef)]['setBalloonPose']=function(_0x4fff56,_0x3de888){},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x640)]=function(){return![];},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8d6)]=function(){const _0x51ffcf=_0x9c6fcf;return this[_0x51ffcf(0x925)]=this[_0x51ffcf(0x925)]||[],this[_0x51ffcf(0x925)][_0x51ffcf(0x88e)]>0x0;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x82e)]=Game_System[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)],Game_System[_0x9c6fcf(0x1ef)]['initialize']=function(){const _0x3985a4=_0x9c6fcf;VisuMZ['BattleCore'][_0x3985a4(0x82e)][_0x3985a4(0x7df)](this),this['initBattleCore']();},Game_System[_0x9c6fcf(0x1ef)]['initBattleCore']=function(){const _0x18e12b=_0x9c6fcf;this[_0x18e12b(0x2f6)]=this[_0x18e12b(0x2f6)]||[];},Game_System['prototype'][_0x9c6fcf(0x3f9)]=function(){const _0x1eeeb4=_0x9c6fcf;if(this[_0x1eeeb4(0x2f6)]===undefined)this[_0x1eeeb4(0x5b0)]();return this[_0x1eeeb4(0x2f6)];},Game_System[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x45e)]=function(_0x546f81){const _0x1a4a7d=_0x9c6fcf;if(this[_0x1a4a7d(0x2f6)]===undefined)this[_0x1a4a7d(0x5b0)]();if(!_0x546f81)return;if(this[_0x1a4a7d(0x2f6)][_0x1a4a7d(0x765)](_0x546f81))return;this[_0x1a4a7d(0x2f6)][_0x1a4a7d(0x4c6)](_0x546f81),this['_defeatedEnemies'][_0x1a4a7d(0xa79)]((_0x387cc4,_0x3aaedb)=>_0x387cc4-_0x3aaedb);},VisuMZ['BattleCore']['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x60e)],Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x60e)]=function(_0x505124){const _0x3b22ac=_0x9c6fcf,_0xf52fd8=this[_0x3b22ac(0x69e)](),_0x4945c6=this[_0x3b22ac(0x6dd)]();VisuMZ['BattleCore']['Game_BattlerBase_addNewState'][_0x3b22ac(0x7df)](this,_0x505124),this[_0x3b22ac(0x3fd)]()&&_0xf52fd8&&this[_0x3b22ac(0xb27)]()&&(this[_0x3b22ac(0x27f)]=!this[_0x3b22ac(0x680)](),$gameSystem[_0x3b22ac(0x45e)](this[_0x3b22ac(0x26d)]())),SceneManager[_0x3b22ac(0x319)]()&&_0x4945c6!==this[_0x3b22ac(0x6dd)]()&&(this[_0x3b22ac(0x338)]()&&this['battler']()[_0x3b22ac(0x24f)]());},Game_Enemy['prototype']['hasBeenDefeatedBefore']=function(){const _0x63993f=_0x9c6fcf;return $gameSystem[_0x63993f(0x3f9)]()[_0x63993f(0x765)](this[_0x63993f(0x997)]);},VisuMZ['BattleCore'][_0x9c6fcf(0x4f1)]=Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x71a)],Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x71a)]=function(_0x23505c){const _0x30749d=_0x9c6fcf;VisuMZ[_0x30749d(0x8f5)][_0x30749d(0x4f1)][_0x30749d(0x7df)](this,_0x23505c),this[_0x30749d(0x3fd)]()&&_0x23505c===this['deathStateId']()&&this[_0x30749d(0x69e)]()&&(this[_0x30749d(0x27f)]=![]),!this['_tempActor']&&!this[_0x30749d(0x6fe)]&&SceneManager['isSceneBattle']()&&this['requestMotionRefresh']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x836)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4ec)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4ec)]=function(){const _0x4b5bdd=_0x9c6fcf;VisuMZ[_0x4b5bdd(0x8f5)]['Game_Action_clear'][_0x4b5bdd(0x7df)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4b5bdd(0x445)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4b5bdd(0x7e7)]='default',this[_0x4b5bdd(0x544)]();},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x544)]=function(){const _0x310b7a=_0x9c6fcf;this[_0x310b7a(0xa9f)]='';},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Action_setSubject']=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x28f)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x28f)]=function(_0x72414b){const _0xf999aa=_0x9c6fcf;VisuMZ[_0xf999aa(0x8f5)][_0xf999aa(0xa33)][_0xf999aa(0x7df)](this,_0x72414b),this[_0xf999aa(0x544)]();},VisuMZ['BattleCore'][_0x9c6fcf(0x21e)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb34)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb34)]=function(_0x3db08b){const _0x3ba5c6=_0x9c6fcf;VisuMZ[_0x3ba5c6(0x8f5)][_0x3ba5c6(0x21e)][_0x3ba5c6(0x7df)](this,_0x3db08b),this['clearTargetBattlerKey']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x820)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7ab)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7ab)]=function(_0xb9215){const _0x517ba9=_0x9c6fcf;VisuMZ[_0x517ba9(0x8f5)]['Game_Action_setItem'][_0x517ba9(0x7df)](this,_0xb9215),this[_0x517ba9(0x544)]();},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x59e)]=function(_0x16981c,_0x5f5a42){const _0x59f4dd=_0x9c6fcf;return VisuMZ['BattleCore'][_0x59f4dd(0x19c)][_0x59f4dd(0x9a9)][_0x59f4dd(0x828)][_0x59f4dd(0x7df)](this,_0x16981c,_0x5f5a42);},Game_Action['prototype'][_0x9c6fcf(0x4f3)]=function(_0x141872,_0x183937){const _0x226db0=_0x9c6fcf;return VisuMZ[_0x226db0(0x8f5)][_0x226db0(0x19c)]['Damage'][_0x226db0(0x77a)][_0x226db0(0x7df)](this,_0x141872,_0x183937);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4d2)]=function(_0x4f09e7,_0x430e30){const _0x55f387=_0x9c6fcf;return VisuMZ[_0x55f387(0x8f5)]['Settings']['Damage'][_0x55f387(0xaa1)][_0x55f387(0x7df)](this,_0x4f09e7,_0x430e30);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x66e)]=Game_Action[_0x9c6fcf(0x1ef)]['itemHit'],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x37b)]=function(_0x1a1edd){const _0x3c96db=_0x9c6fcf,_0x42955c=this[_0x3c96db(0x9d3)]()[_0x3c96db(0x468)];if(_0x42955c['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x42955c[_0x3c96db(0x3c6)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x2d3ed9=VisuMZ[_0x3c96db(0x8f5)][_0x3c96db(0x66e)][_0x3c96db(0x7df)](this,_0x1a1edd);return _0x2d3ed9=this['_multipliers'][_0x3c96db(0x9cc)]*_0x2d3ed9+this[_0x3c96db(0x445)][_0x3c96db(0x81d)],$gameParty[_0x3c96db(0x69a)]()&&(_0x2d3ed9=this[_0x3c96db(0x32a)](_0x2d3ed9,_0x1a1edd)),_0x2d3ed9;}}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x283)]=Game_Action['prototype'][_0x9c6fcf(0x1a5)],Game_Action['prototype'][_0x9c6fcf(0x1a5)]=function(_0x44079c){const _0x1b9263=_0x9c6fcf;this[_0x1b9263(0x14f)]=!![],VisuMZ['BattleCore'][_0x1b9263(0x283)][_0x1b9263(0x7df)](this,_0x44079c),this[_0x1b9263(0x14f)]=undefined;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x350)]=function(_0x33e75b){const _0x1bd47e=_0x9c6fcf;window[_0x1bd47e(0x7da)]=this,window['a']=this['subject'](),window['b']=_0x33e75b,window[_0x1bd47e(0x8a0)]=this['subject'](),window['target']=_0x33e75b,window[_0x1bd47e(0x3f6)]=this[_0x1bd47e(0x9d3)](),window[_0x1bd47e(0x3c5)]=this[_0x1bd47e(0x9d3)](),window[_0x1bd47e(0x9d3)]=this[_0x1bd47e(0x9d3)]();},Game_Action['prototype'][_0x9c6fcf(0xb28)]=function(_0x35081e){const _0x4803f8=_0x9c6fcf;window[_0x4803f8(0x7da)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x4803f8(0x8a0)]=undefined,window[_0x4803f8(0x1b3)]=undefined,window[_0x4803f8(0x3f6)]=undefined,window[_0x4803f8(0x3c5)]=undefined,window[_0x4803f8(0x9d3)]=undefined;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32a)]=function(_0x20aabd,_0x372d54){const _0x7ef3fa=_0x9c6fcf;if(this['_bypass_applyBattleCoreHitRateJS'])return _0x20aabd;this[_0x7ef3fa(0x350)](_0x372d54);if(this[_0x7ef3fa(0x9d3)]()){let _0x4800ca=VisuMZ['BattleCore'][_0x7ef3fa(0x6a3)](this[_0x7ef3fa(0x9d3)](),_0x7ef3fa(0x986));VisuMZ[_0x7ef3fa(0x8f5)]['JS'][_0x4800ca]&&(_0x20aabd=VisuMZ['BattleCore']['JS'][_0x4800ca][_0x7ef3fa(0x7df)](this,this[_0x7ef3fa(0x38c)](),_0x372d54,this[_0x7ef3fa(0x9d3)](),_0x20aabd));}for(const _0x4db9aa of this[_0x7ef3fa(0x38c)]()[_0x7ef3fa(0x38b)]()){if(!_0x4db9aa)continue;key=VisuMZ['BattleCore']['createKeyJS'](_0x4db9aa,_0x7ef3fa(0x5a2)),VisuMZ[_0x7ef3fa(0x8f5)]['JS'][key]&&(_0x20aabd=VisuMZ[_0x7ef3fa(0x8f5)]['JS'][key]['call'](this,this[_0x7ef3fa(0x38c)](),_0x372d54,this['item'](),_0x20aabd));}for(const _0x343faa of _0x372d54[_0x7ef3fa(0x38b)]()){if(!_0x343faa)continue;key=VisuMZ[_0x7ef3fa(0x8f5)]['createKeyJS'](_0x343faa,_0x7ef3fa(0x151)),VisuMZ[_0x7ef3fa(0x8f5)]['JS'][key]&&(_0x20aabd=VisuMZ['BattleCore']['JS'][key]['call'](this,this[_0x7ef3fa(0x38c)](),_0x372d54,this[_0x7ef3fa(0x9d3)](),_0x20aabd));}return this['clearGlobalVariables'](_0x372d54),_0x20aabd;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x746)]=function(_0x5b32db){const _0x42117c=_0x9c6fcf;if(!this[_0x42117c(0x9d3)]()[_0x42117c(0x6ea)][_0x42117c(0x388)])return 0x0;let _0x286c1d=VisuMZ['BattleCore'][_0x42117c(0x19c)][_0x42117c(0x9a9)][_0x42117c(0x8f1)][_0x42117c(0x7df)](this,_0x5b32db);return _0x286c1d=this[_0x42117c(0x445)][_0x42117c(0xadc)]*_0x286c1d+this[_0x42117c(0x445)][_0x42117c(0x6ee)],$gameParty[_0x42117c(0x69a)]()&&(_0x286c1d=this[_0x42117c(0x40e)](_0x286c1d,_0x5b32db)),_0x286c1d;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x40e)]=function(_0x1775f1,_0x497ec1){const _0x4609c0=_0x9c6fcf;this[_0x4609c0(0x350)](_0x497ec1),window[_0x4609c0(0x5c3)]=_0x1775f1;{const _0x4e9165=this[_0x4609c0(0x38c)]()[_0x4609c0(0x38b)]();for(const _0x57b45a of _0x4e9165){if(!_0x57b45a)continue;if(_0x57b45a[_0x4609c0(0x468)][_0x4609c0(0x3c6)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x127204=String(RegExp['$1']);try{eval(_0x127204);}catch(_0x1be42e){if($gameTemp[_0x4609c0(0x23f)]())console['log'](_0x1be42e);}}}}{const _0x2ebca9=_0x497ec1[_0x4609c0(0x38b)]();for(const _0xc9829a of _0x2ebca9){if(!_0xc9829a)continue;if(_0xc9829a[_0x4609c0(0x468)]['match'](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x3faf1f=String(RegExp['$1']);try{eval(_0x3faf1f);}catch(_0x1f8136){if($gameTemp['isPlaytest']())console[_0x4609c0(0x2ae)](_0x1f8136);}}}}return _0x1775f1=window[_0x4609c0(0x5c3)],this[_0x4609c0(0xb28)](_0x497ec1),_0x1775f1;},Game_Action['prototype'][_0x9c6fcf(0x40e)]=function(_0x155fb9,_0x40f9d6){const _0x3df76a=_0x9c6fcf;this['declareGlobalVariables'](_0x40f9d6);for(const _0x2c196a of this['subject']()['traitObjects']()){if(!_0x2c196a)continue;key=VisuMZ['BattleCore'][_0x3df76a(0x6a3)](_0x2c196a,_0x3df76a(0x7af)),VisuMZ[_0x3df76a(0x8f5)]['JS'][key]&&(_0x155fb9=VisuMZ[_0x3df76a(0x8f5)]['JS'][key][_0x3df76a(0x7df)](this,this['subject'](),_0x40f9d6,this[_0x3df76a(0x9d3)](),_0x155fb9));}for(const _0x399a0d of _0x40f9d6['traitObjects']()){if(!_0x399a0d)continue;key=VisuMZ[_0x3df76a(0x8f5)][_0x3df76a(0x6a3)](_0x399a0d,_0x3df76a(0xa22)),VisuMZ[_0x3df76a(0x8f5)]['JS'][key]&&(_0x155fb9=VisuMZ[_0x3df76a(0x8f5)]['JS'][key]['call'](this,this[_0x3df76a(0x38c)](),_0x40f9d6,this[_0x3df76a(0x9d3)](),_0x155fb9));}return this['clearGlobalVariables'](_0x40f9d6),_0x155fb9;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x983)]=function(_0x3ce8a6){const _0x4b47c0=_0x9c6fcf;return _0x3ce8a6=VisuMZ[_0x4b47c0(0x8f5)][_0x4b47c0(0x19c)]['Damage'][_0x4b47c0(0x35f)]['call'](this,_0x3ce8a6),_0x3ce8a6=this['_multipliers'][_0x4b47c0(0x4cc)]*_0x3ce8a6+this['_multipliers'][_0x4b47c0(0x36f)],_0x3ce8a6;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x1a3)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x513)],Game_Action['prototype']['evalDamageFormula']=function(_0xbde308){const _0x270ab7=_0x9c6fcf;if(this[_0x270ab7(0x7e7)]!=='default')return this[_0x270ab7(0x20c)](_0xbde308);else return DataManager[_0x270ab7(0x5e9)](this[_0x270ab7(0x9d3)]())===_0x270ab7(0x2f0)?VisuMZ[_0x270ab7(0x8f5)][_0x270ab7(0x1a3)][_0x270ab7(0x7df)](this,_0xbde308):this[_0x270ab7(0x190)](_0xbde308);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x66d)]=function(_0x5343f2){const _0x58eda6=_0x9c6fcf;this[_0x58eda6(0x7e7)]=_0x5343f2;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x20c)]=function(_0x4a597f){const _0x35ad35=_0x9c6fcf,_0x3fb633=this['item'](),_0x270079=_0x3fb633[_0x35ad35(0x6ea)]['formula'];_0x3fb633['damage']['formula']=this[_0x35ad35(0x7e7)];let _0x2ccee7=VisuMZ['BattleCore'][_0x35ad35(0x1a3)][_0x35ad35(0x7df)](this,_0x4a597f);return _0x3fb633[_0x35ad35(0x6ea)]['formula']=_0x270079,_0x2ccee7;},Game_Action[_0x9c6fcf(0x1ef)]['damageStyle']=function(){const _0x5b6976=_0x9c6fcf;if(this[_0x5b6976(0x9d3)]()[_0x5b6976(0x468)][_0x5b6976(0x3c6)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x2522c7=String(RegExp['$1'])[_0x5b6976(0x5ed)]()[_0x5b6976(0x4a5)]();return _0x2522c7;}return _0x5b6976(0x2f0);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x190)]=function(_0x2ed7c3){const _0xc1ff4c=_0x9c6fcf,_0x14370d=DataManager[_0xc1ff4c(0x5e9)](this['item']()),_0x483cd2=VisuMZ[_0xc1ff4c(0x7c5)][_0x14370d];try{return _0x483cd2[_0xc1ff4c(0x358)]['call'](this,_0x2ed7c3);}catch(_0x590b5d){if($gameTemp['isPlaytest']())console[_0xc1ff4c(0x2ae)](_0x590b5d);return VisuMZ[_0xc1ff4c(0x8f5)]['Game_Action_evalDamageFormula'][_0xc1ff4c(0x7df)](this);}},Game_Action['prototype']['applyArmorModifiers']=function(_0x25be4f,_0x476345){const _0x3297ae=_0x9c6fcf;if(this['isCertainHit']())return _0x476345;const _0x272ad8=this['subject'](),_0x3d60dc=_0x25be4f;let _0x2d3197=[],_0xe24a57=[];_0x2d3197[_0x3297ae(0x4c6)](this['_armorPenetration']['arPenFlat'],this[_0x3297ae(0x487)]['arRedFlat']),_0xe24a57[_0x3297ae(0x4c6)](this['_armorPenetration']['arPenRate'],this[_0x3297ae(0x487)][_0x3297ae(0x5a4)]);const _0x515411=this[_0x3297ae(0x5c8)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x488426=this[_0x3297ae(0x5c8)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x4a465b=this[_0x3297ae(0x5c8)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x52c70e=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x2d3197=_0x2d3197['concat'](_0x3d60dc[_0x3297ae(0x38b)]()[_0x3297ae(0x1f9)](_0x45e32d=>_0x45e32d&&_0x45e32d[_0x3297ae(0x468)][_0x3297ae(0x3c6)](_0x515411)?Number(RegExp['$1']):0x0)),_0xe24a57=_0xe24a57[_0x3297ae(0x312)](_0x3d60dc[_0x3297ae(0x38b)]()[_0x3297ae(0x1f9)](_0x5943c0=>_0x5943c0&&_0x5943c0['note'][_0x3297ae(0x3c6)](_0x488426)?Number(RegExp['$1'])/0x64:0x0)),_0x2d3197=_0x2d3197[_0x3297ae(0x312)](_0x272ad8[_0x3297ae(0x38b)]()[_0x3297ae(0x1f9)](_0x50f963=>_0x50f963&&_0x50f963[_0x3297ae(0x468)]['match'](_0x4a465b)?Number(RegExp['$1']):0x0)),_0xe24a57=_0xe24a57[_0x3297ae(0x312)](_0x272ad8[_0x3297ae(0x38b)]()['map'](_0x4fce3a=>_0x4fce3a&&_0x4fce3a[_0x3297ae(0x468)][_0x3297ae(0x3c6)](_0x52c70e)?Number(RegExp['$1'])/0x64:0x0)),this[_0x3297ae(0x9d3)]()['note']['match'](_0x4a465b)&&_0x2d3197[_0x3297ae(0x4c6)](Number(RegExp['$1'])),this['item']()[_0x3297ae(0x468)]['match'](_0x52c70e)&&_0xe24a57[_0x3297ae(0x4c6)](Number(RegExp['$1'])),_0x476345=_0x2d3197[_0x3297ae(0x128)]((_0x210ac2,_0x167001)=>_0x210ac2-_0x167001,_0x476345),_0x476345>0x0&&(_0x476345=_0xe24a57['reduce']((_0x4e60ce,_0x426196)=>_0x4e60ce*(0x1-_0x426196),_0x476345)),_0x476345;},VisuMZ['BattleCore'][_0x9c6fcf(0x9e1)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6eb)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6eb)]=function(_0x27223d,_0x115067){const _0xc4358b=_0x9c6fcf;_0x115067=_0x115067*this[_0xc4358b(0x445)][_0xc4358b(0xab7)],_0x115067+=this[_0xc4358b(0x445)]['damageFlat']*(_0x115067>=0x0?0x1:-0x1),_0x115067=this[_0xc4358b(0xa64)]('PreDamage%1JS',_0x27223d,_0x115067,![]),_0x115067=this[_0xc4358b(0x48c)](_0x115067),_0x115067>0x0?_0x115067=Math['ceil'](_0x115067):_0x115067=Math[_0xc4358b(0x52a)](_0x115067),this[_0xc4358b(0x961)]=_0x115067,this['_totalValue']=this[_0xc4358b(0x576)]||0x0,this[_0xc4358b(0x576)]+=_0x115067,VisuMZ[_0xc4358b(0x8f5)][_0xc4358b(0x9e1)]['call'](this,_0x27223d,_0x115067),this[_0xc4358b(0xa64)]('PostDamage%1JS',_0x27223d,_0x115067,!![]);},Game_Action[_0x9c6fcf(0x1ef)]['applyDamageCaps']=function(_0x5608d4){const _0x3ada10=_0x9c6fcf;if(this['isBypassDamageCap']())return _0x5608d4;return _0x5608d4=this[_0x3ada10(0x154)](_0x5608d4),_0x5608d4=this['applyHardDamageCap'](_0x5608d4),_0x5608d4;},Game_Action[_0x9c6fcf(0x1ef)]['isBypassDamageCap']=function(){const _0x2d6f77=_0x9c6fcf,_0x1c0ff8=/<BYPASS DAMAGE CAP>/i;if(this['item']()['note'][_0x2d6f77(0x3c6)](_0x1c0ff8))return!![];if(this[_0x2d6f77(0x38c)]()[_0x2d6f77(0x38b)]()[_0x2d6f77(0x40c)](_0x2a994e=>_0x2a994e&&_0x2a994e[_0x2d6f77(0x468)][_0x2d6f77(0x3c6)](_0x1c0ff8)))return!![];return!VisuMZ[_0x2d6f77(0x8f5)]['Settings'][_0x2d6f77(0x9a9)]['EnableDamageCap'];},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x154)]=function(_0x6d201d){const _0x425d25=_0x9c6fcf;if(!VisuMZ[_0x425d25(0x8f5)][_0x425d25(0x19c)][_0x425d25(0x9a9)][_0x425d25(0x39c)])return _0x6d201d;const _0x46e3c8=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x425d25(0x468)][_0x425d25(0x3c6)](_0x46e3c8))return _0x6d201d;if(this[_0x425d25(0x38c)]()[_0x425d25(0x38b)]()[_0x425d25(0x40c)](_0x4f5795=>_0x4f5795&&_0x4f5795[_0x425d25(0x468)][_0x425d25(0x3c6)](_0x46e3c8)))return _0x6d201d;const _0x2d91fb=_0x6d201d<0x0?-0x1:0x1;_0x6d201d=Math[_0x425d25(0x278)](_0x6d201d);let _0x32971c=this[_0x425d25(0x38c)]()[_0x425d25(0x9c1)]();this[_0x425d25(0x9d3)]()[_0x425d25(0x468)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x32971c+=Number(RegExp['$1'])/0x64);_0x32971c=_0x32971c[_0x425d25(0x59c)](0.01,0x1);const _0x1cb4f2=this[_0x425d25(0x642)](),_0x5b08c6=_0x32971c*_0x1cb4f2;if(_0x6d201d>_0x5b08c6&&_0x1cb4f2>_0x5b08c6){_0x6d201d-=_0x5b08c6;const _0x4e1a01=VisuMZ[_0x425d25(0x8f5)]['Settings'][_0x425d25(0x9a9)][_0x425d25(0x166)],_0x4fc50e=Math['max'](0x1-_0x6d201d/((_0x1cb4f2-_0x5b08c6)*_0x4e1a01+_0x6d201d),0.01);_0x6d201d*=_0x4fc50e,_0x6d201d+=_0x5b08c6;}return _0x6d201d*_0x2d91fb;},Game_Action['prototype']['getHardDamageCap']=function(){const _0x693333=_0x9c6fcf;return this['item']()[_0x693333(0x468)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x693333(0x38c)]()[_0x693333(0x6fb)]();},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb33)]=function(_0x7c5e12){const _0x4d5e13=_0x9c6fcf;let _0x3e5d04=this['getHardDamageCap']();return _0x7c5e12[_0x4d5e13(0x59c)](-_0x3e5d04,_0x3e5d04);},Game_Action[_0x9c6fcf(0x1ef)]['shouldDisperseDamage']=function(){const _0x14c279=_0x9c6fcf;if(!this[_0x14c279(0x9d3)]())return![];if(!$gameParty['inBattle']())return![];return(this[_0x14c279(0x9d3)]()['note']||'')[_0x14c279(0x3c6)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1b2)]=function(_0x22bbf9){const _0x51a7a9=_0x9c6fcf;if(this[_0x51a7a9(0x87a)]()){let _0xab8bb7=BattleManager[_0x51a7a9(0x632)];_0x22bbf9/=_0xab8bb7['length'],this['isAttack']()&&(_0x22bbf9*=this[_0x51a7a9(0x38c)]()['attackTimesAdd']()+0x1),_0x22bbf9=_0x22bbf9>0x0?Math[_0x51a7a9(0x571)](_0x22bbf9):Math[_0x51a7a9(0x52a)](_0x22bbf9);}return _0x22bbf9;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x9a5)]=Game_Action[_0x9c6fcf(0x1ef)]['makeDamageValue'],Game_Action['prototype'][_0x9c6fcf(0x59e)]=function(_0x421ee7,_0x4593ff){const _0x48fac5=_0x9c6fcf;let _0x42b438=VisuMZ[_0x48fac5(0x8f5)][_0x48fac5(0x9a5)][_0x48fac5(0x7df)](this,_0x421ee7,_0x4593ff);return this['disperseDamage'](_0x42b438);},Game_Action[_0x9c6fcf(0x1ef)]['itemEffectRecoverHp']=function(_0x134143,_0x34a5fc){const _0x33983e=_0x9c6fcf;let _0x9b2391=(_0x134143[_0x33983e(0x8da)]*_0x34a5fc[_0x33983e(0x752)]+_0x34a5fc['value2'])*_0x134143[_0x33983e(0xa4a)];_0x9b2391=this[_0x33983e(0x1b2)](_0x9b2391),this[_0x33983e(0x7ea)]()&&(_0x9b2391*=this[_0x33983e(0x38c)]()['pha']),_0x9b2391=Math[_0x33983e(0x52a)](_0x9b2391),_0x9b2391!==0x0&&(_0x134143[_0x33983e(0x667)](_0x9b2391),this[_0x33983e(0x26c)](_0x134143));},Game_Action['prototype'][_0x9c6fcf(0x56d)]=function(_0x212589,_0x22d757){const _0x307d97=_0x9c6fcf;let _0x21fbf4=(_0x212589[_0x307d97(0x4fe)]*_0x22d757['value1']+_0x22d757['value2'])*_0x212589[_0x307d97(0xa4a)];_0x21fbf4=this[_0x307d97(0x1b2)](_0x21fbf4),this['isItem']()&&(_0x21fbf4*=this[_0x307d97(0x38c)]()[_0x307d97(0x802)]),_0x21fbf4=Math[_0x307d97(0x52a)](_0x21fbf4),_0x21fbf4!==0x0&&(_0x212589['gainMp'](_0x21fbf4),this[_0x307d97(0x26c)](_0x212589));},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x123)]=function(_0x3e9231,_0xb4a5bd){const _0x50ad0d=_0x9c6fcf;let _0x401e42=Math[_0x50ad0d(0x52a)](_0xb4a5bd['value1']);_0x401e42=this[_0x50ad0d(0x1b2)](_0x401e42),_0x401e42!==0x0&&(_0x3e9231['gainTp'](_0x401e42),this[_0x50ad0d(0x26c)](_0x3e9231));},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Action_apply']=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa4c)],Game_Action[_0x9c6fcf(0x1ef)]['apply']=function(_0x5e95f9){const _0x300365=_0x9c6fcf;if(_0x5e95f9&&_0x5e95f9[_0x300365(0x3fd)]())_0x5e95f9[_0x300365(0x71b)]();this[_0x300365(0xa64)]('PreApply%1JS',_0x5e95f9,0x0,!![]),VisuMZ[_0x300365(0x8f5)]['Game_Action_apply'][_0x300365(0x7df)](this,_0x5e95f9),this[_0x300365(0xa64)](_0x300365(0x1ce),_0x5e95f9,this[_0x300365(0x961)]||0x0,!![]),this[_0x300365(0x67d)](_0x5e95f9);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa64)]=function(_0xd606b5,_0x4bcc00,_0x586c7c,_0x3a7905){const _0x19caf2=_0x9c6fcf;if(this['_tempBattler']||this['_tempActor'])return;_0x586c7c=_0x586c7c||0x0;const _0x7e205=_0x586c7c,_0x14d226=VisuMZ['BattleCore'][_0x19caf2(0x19c)][_0x19caf2(0xb07)],_0x4f0a66=_0xd606b5[_0x19caf2(0x9da)]('');if(_0x14d226[_0x4f0a66]){_0x586c7c=_0x14d226[_0x4f0a66]['call'](this,_0x586c7c,_0x4bcc00);if(_0x3a7905)_0x586c7c=_0x7e205;}let _0x509dc7=VisuMZ[_0x19caf2(0x8f5)][_0x19caf2(0x6a3)](this[_0x19caf2(0x9d3)](),_0xd606b5['format'](''));if(VisuMZ[_0x19caf2(0x8f5)]['JS'][_0x509dc7]){_0x586c7c=VisuMZ[_0x19caf2(0x8f5)]['JS'][_0x509dc7][_0x19caf2(0x7df)](this,this[_0x19caf2(0x38c)](),_0x4bcc00,this['item'](),_0x586c7c);if(_0x3a7905)_0x586c7c=_0x7e205;}for(const _0x55fd08 of this[_0x19caf2(0x38c)]()[_0x19caf2(0x38b)]()){if(!_0x55fd08)continue;_0x509dc7=VisuMZ[_0x19caf2(0x8f5)][_0x19caf2(0x6a3)](_0x55fd08,_0xd606b5['format'](_0x19caf2(0x374)));if(VisuMZ['BattleCore']['JS'][_0x509dc7]){_0x586c7c=VisuMZ[_0x19caf2(0x8f5)]['JS'][_0x509dc7][_0x19caf2(0x7df)](this,this['subject'](),_0x4bcc00,_0x55fd08,_0x586c7c);if(_0x3a7905)_0x586c7c=_0x7e205;}}for(const _0x46a19e of _0x4bcc00[_0x19caf2(0x38b)]()){if(!_0x46a19e)continue;_0x509dc7=VisuMZ[_0x19caf2(0x8f5)][_0x19caf2(0x6a3)](_0x46a19e,_0xd606b5[_0x19caf2(0x9da)](_0x19caf2(0x5a5)));if(VisuMZ['BattleCore']['JS'][_0x509dc7]){_0x586c7c=VisuMZ['BattleCore']['JS'][_0x509dc7][_0x19caf2(0x7df)](this,this['subject'](),_0x4bcc00,_0x46a19e,_0x586c7c);if(_0x3a7905)_0x586c7c=_0x7e205;}}return _0x586c7c;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x608)]=function(_0xb80f50){const _0x16cd23=_0x9c6fcf,_0x11cb87=this[_0x16cd23(0x576)]||0x0,_0x3260f2=VisuMZ[_0x16cd23(0x8f5)]['Settings']['Mechanics'],_0x58767e=_0xb80f50[_0x16cd23(0x9da)]('');_0x3260f2[_0x58767e]&&_0x3260f2[_0x58767e][_0x16cd23(0x7df)](this,_0x11cb87);let _0x3f4748=VisuMZ[_0x16cd23(0x8f5)][_0x16cd23(0x6a3)](this[_0x16cd23(0x9d3)](),_0xb80f50);VisuMZ[_0x16cd23(0x8f5)]['JS'][_0x3f4748]&&VisuMZ[_0x16cd23(0x8f5)]['JS'][_0x3f4748][_0x16cd23(0x7df)](this,this[_0x16cd23(0x38c)](),this[_0x16cd23(0x38c)](),this[_0x16cd23(0x9d3)](),_0x11cb87);for(const _0xac2952 of this[_0x16cd23(0x38c)]()[_0x16cd23(0x38b)]()){if(!_0xac2952)continue;_0x3f4748=VisuMZ['BattleCore']['createKeyJS'](_0xac2952,_0xb80f50),VisuMZ['BattleCore']['JS'][_0x3f4748]&&VisuMZ['BattleCore']['JS'][_0x3f4748][_0x16cd23(0x7df)](this,this[_0x16cd23(0x38c)](),this['subject'](),_0xac2952,_0x11cb87);}},Game_Action[_0x9c6fcf(0x1ef)]['speed']=function(){const _0x384e6e=_0x9c6fcf;return VisuMZ[_0x384e6e(0x8f5)][_0x384e6e(0x19c)][_0x384e6e(0xb07)][_0x384e6e(0xa80)][_0x384e6e(0x7df)](this);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x548)]=function(){const _0x5addcb=_0x9c6fcf;return VisuMZ[_0x5addcb(0x8f5)][_0x5addcb(0x19c)][_0x5addcb(0xb07)][_0x5addcb(0x3b6)];},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8d7)]=function(){const _0x3c132c=_0x9c6fcf;if(this[_0x3c132c(0xa9f)]===_0x3c132c(0xab4))return![];if(this[_0x3c132c(0xa9f)]===_0x3c132c(0x567))return![];if(!this[_0x3c132c(0x9d3)]())return![];return this[_0x3c132c(0x9d3)]()['note'][_0x3c132c(0x3c6)](/<JS TARGETS>/i);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9f6)]=function(){const _0x2f665d=_0x9c6fcf;if(this['_targetBattlerKey']===_0x2f665d(0xab4))return![];if(this[_0x2f665d(0xa9f)]===_0x2f665d(0x567))return![];if(!this[_0x2f665d(0x1e6)]&&this[_0x2f665d(0x38c)]()[_0x2f665d(0x260)]())return![];if(this[_0x2f665d(0x8d7)]())return!![];if(!this[_0x2f665d(0x9d3)]())return![];return typeof this['item']()[_0x2f665d(0x5b7)]==='string';},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x913)]=Game_Action[_0x9c6fcf(0x1ef)]['isForOpponent'],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6c5)]=function(){const _0x12b2a2=_0x9c6fcf;if(this['_targetBattlerKey']===_0x12b2a2(0xab4))return![];if(this[_0x12b2a2(0xa9f)]==='all\x20enemies')return!![];return this[_0x12b2a2(0x9f6)]()&&!this[_0x12b2a2(0x8d7)]()?this[_0x12b2a2(0x6b7)]():VisuMZ[_0x12b2a2(0x8f5)]['Game_Action_isForOpponent'][_0x12b2a2(0x7df)](this);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6b7)]=function(){const _0x44720c=_0x9c6fcf,_0x2a89e7=String(this['item']()['scope']);if(_0x2a89e7[_0x44720c(0x3c6)](/ANY/i))return!![];return _0x2a89e7['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore']['Game_Action_isForFriend']=Game_Action['prototype'][_0x9c6fcf(0x7c6)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7c6)]=function(){const _0x1b4406=_0x9c6fcf;if(this[_0x1b4406(0xa9f)]===_0x1b4406(0xab4))return!![];if(this['_targetBattlerKey']==='all\x20enemies')return![];return this['isBattleCoreTargetScope']()&&!this[_0x1b4406(0x8d7)]()?this['isForFriendBattleCore']():VisuMZ['BattleCore']['Game_Action_isForFriend'][_0x1b4406(0x7df)](this);},Game_Action[_0x9c6fcf(0x1ef)]['isForFriendBattleCore']=function(){const _0xd286f5=_0x9c6fcf,_0x4def55=String(this[_0xd286f5(0x9d3)]()[_0xd286f5(0x5b7)]);return _0x4def55[_0xd286f5(0x3c6)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb2e)]=function(){const _0x47a669=_0x9c6fcf;if(this['isBattleCoreTargetScope']()&&!this[_0x47a669(0x8d7)]()){const _0x2d53e6=String(this[_0x47a669(0x9d3)]()[_0x47a669(0x5b7)]);return _0x2d53e6[_0x47a669(0x3c6)](/(?:ENEMY|FOE)/i)&&_0x2d53e6[_0x47a669(0x3c6)](/OR/i)&&_0x2d53e6[_0x47a669(0x3c6)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action['prototype'][_0x9c6fcf(0x231)]=function(){const _0xee5327=_0x9c6fcf;if(this[_0xee5327(0xb2e)]()){const _0x3d7f25=String(this['item']()[_0xee5327(0x5b7)]);if(_0x3d7f25[_0xee5327(0x3c6)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action['prototype']['isForAnyoneFocusOpponents']=function(){const _0x269e4c=_0x9c6fcf;if(this[_0x269e4c(0xb2e)]()){const _0x10f95b=String(this['item']()[_0x269e4c(0x5b7)]);if(_0x10f95b[_0x269e4c(0x3c6)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x992)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x858)],Game_Action[_0x9c6fcf(0x1ef)]['isForAliveFriend']=function(){const _0xecee0a=_0x9c6fcf;if(this[_0xecee0a(0xa9f)]==='all\x20actors')return!![];return this[_0xecee0a(0x9f6)]()&&!this[_0xecee0a(0x8d7)]()?this[_0xecee0a(0x9bb)]():VisuMZ[_0xecee0a(0x8f5)][_0xecee0a(0x992)]['call'](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xabb)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa5b)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa5b)]=function(){const _0x139087=_0x9c6fcf;if(this[_0x139087(0xa9f)]===_0x139087(0xab4))return VisuMZ['BattleCore'][_0x139087(0xabb)][_0x139087(0x7df)](this);return VisuMZ[_0x139087(0x8f5)][_0x139087(0xabb)]['call'](this);},Game_Action[_0x9c6fcf(0x1ef)]['isForAliveFriendBattleCore']=function(){if(this['isForAnyone']())return!![];return![];},Game_Action[_0x9c6fcf(0x1ef)]['isForNotUser']=function(){const _0x5169e1=_0x9c6fcf;return this[_0x5169e1(0x9d3)]()&&this[_0x5169e1(0x9d3)]()[_0x5169e1(0x468)][_0x5169e1(0x3c6)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Action_isForOne']=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa7f)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa7f)]=function(){const _0xcca44f=_0x9c6fcf;if(this[_0xcca44f(0xa9f)]===_0xcca44f(0xab4))return![];if(this['_targetBattlerKey']===_0xcca44f(0x567))return![];return this[_0xcca44f(0x9f6)]()&&!this['isCustomBattleScope']()?this['isForOneBattleCore']():VisuMZ[_0xcca44f(0x8f5)][_0xcca44f(0x2f3)][_0xcca44f(0x7df)](this);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4e6)]=function(){const _0x34ae42=_0x9c6fcf;if(this[_0x34ae42(0xb2e)]())return!![];return![];},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Action_isForRandom']=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x507)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x507)]=function(){const _0xbdc2d6=_0x9c6fcf;if(this[_0xbdc2d6(0xa9f)]===_0xbdc2d6(0xab4))return![];if(this[_0xbdc2d6(0xa9f)]===_0xbdc2d6(0x567))return![];return this[_0xbdc2d6(0x9f6)]()&&!this['isCustomBattleScope']()?this[_0xbdc2d6(0xa25)]():VisuMZ[_0xbdc2d6(0x8f5)][_0xbdc2d6(0x320)]['call'](this);},Game_Action['prototype'][_0x9c6fcf(0xa25)]=function(){const _0x507db4=_0x9c6fcf,_0x3ccdaf=String(this[_0x507db4(0x9d3)]()['scope']);return _0x3ccdaf[_0x507db4(0x3c6)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x8c7)]=Game_Action['prototype'][_0x9c6fcf(0xabd)],Game_Action['prototype'][_0x9c6fcf(0xabd)]=function(){const _0x335785=_0x9c6fcf;if(this[_0x335785(0xa9f)]==='all\x20actors')return!![];if(this['_targetBattlerKey']===_0x335785(0x567))return!![];return VisuMZ[_0x335785(0x8f5)][_0x335785(0x8c7)][_0x335785(0x7df)](this);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x99e)]=function(){const _0x1509d8=_0x9c6fcf;if(!this[_0x1509d8(0x9d3)]())return![];if(this[_0x1509d8(0xa5b)]())return![];return(this['item']()[_0x1509d8(0x468)]||'')[_0x1509d8(0x3c6)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x880)]=Game_Action['prototype'][_0x9c6fcf(0x508)],Game_Action[_0x9c6fcf(0x1ef)]['testApply']=function(_0x9b0bd7){const _0xfb7a77=_0x9c6fcf;if(this['isForNotUser']()&&_0x9b0bd7===this[_0xfb7a77(0x38c)]())return![];return VisuMZ[_0xfb7a77(0x8f5)][_0xfb7a77(0x880)][_0xfb7a77(0x7df)](this,_0x9b0bd7);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x492)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4db)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4db)]=function(){const _0x584cc4=_0x9c6fcf,_0x231429=VisuMZ[_0x584cc4(0x8f5)]['Game_Action_itemTargetCandidates']['call'](this);if(this[_0x584cc4(0xa59)]())_0x231429[_0x584cc4(0x7e5)](this[_0x584cc4(0x38c)]());return _0x231429;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x719)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7be)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7be)]=function(){const _0x52c4cc=_0x9c6fcf;return this[_0x52c4cc(0x9f6)]()&&!this[_0x52c4cc(0x8d7)]()?this[_0x52c4cc(0x3ef)]():VisuMZ['BattleCore'][_0x52c4cc(0x719)][_0x52c4cc(0x7df)](this);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3ef)]=function(){const _0x522a47=_0x9c6fcf,_0x730cf5=String(this[_0x522a47(0x9d3)]()[_0x522a47(0x5b7)]);if(_0x730cf5[_0x522a47(0x3c6)](/RANDOM/i))return![];if(_0x730cf5[_0x522a47(0x3c6)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x730cf5[_0x522a47(0x3c6)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x730cf5[_0x522a47(0x3c6)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x730cf5[_0x522a47(0x3c6)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x522a47(0x8f5)][_0x522a47(0x719)][_0x522a47(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x7a0)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x519)],Game_Action['prototype'][_0x9c6fcf(0x519)]=function(){const _0x39407e=_0x9c6fcf;let _0xd01a19=[];return this['isBattleCoreTargetScope']()?this[_0x39407e(0x8d7)]()?_0xd01a19=this[_0x39407e(0x582)]():_0xd01a19=this['makeTargetsBattleCore']():_0xd01a19=VisuMZ[_0x39407e(0x8f5)]['Game_Action_makeTargets']['call'](this),_0xd01a19=this['applyTargetFilters'](_0xd01a19),_0xd01a19;},Game_Action['prototype'][_0x9c6fcf(0x46e)]=function(){const _0x30ee2b=_0x9c6fcf;return this[_0x30ee2b(0x38c)]()[_0x30ee2b(0x552)]()&&!this[_0x30ee2b(0x38c)]()['isAutoBattle']();},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x582)]=function(){const _0x1bbb42=_0x9c6fcf,_0x244017=VisuMZ[_0x1bbb42(0x8f5)]['createKeyJS'](this[_0x1bbb42(0x9d3)](),_0x1bbb42(0x708));if(VisuMZ[_0x1bbb42(0x8f5)]['JS'][_0x244017]){targets=VisuMZ[_0x1bbb42(0x8f5)]['Game_Action_makeTargets']['call'](this);const _0x24c621=VisuMZ['BattleCore']['createKeyJS'](this[_0x1bbb42(0x9d3)](),_0x1bbb42(0x708));return targets=VisuMZ[_0x1bbb42(0x8f5)]['JS'][_0x24c621]['call'](this,this[_0x1bbb42(0x38c)](),targets),this[_0x1bbb42(0x3b7)](targets);}return this[_0x1bbb42(0x348)]();},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x348)]=function(){const _0x4aa000=_0x9c6fcf;let _0x27c883=[];const _0x1547bc=String(this[_0x4aa000(0x9d3)]()['scope']);if(this[_0x4aa000(0x335)]())return this[_0x4aa000(0x46e)]()?(_0x27c883=this['getBattlerKeyTargets'](),this[_0x4aa000(0x3b7)](_0x27c883)):(this['_targetIndex']=-0x1,_0x27c883[_0x4aa000(0x4c6)](...this[_0x4aa000(0x2cb)]()),this[_0x4aa000(0x3b7)](_0x27c883));if(this['isForAnyoneFocusFriends']()){if(this[_0x4aa000(0x46e)]())return _0x27c883=this['getBattlerKeyTargets'](),this['repeatTargets'](_0x27c883);else{if(Imported[_0x4aa000(0x1f4)]){if(VisuMZ[_0x4aa000(0x137)][_0x4aa000(0x14c)]<1.19){let _0x1dc412='';_0x1dc412+=_0x4aa000(0x681),_0x1dc412+=_0x4aa000(0x865),_0x1dc412+=_0x4aa000(0x5d3),alert(_0x1dc412),SceneManager[_0x4aa000(0x2ee)]();}}return this['_targetIndex']=-0x1,_0x27c883[_0x4aa000(0x4c6)](...this[_0x4aa000(0x832)]()),this[_0x4aa000(0x3b7)](_0x27c883);}}if(_0x1547bc[_0x4aa000(0x3c6)](/(\d+) RANDOM ANY/i)){let _0x2dec86=Number(RegExp['$1']);while(_0x2dec86--){const _0x4de444=Math[_0x4aa000(0x316)](0x2)===0x0?this[_0x4aa000(0xa70)]():this[_0x4aa000(0x616)]();_0x27c883[_0x4aa000(0x4c6)](_0x4de444[_0x4aa000(0x3b4)]());}return this[_0x4aa000(0x3b7)](_0x27c883);}if(_0x1547bc['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x3f9364=Number(RegExp['$1']);while(_0x3f9364--){_0x27c883[_0x4aa000(0x4c6)](this[_0x4aa000(0xa70)]()['trueRandomTarget']());}return this[_0x4aa000(0x3b7)](_0x27c883);}if(_0x1547bc[_0x4aa000(0x3c6)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x5ac9e5=Number(RegExp['$1']);while(_0x5ac9e5--){_0x27c883['push'](this[_0x4aa000(0x616)]()[_0x4aa000(0x3b4)]());}return this[_0x4aa000(0x3b7)](_0x27c883);}if(_0x1547bc[_0x4aa000(0x3c6)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x27c883['push'](...this[_0x4aa000(0x616)]()[_0x4aa000(0x3b8)]()[_0x4aa000(0x4e3)](_0x25b4ea=>_0x25b4ea!==this[_0x4aa000(0x38c)]())),this['repeatTargets'](_0x27c883);return VisuMZ['BattleCore'][_0x4aa000(0x7a0)][_0x4aa000(0x7df)](this);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xacc)]=function(_0x18abf9){const _0xc24f7e=_0x9c6fcf,_0x2dd884=[];for(let _0xc73bf6=0x0;_0xc73bf6<this[_0xc24f7e(0x905)]();_0xc73bf6++){_0x2dd884[_0xc24f7e(0x4c6)](_0x18abf9['trueRandomTarget']());}return _0x2dd884;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x28e)]=function(_0x24a509){const _0x1e9a10=_0x9c6fcf;if(!this[_0x1e9a10(0x9d3)]())return _0x24a509;const _0x43bf4a=this[_0x1e9a10(0x9d3)]()[_0x1e9a10(0x468)];if(this[_0x1e9a10(0xa59)]()){this['isForAll']()&&_0x24a509[_0x1e9a10(0x7e5)](this['subject']());if(_0x24a509[_0x1e9a10(0x765)](this[_0x1e9a10(0x38c)]())){const _0x9a958e=this[_0x1e9a10(0x616)]()['aliveMembers']()[_0x1e9a10(0x7e5)](this[_0x1e9a10(0x38c)]());if(_0x9a958e['length']>0x0){_0x9a958e['sort']((_0x4f8f1b,_0x162716)=>_0x4f8f1b[_0x1e9a10(0x44c)]()-_0x162716[_0x1e9a10(0x44c)]());while(_0x24a509[_0x1e9a10(0x765)](this[_0x1e9a10(0x38c)]())){const _0x42044f=_0x24a509[_0x1e9a10(0x9c4)](this[_0x1e9a10(0x38c)]());_0x24a509[_0x42044f]=_0x9a958e[Math[_0x1e9a10(0x316)](_0x9a958e['length'])];}}else _0x24a509[_0x1e9a10(0x7e5)](this[_0x1e9a10(0x38c)]());}}return _0x24a509;},VisuMZ['BattleCore'][_0x9c6fcf(0x2ad)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb32)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb32)]=function(_0x310fc4,_0x4ce62c){const _0xe1cc02=_0x9c6fcf;VisuMZ[_0xe1cc02(0x8f5)]['Game_Action_itemEffectAddAttackState']['call'](this,_0x310fc4,_0x4ce62c);if(!_0x310fc4['isImmortal']())return;for(const _0x6ca90e of this[_0xe1cc02(0x38c)]()['attackStates']()){if(_0x6ca90e===_0x310fc4[_0xe1cc02(0x928)]()){let _0x31ec02=_0x4ce62c[_0xe1cc02(0x752)];_0x31ec02*=_0x310fc4[_0xe1cc02(0x812)](_0x6ca90e),_0x31ec02*=this['subject']()[_0xe1cc02(0x946)](_0x6ca90e),_0x31ec02*=this[_0xe1cc02(0x73f)](_0x310fc4),Math['random']()<_0x31ec02&&(_0x310fc4[_0xe1cc02(0x851)]=!![],this[_0xe1cc02(0x26c)](_0x310fc4));}}},VisuMZ['BattleCore'][_0x9c6fcf(0x7ce)]=Game_Action['prototype'][_0x9c6fcf(0x79b)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x79b)]=function(_0x1a29f9,_0x34783b){const _0xa1a440=_0x9c6fcf;VisuMZ[_0xa1a440(0x8f5)]['Game_Action_itemEffectAddNormalState'][_0xa1a440(0x7df)](this,_0x1a29f9,_0x34783b);if(!_0x1a29f9[_0xa1a440(0x705)]())return;if(_0x34783b[_0xa1a440(0x8bd)]!==_0x1a29f9[_0xa1a440(0x928)]())return;let _0x5c49d0=_0x34783b[_0xa1a440(0x752)];!this[_0xa1a440(0x1dd)]()&&(_0x5c49d0*=_0x1a29f9['stateRate'](_0x34783b[_0xa1a440(0x8bd)]),_0x5c49d0*=this['lukEffectRate'](_0x1a29f9)),Math['random']()<_0x5c49d0&&(_0x1a29f9[_0xa1a440(0x851)]=!![],this['makeSuccess'](_0x1a29f9));},VisuMZ['BattleCore'][_0x9c6fcf(0x5a8)]=Game_Action['prototype'][_0x9c6fcf(0x9bf)],Game_Action[_0x9c6fcf(0x1ef)]['applyGlobal']=function(){const _0x2e914e=_0x9c6fcf;VisuMZ[_0x2e914e(0x8f5)][_0x2e914e(0x5a8)][_0x2e914e(0x7df)](this),this['applyGlobalCommonEventNotetags'](),this[_0x2e914e(0x4ee)]();},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6e3)]=function(){const _0x5aba7b=_0x9c6fcf;if(!SceneManager[_0x5aba7b(0x319)]())return;const _0x4b17e4=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x399e3c=this[_0x5aba7b(0x9d3)]()['note'][_0x5aba7b(0x3c6)](_0x4b17e4);if(_0x399e3c)for(const _0x3e4954 of _0x399e3c){if(!_0x3e4954)continue;_0x3e4954['match'](_0x4b17e4);const _0x40087e=String(RegExp['$1'])[_0x5aba7b(0x8d8)](',')[_0x5aba7b(0x1f9)](_0x4cb8cb=>String(_0x4cb8cb)[_0x5aba7b(0x4a5)]()),_0x199145=_0x40087e[_0x5aba7b(0x1f9)](_0x2e0f28=>DataManager[_0x5aba7b(0x77b)](_0x2e0f28));for(const _0x36d499 of _0x199145){const _0x4776bb=$dataCommonEvents[_0x36d499];_0x4776bb&&$gameTemp[_0x5aba7b(0xaf9)](_0x36d499);}}},DataManager['getCommonEventIdWithName']=function(_0x19fab7){const _0x238850=_0x9c6fcf;_0x19fab7=_0x19fab7[_0x238850(0x5ed)]()[_0x238850(0x4a5)](),this['_commonEventIDs']=this['_commonEventIDs']||{};if(this['_commonEventIDs'][_0x19fab7])return this[_0x238850(0xad8)][_0x19fab7];for(const _0x315352 of $dataCommonEvents){if(!_0x315352)continue;let _0x39b1ce=_0x315352[_0x238850(0x613)];_0x39b1ce=_0x39b1ce[_0x238850(0xb09)](/\x1I\[(\d+)\]/gi,''),_0x39b1ce=_0x39b1ce['replace'](/\\I\[(\d+)\]/gi,''),this[_0x238850(0xad8)][_0x39b1ce[_0x238850(0x5ed)]()[_0x238850(0x4a5)]()]=_0x315352['id'];}return this[_0x238850(0xad8)][_0x19fab7]||0x0;},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4ee)]=function(){const _0x2cefc3=_0x9c6fcf;if(!SceneManager[_0x2cefc3(0x319)]())return;const _0xa23dd5=VisuMZ[_0x2cefc3(0x8f5)][_0x2cefc3(0x19c)][_0x2cefc3(0xb07)];_0xa23dd5['SwitchCritical']&&$gameSwitches['setValue'](_0xa23dd5[_0x2cefc3(0x31e)],![]),_0xa23dd5[_0x2cefc3(0x45c)]&&$gameSwitches['setValue'](_0xa23dd5['SwitchMissEvade'],![]),_0xa23dd5[_0x2cefc3(0x859)]&&$gameVariables[_0x2cefc3(0x8e2)](_0xa23dd5[_0x2cefc3(0x859)],0x0),_0xa23dd5[_0x2cefc3(0x607)]&&$gameVariables[_0x2cefc3(0x8e2)](_0xa23dd5[_0x2cefc3(0x607)],0x0);},Game_Action[_0x9c6fcf(0x1ef)]['applyResultSwitches']=function(_0x3be2dd){const _0x38a8d5=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(!_0x3be2dd)return;const _0x4a02cc=_0x3be2dd[_0x38a8d5(0x4df)](),_0x2d0dff=VisuMZ[_0x38a8d5(0x8f5)]['Settings'][_0x38a8d5(0xb07)];_0x2d0dff[_0x38a8d5(0x31e)]&&_0x4a02cc[_0x38a8d5(0x388)]&&$gameSwitches[_0x38a8d5(0x8e2)](_0x2d0dff[_0x38a8d5(0x31e)],!![]);_0x2d0dff[_0x38a8d5(0x45c)]&&(_0x4a02cc[_0x38a8d5(0x7a2)]||_0x4a02cc[_0x38a8d5(0x61c)])&&$gameSwitches[_0x38a8d5(0x8e2)](_0x2d0dff[_0x38a8d5(0x45c)],!![]);if(_0x2d0dff[_0x38a8d5(0x859)]){let _0x5e3b38=$gameVariables['value'](_0x2d0dff[_0x38a8d5(0x859)]);_0x4a02cc[_0x38a8d5(0x91b)]>0x0&&(_0x5e3b38+=Math[_0x38a8d5(0x278)](_0x4a02cc[_0x38a8d5(0x91b)])),$gameVariables[_0x38a8d5(0x8e2)](_0x2d0dff['VariableDmg'],_0x5e3b38);}if(_0x2d0dff[_0x38a8d5(0x607)]){let _0x373b6f=$gameVariables['value'](_0x2d0dff[_0x38a8d5(0x607)]);_0x4a02cc['hpDamage']<0x0&&(_0x373b6f+=Math[_0x38a8d5(0x278)](_0x4a02cc[_0x38a8d5(0x91b)])),$gameVariables['setValue'](_0x2d0dff[_0x38a8d5(0x607)],_0x373b6f);}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x88d)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xa4d)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1fd)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1fd)]=function(_0x357aa1,_0x258a4c){const _0x5abd0b=_0x9c6fcf;VisuMZ[_0x5abd0b(0x8f5)][_0x5abd0b(0xa4d)][_0x5abd0b(0x7df)](this,_0x357aa1,_0x258a4c);!this[_0x5abd0b(0x496)]()&&_0x357aa1&&_0x357aa1[_0x5abd0b(0x4df)]()[_0x5abd0b(0x91b)]>0x0&&this['performLifeSteal']('HP',_0x357aa1,_0x357aa1['result']()['hpDamage']);if(_0x357aa1){this[_0x5abd0b(0x91d)]=this['_executeHpDamage']||{};const _0xd56678=_0x357aa1[_0x5abd0b(0x29b)]();this['_executeHpDamage'][_0xd56678]=_0x258a4c;}},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x77c)]=function(_0x2a721f){const _0x2c4b48=_0x9c6fcf;this[_0x2c4b48(0x91d)]=this[_0x2c4b48(0x91d)]||{};const _0x4319e3=_0x2a721f[_0x2c4b48(0x29b)]();return this[_0x2c4b48(0x91d)][_0x4319e3]||0x0;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xade)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5b2)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5b2)]=function(_0x348df8,_0x309813){const _0x47064c=_0x9c6fcf;VisuMZ[_0x47064c(0x8f5)]['Game_Action_executeMpDamage'][_0x47064c(0x7df)](this,_0x348df8,_0x309813),!this[_0x47064c(0x496)]()&&_0x348df8&&_0x348df8[_0x47064c(0x4df)]()['mpDamage']>0x0&&this[_0x47064c(0x99a)]('MP',_0x348df8,_0x348df8[_0x47064c(0x4df)]()[_0x47064c(0x339)]);},Game_Action[_0x9c6fcf(0x1ef)]['performLifeSteal']=function(_0x33d09d,_0x370040,_0x5dc162){const _0x32380f=_0x9c6fcf;_0x33d09d=_0x33d09d[_0x32380f(0x5ed)]()[_0x32380f(0x4a5)]();const _0x223b26=this['lifeStealRate'](_0x33d09d,_0x370040);if(_0x223b26<=0x0)return;const _0x30e344=Math[_0x32380f(0xb65)](_0x5dc162*_0x223b26);if(_0x30e344<=0x0)return;let _0xd6c278=this['subject']();if(this['_reflectionTarget'])_0xd6c278=this[_0x32380f(0x4a7)];const _0x58fdaf=_0x370040[_0x32380f(0x24b)](_0x33d09d)?-0x1:0x1;if(_0x33d09d==='HP')_0xd6c278[_0x32380f(0x667)](_0x58fdaf*_0x30e344);if(_0x33d09d==='MP')_0xd6c278[_0x32380f(0x5e1)](_0x58fdaf*_0x30e344);},Game_Action['prototype'][_0x9c6fcf(0x5b4)]=function(_0xb323bb,_0x13b2b7){const _0x22ee22=_0x9c6fcf;if(this[_0x22ee22(0x9b8)](_0xb323bb))return 0x0;if(this[_0x22ee22(0x38c)]()['isDisarmLifeSteal'](_0xb323bb))return 0x0;if(_0x13b2b7[_0x22ee22(0x382)](_0xb323bb))return 0x0;let _0x3af436=0x0;return _0x3af436+=this[_0x22ee22(0x963)](_0xb323bb),_0x3af436+=this[_0x22ee22(0x38c)]()[_0x22ee22(0x5b4)](_0xb323bb,this[_0x22ee22(0x9d3)]()[_0x22ee22(0x2b8)]),_0x3af436['clamp'](0x0,0x1);},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9b8)]=function(_0x551c5e){const _0x3cda60=_0x9c6fcf;_0x551c5e=_0x551c5e[_0x3cda60(0x5ed)]()[_0x3cda60(0x4a5)]();const _0x12ae02=VisuMZ['BattleCore']['LifeStealRegExp'],_0xb0349a=this[_0x3cda60(0x9d3)]()['note']||'';if(_0xb0349a['match'](_0x12ae02[_0x3cda60(0x78e)]))return!![];if(_0x551c5e==='HP'&&_0xb0349a['match'](_0x12ae02[_0x3cda60(0x4f9)]))return!![];if(_0x551c5e==='MP'&&_0xb0349a[_0x3cda60(0x3c6)](_0x12ae02['cancelMpLifeSteal']))return!![];return![];},Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x963)]=function(_0x3a375c){const _0x190989=_0x9c6fcf,_0x290163=VisuMZ[_0x190989(0x8f5)]['LifeStealRegExp'],_0x411600=this[_0x190989(0x9d3)]()[_0x190989(0x468)]||'';_0x3a375c=_0x3a375c[_0x190989(0x5ed)]()[_0x190989(0x4a5)]();const _0x54d437=_0x411600['match'](_0x290163[_0x190989(0xa14)]);if(_0x54d437)for(const _0x48f797 of _0x54d437){_0x48f797[_0x190989(0x3c6)](_0x290163[_0x190989(0xa14)]);const _0x2a461d=String(RegExp['$1'])[_0x190989(0x5ed)]()['trim'](),_0x32a695=Number(RegExp['$2'])*0.01;if(_0x2a461d!==_0x3a375c)continue;return _0x32a695;}return 0x0;},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5b4)]=function(_0x59cdc7,_0x1a3e28){const _0x202032=_0x9c6fcf,_0x2c2d0c=VisuMZ[_0x202032(0x8f5)][_0x202032(0x88d)];let _0x4755cf=0x0;_0x59cdc7=_0x59cdc7[_0x202032(0x5ed)]()[_0x202032(0x4a5)]();for(const _0x19b92d of this['traitObjects']()){if(!_0x19b92d)continue;const _0x4fd8eb=_0x19b92d[_0x202032(0x468)]||'',_0x17a6ef=_0x4fd8eb[_0x202032(0x3c6)](_0x2c2d0c[_0x202032(0x34b)]);if(_0x17a6ef)for(const _0x5bacf2 of _0x17a6ef){_0x5bacf2[_0x202032(0x3c6)](_0x2c2d0c[_0x202032(0x34b)]);const _0x296811=String(RegExp['$1'])['toUpperCase']()[_0x202032(0x4a5)](),_0x421934=String(RegExp['$2']),_0x2151a0=Number(RegExp['$3'])*0.01;if(_0x296811!==_0x59cdc7)continue;if(_0x1a3e28===Game_Action[_0x202032(0x92f)]&&_0x421934[_0x202032(0x3c6)](/CERTAIN/i))_0x4755cf+=_0x2151a0;else{if(_0x1a3e28===Game_Action[_0x202032(0x274)]&&_0x421934['match'](/PHYS/i))_0x4755cf+=_0x2151a0;else _0x1a3e28===Game_Action[_0x202032(0x86f)]&&_0x421934[_0x202032(0x3c6)](/MAGIC/i)&&(_0x4755cf+=_0x2151a0);}}}return _0x4755cf;},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x759)]=function(_0x3ca69b){const _0x3942a8=_0x9c6fcf;_0x3ca69b=_0x3ca69b[_0x3942a8(0x5ed)]()[_0x3942a8(0x4a5)]();const _0x1716a0=VisuMZ[_0x3942a8(0x8f5)]['LifeStealRegExp'];for(const _0x1d13c1 of this['traitObjects']()){if(!_0x1d13c1)continue;const _0x4abe41=_0x1d13c1[_0x3942a8(0x468)]||'';if(_0x4abe41[_0x3942a8(0x3c6)](_0x1716a0[_0x3942a8(0x6c9)]))return!![];if(_0x3ca69b==='HP'&&_0x4abe41[_0x3942a8(0x3c6)](_0x1716a0['disarmHpLifeSteal']))return!![];if(_0x3ca69b==='MP'&&_0x4abe41[_0x3942a8(0x3c6)](_0x1716a0['disarmMpLifeSteal']))return!![];}return![];},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x24b)]=function(_0x246192){const _0x139686=_0x9c6fcf;_0x246192=_0x246192[_0x139686(0x5ed)]()[_0x139686(0x4a5)]();const _0xb6bffa=VisuMZ['BattleCore'][_0x139686(0x88d)];for(const _0x5d32d4 of this[_0x139686(0x38b)]()){if(!_0x5d32d4)continue;const _0x57fd6a=_0x5d32d4[_0x139686(0x468)]||'';if(_0x57fd6a[_0x139686(0x3c6)](_0xb6bffa[_0x139686(0x661)]))return!![];if(_0x246192==='HP'&&_0x57fd6a[_0x139686(0x3c6)](_0xb6bffa['negativeHpLifeSteal']))return!![];if(_0x246192==='MP'&&_0x57fd6a['match'](_0xb6bffa[_0x139686(0x5f1)]))return!![];}return![];},Game_BattlerBase['prototype'][_0x9c6fcf(0x382)]=function(_0x545232){const _0x396149=_0x9c6fcf;_0x545232=_0x545232[_0x396149(0x5ed)]()[_0x396149(0x4a5)]();const _0xf09365=VisuMZ[_0x396149(0x8f5)][_0x396149(0x88d)];for(const _0x596a7d of this[_0x396149(0x38b)]()){if(!_0x596a7d)continue;const _0x2705a9=_0x596a7d[_0x396149(0x468)]||'';if(_0x2705a9[_0x396149(0x3c6)](_0xf09365[_0x396149(0x266)]))return!![];if(_0x545232==='HP'&&_0x2705a9[_0x396149(0x3c6)](_0xf09365[_0x396149(0x2dd)]))return!![];if(_0x545232==='MP'&&_0x2705a9['match'](_0xf09365['guardMpLifeSteal']))return!![];}return![];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x9fa)]=Game_BattlerBase['prototype'][_0x9c6fcf(0x875)],Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x875)]=function(){const _0x2deb3d=_0x9c6fcf;VisuMZ[_0x2deb3d(0x8f5)][_0x2deb3d(0x9fa)]['call'](this),this[_0x2deb3d(0x9c2)]();},Game_BattlerBase['prototype'][_0x9c6fcf(0x9c2)]=function(){const _0x58cd96=_0x9c6fcf;this[_0x58cd96(0x54b)]=![];},VisuMZ[_0x9c6fcf(0x8f5)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c7)],Game_BattlerBase[_0x9c6fcf(0x1ef)]['refresh']=function(){const _0x3d4583=_0x9c6fcf;this['_cache']={},VisuMZ['BattleCore'][_0x3d4583(0x46d)][_0x3d4583(0x7df)](this);},Game_BattlerBase['prototype'][_0x9c6fcf(0x4ca)]=function(_0xc4c0ae){const _0x4b730b=_0x9c6fcf;return this[_0x4b730b(0xb12)]=this[_0x4b730b(0xb12)]||{},this[_0x4b730b(0xb12)][_0xc4c0ae]!==undefined;},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6fb)]=function(){const _0x276a11=_0x9c6fcf;if(this['_cache']['hardDamageCap']!==undefined)return this[_0x276a11(0xb12)]['hardDamageCap'];const _0x136abf=/<DAMAGE CAP:[ ](\d+)>/i,_0x314f5b=this['traitObjects']()['map'](_0x14e39f=>_0x14e39f&&_0x14e39f['note'][_0x276a11(0x3c6)](_0x136abf)?Number(RegExp['$1']):0x0);let _0xf06cb1=_0x314f5b[_0x276a11(0x88e)]>0x0?Math[_0x276a11(0x716)](..._0x314f5b):0x0;if(_0xf06cb1<=0x0)_0xf06cb1=VisuMZ[_0x276a11(0x8f5)][_0x276a11(0x19c)][_0x276a11(0x9a9)][_0x276a11(0x579)];return this[_0x276a11(0xb12)][_0x276a11(0x6fb)]=_0xf06cb1,this[_0x276a11(0xb12)][_0x276a11(0x6fb)];},Game_BattlerBase['prototype']['softDamageCapRate']=function(){const _0x13446a=_0x9c6fcf;if(this[_0x13446a(0xb12)]['softDamageCap']!==undefined)return this[_0x13446a(0xb12)]['softDamageCap'];let _0x3d6a8f=VisuMZ[_0x13446a(0x8f5)][_0x13446a(0x19c)]['Damage'][_0x13446a(0x839)];const _0x40e7e7=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x47a070=this[_0x13446a(0x38b)]()[_0x13446a(0x1f9)](_0x24af77=>_0x24af77&&_0x24af77[_0x13446a(0x468)]['match'](_0x40e7e7)?Number(RegExp['$1'])/0x64:0x0);return _0x3d6a8f=_0x47a070['reduce']((_0x270851,_0x20ac7f)=>_0x270851+_0x20ac7f,_0x3d6a8f),this[_0x13446a(0xb12)][_0x13446a(0x955)]=_0x3d6a8f,this['_cache']['softDamageCap'][_0x13446a(0x59c)](0.01,0x1);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x6f5)]=Game_BattlerBase[_0x9c6fcf(0x1ef)]['die'],Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb5a)]=function(){const _0x3e7ec9=_0x9c6fcf;VisuMZ[_0x3e7ec9(0x8f5)][_0x3e7ec9(0x6f5)][_0x3e7ec9(0x7df)](this),SceneManager[_0x3e7ec9(0x319)]()&&(this[_0x3e7ec9(0x297)](_0x3e7ec9(0x79d)),this[_0x3e7ec9(0x9d6)]=undefined);},Game_BattlerBase['prototype'][_0x9c6fcf(0x338)]=function(){const _0x6e434c=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x6e434c(0x90f)]['_spriteset'])return null;return SceneManager[_0x6e434c(0x90f)][_0x6e434c(0x21f)][_0x6e434c(0xb60)](this);},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x975)]=function(){const _0xe32492=_0x9c6fcf;return VisuMZ['BattleCore'][_0xe32492(0x19c)][_0xe32492(0x6e6)][_0xe32492(0x153)];},Game_BattlerBase[_0x9c6fcf(0x1ef)]['svBattlerAnchorY']=function(){const _0x29dac2=_0x9c6fcf;return VisuMZ[_0x29dac2(0x8f5)][_0x29dac2(0x19c)]['Actor']['AnchorY'];},Game_BattlerBase['prototype']['svBattlerShadowVisible']=function(){const _0x440489=_0x9c6fcf;return this[_0x440489(0x552)]&&this[_0x440489(0x552)]()?VisuMZ[_0x440489(0x8f5)][_0x440489(0x19c)][_0x440489(0x6e6)]['Shadow']:VisuMZ[_0x440489(0x8f5)][_0x440489(0x19c)][_0x440489(0x7b3)][_0x440489(0x14a)];},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x757)]=function(){return!![];},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9b9)]=function(){return 0x0;},Game_BattlerBase[_0x9c6fcf(0x1ef)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6fc)]=function(_0xf307f9){const _0x538ab0=_0x9c6fcf;if(!_0xf307f9)return 0x0;let _0x4e3a6b=0x0;const _0x32bc9c=_0xf307f9['note'];return _0x32bc9c[_0x538ab0(0x3c6)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4e3a6b+=Number(RegExp['$1'])),_0x32bc9c['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4e3a6b+=Number(RegExp['$1'])),_0x4e3a6b;},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb08)]=function(_0x2870f0){const _0xae308b=_0x9c6fcf;if(!_0x2870f0)return 0x0;let _0x436dbe=0x0;const _0x425682=_0x2870f0[_0xae308b(0x468)];return _0x425682[_0xae308b(0x3c6)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x436dbe+=Number(RegExp['$1'])),_0x425682[_0xae308b(0x3c6)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x436dbe+=Number(RegExp['$2'])),_0x436dbe;},VisuMZ[_0x9c6fcf(0x8f5)]['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa62)],Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa62)]=function(_0x1859af){const _0x1dd9d=_0x9c6fcf;if(_0x1859af===this[_0x1dd9d(0x928)]()&&this[_0x1dd9d(0x705)]())return!![];return VisuMZ[_0x1dd9d(0x8f5)][_0x1dd9d(0x127)][_0x1dd9d(0x7df)](this,_0x1859af);},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x705)]=function(){const _0x155f61=_0x9c6fcf;return this[_0x155f61(0x54b)];},Game_BattlerBase[_0x9c6fcf(0x1ef)]['setImmortal']=function(_0xea7607){const _0x4a0d8d=_0x9c6fcf;_0xea7607?this[_0x4a0d8d(0x95d)]():this['removeImmortal']();},Game_BattlerBase[_0x9c6fcf(0x1ef)]['addImmortal']=function(){const _0x41c666=_0x9c6fcf;if(this[_0x41c666(0xb27)]())return;this[_0x41c666(0x54b)]=!![],this[_0x41c666(0x851)]=![];},Game_BattlerBase['prototype']['removeImmortal']=function(){const _0x3d821c=_0x9c6fcf,_0x4b2794=this[_0x3d821c(0x69e)]();this[_0x3d821c(0x54b)]=![],_0x4b2794&&this['_deathStateApplied']&&this[_0x3d821c(0xb5a)](),this['_deathStateApplied']=![],this[_0x3d821c(0x2c7)](),this[_0x3d821c(0xb27)]()&&_0x4b2794&&(this['performCollapse'](),this['requestMotionRefresh']());},VisuMZ['BattleCore']['Game_Action_numRepeats']=Game_Action[_0x9c6fcf(0x1ef)]['numRepeats'],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1c8)]=function(){const _0x858bd3=_0x9c6fcf;return this[_0x858bd3(0x9d3)]()?VisuMZ[_0x858bd3(0x8f5)][_0x858bd3(0x457)][_0x858bd3(0x7df)](this):0x0;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x581)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa77)],Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa77)]=function(){const _0x4251b0=_0x9c6fcf;this['subject']()&&this[_0x4251b0(0x38c)]()[_0x4251b0(0x683)]()?VisuMZ[_0x4251b0(0x8f5)][_0x4251b0(0x581)][_0x4251b0(0x7df)](this):this[_0x4251b0(0x4ec)]();},VisuMZ['BattleCore'][_0x9c6fcf(0x6ed)]=Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x683)],Game_BattlerBase[_0x9c6fcf(0x1ef)]['canAttack']=function(){const _0x416ce9=_0x9c6fcf;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x416ce9(0x8f5)][_0x416ce9(0x6ed)][_0x416ce9(0x7df)](this);},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2af)]=function(){const _0x5337fe=_0x9c6fcf;for(const _0x328739 of this[_0x5337fe(0x38b)]()){if(!_0x328739)continue;if(_0x328739['note'][_0x5337fe(0x3c6)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x24c)]=Game_Action['prototype'][_0x9c6fcf(0x3da)],Game_Action['prototype'][_0x9c6fcf(0x3da)]=function(){const _0x5b5839=_0x9c6fcf;this[_0x5b5839(0x38c)]()['canGuard']()&&VisuMZ[_0x5b5839(0x8f5)][_0x5b5839(0x24c)]['call'](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xb04)]=Game_BattlerBase['prototype']['canGuard'],Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x324)]=function(){const _0x59fa2c=_0x9c6fcf;if(!this[_0x59fa2c(0x4c4)]())return![];return VisuMZ[_0x59fa2c(0x8f5)]['Game_BattlerBase_canGuard'][_0x59fa2c(0x7df)](this);},Game_BattlerBase[_0x9c6fcf(0x1ef)]['canGuardBattleCore']=function(){const _0x11fdbc=_0x9c6fcf;for(const _0x22d68b of this['traitObjects']()){if(!_0x22d68b)continue;if(_0x22d68b[_0x11fdbc(0x468)][_0x11fdbc(0x3c6)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x464)]=function(){const _0x29eca7=_0x9c6fcf;for(const _0x366d11 of this[_0x29eca7(0x38b)]()){if(!_0x366d11)continue;if(_0x366d11[_0x29eca7(0x468)][_0x29eca7(0x3c6)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x9c6fcf(0x8f5)]['Game_BattlerBase_meetsUsableItemConditions']=Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x27e)],Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x27e)]=function(_0x5b1a1d){const _0x14e1c0=_0x9c6fcf;if(_0x5b1a1d&&_0x5b1a1d['note']['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x55c1c3=this[_0x14e1c0(0x616)]()['aliveMembers']();if(_0x55c1c3[_0x14e1c0(0x88e)]===0x1&&_0x55c1c3[0x0]===this)return![];}return VisuMZ[_0x14e1c0(0x8f5)]['Game_BattlerBase_meetsUsableItemConditions']['call'](this,_0x5b1a1d);},Game_Battler[_0x9c6fcf(0x1ef)]['allowRandomSpeed']=function(){const _0x223bd7=_0x9c6fcf;return VisuMZ[_0x223bd7(0x8f5)]['Settings'][_0x223bd7(0xb07)][_0x223bd7(0x3b6)];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x70d)]=Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2b4)],Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2b4)]=function(){const _0x46acec=_0x9c6fcf;if(SceneManager[_0x46acec(0x319)]()){if(BattleManager[_0x46acec(0x89e)]()){}else{if($gameTroop[_0x46acec(0xafe)]()<=0x0)return;}}if(SceneManager[_0x46acec(0x319)]()&&BattleManager['isTpb']()&&this['_lastRegenFrameCount']===Graphics[_0x46acec(0xb42)])return;this[_0x46acec(0x724)]=Graphics[_0x46acec(0xb42)],SceneManager[_0x46acec(0x319)]()&&this[_0x46acec(0x194)]('PreRegenerateJS'),VisuMZ[_0x46acec(0x8f5)]['Game_Battler_regenerateAll'][_0x46acec(0x7df)](this),SceneManager[_0x46acec(0x319)]()&&(this[_0x46acec(0x584)](),this[_0x46acec(0x194)](_0x46acec(0xad9)));},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x584)]=function(){const _0x5e8c51=_0x9c6fcf;if(SceneManager[_0x5e8c51(0x319)]())for(const _0x5cfd1d of this[_0x5e8c51(0x38b)]()){if(!_0x5cfd1d)continue;this['onRegeneratePlayStateAnimation'](_0x5cfd1d);}},Game_Battler[_0x9c6fcf(0x1ef)]['onRegeneratePlayStateAnimation']=function(_0x32a39b){const _0x17d9f7=_0x9c6fcf;if(!Imported[_0x17d9f7(0xb00)])return;if(!SceneManager[_0x17d9f7(0x319)]())return;if(this['isDead']())return;if(this['isHidden']())return;if(_0x32a39b['note']['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x6b7263=Number(RegExp['$1']);$gameTemp[_0x17d9f7(0x511)]([this],_0x6b7263,![],![]);}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xa68)]=Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6ba)],Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6ba)]=function(){const _0x3ef5ba=_0x9c6fcf;this[_0x3ef5ba(0x194)]('PreStartTurnJS'),VisuMZ[_0x3ef5ba(0x8f5)][_0x3ef5ba(0xa68)]['call'](this),this[_0x3ef5ba(0x194)](_0x3ef5ba(0x54d));},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x133)]=Game_Battler['prototype']['onTurnEnd'],Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x808)]=function(){const _0x53c921=_0x9c6fcf;this[_0x53c921(0x194)](_0x53c921(0x8d4)),VisuMZ[_0x53c921(0x8f5)]['Game_Battler_onTurnEnd'][_0x53c921(0x7df)](this),VisuMZ['BattleCore'][_0x53c921(0x19c)][_0x53c921(0xb07)][_0x53c921(0xb24)]&&this['removeBuffsAuto'](),this[_0x53c921(0x194)]('PostEndTurnJS');},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x194)]=function(_0x57fdf0){const _0xb74090=_0x9c6fcf;if(this[_0xb74090(0x6fe)]||this[_0xb74090(0x353)])return;const _0x310d69=VisuMZ[_0xb74090(0x8f5)][_0xb74090(0x19c)][_0xb74090(0xb07)];if(_0x310d69[_0x57fdf0])_0x310d69[_0x57fdf0][_0xb74090(0x7df)](this);for(const _0x50aef6 of this[_0xb74090(0x38b)]()){if(!_0x50aef6)continue;key=VisuMZ[_0xb74090(0x8f5)]['createKeyJS'](_0x50aef6,_0x57fdf0),VisuMZ[_0xb74090(0x8f5)]['JS'][key]&&VisuMZ['BattleCore']['JS'][key][_0xb74090(0x7df)](this,this,this,_0x50aef6,0x0);}},Game_Battler[_0x9c6fcf(0x1ef)]['chantStyle']=function(){const _0x18a907=_0x9c6fcf;return VisuMZ[_0x18a907(0x8f5)][_0x18a907(0x19c)][_0x18a907(0x6e6)]['ChantStyle']||![];},Game_Battler[_0x9c6fcf(0x1ef)]['isChanting']=function(){const _0x2d7738=_0x9c6fcf;if(this[_0x2d7738(0x57b)]()){if(this[_0x2d7738(0x3ce)]()){if(this[_0x2d7738(0x8ab)][_0x2d7738(0x40c)](_0xa3220a=>_0xa3220a[_0x2d7738(0x9d3)]()&&_0xa3220a[_0x2d7738(0x6d1)]()))return!![];}else{if(this[_0x2d7738(0x8ab)]['some'](_0x22da50=>_0x22da50['item']()&&_0x22da50['isMagicSkill']()))return!![];}}if(BattleManager[_0x2d7738(0x89e)]()&&this[_0x2d7738(0x259)]===_0x2d7738(0x591))return this[_0x2d7738(0x3ce)]()?this['currentAction']()&&this[_0x2d7738(0x9d5)]()[_0x2d7738(0x9d3)]()&&this['currentAction']()[_0x2d7738(0x6d1)]():this[_0x2d7738(0x9d5)]()&&this[_0x2d7738(0x9d5)]()[_0x2d7738(0x9d3)]()&&this['currentAction']()[_0x2d7738(0x3bf)]();return![];},Game_Battler[_0x9c6fcf(0x1ef)]['isCharging']=function(){const _0x404776=_0x9c6fcf;if(BattleManager['isTpb']()&&this[_0x404776(0x259)]===_0x404776(0x591))return this[_0x404776(0x3ce)]()?this[_0x404776(0x9d5)]()&&this[_0x404776(0x9d5)]()[_0x404776(0x9d3)]()&&!this[_0x404776(0x9d5)]()['isMagical']():this[_0x404776(0x9d5)]()&&this['currentAction']()[_0x404776(0x9d3)]()&&!this[_0x404776(0x9d5)]()[_0x404776(0x3bf)]();return![];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x1be)]=Game_Battler['prototype']['clearDamagePopup'],Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x78c)]=function(){const _0x27210f=_0x9c6fcf;VisuMZ[_0x27210f(0x8f5)][_0x27210f(0x1be)]['call'](this),this['_damagePopupArray']=[];},Game_Battler[_0x9c6fcf(0x1ef)]['isDamagePopupRequested']=function(){const _0x2d468f=_0x9c6fcf;if(!this[_0x2d468f(0x252)])this[_0x2d468f(0x78c)]();return this[_0x2d468f(0x252)][_0x2d468f(0x88e)]>0x0;},Game_Battler[_0x9c6fcf(0x1ef)]['startDamagePopup']=function(){const _0x4f6ba9=_0x9c6fcf;if(!SceneManager[_0x4f6ba9(0x319)]())return;if(BattleManager[_0x4f6ba9(0x3d4)]())return;if(!this[_0x4f6ba9(0x252)])this[_0x4f6ba9(0x78c)]();this[_0x4f6ba9(0x1c7)]();const _0x2cd1d2=this['battler']();if(_0x2cd1d2)_0x2cd1d2[_0x4f6ba9(0xb23)]();},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1c7)]=function(){const _0x5edd64=_0x9c6fcf,_0x52bef6=this[_0x5edd64(0x4df)]();if(_0x52bef6[_0x5edd64(0x7a2)]||_0x52bef6['evaded']){const _0x392e26=JsonEx[_0x5edd64(0x9ce)](_0x52bef6);_0x392e26['hpAffected']=![],_0x392e26[_0x5edd64(0x339)]=0x0,this['_damagePopupArray']['push'](_0x392e26);if(!_0x52bef6['hpDamage']&&!_0x52bef6['mpDamage'])return;}if(_0x52bef6[_0x5edd64(0x672)]){const _0x53cfb1=JsonEx[_0x5edd64(0x9ce)](_0x52bef6);_0x53cfb1[_0x5edd64(0x7a2)]=![],_0x53cfb1[_0x5edd64(0x61c)]=![],_0x53cfb1['mpDamage']=0x0,this[_0x5edd64(0x252)][_0x5edd64(0x4c6)](_0x53cfb1);}if(_0x52bef6[_0x5edd64(0x339)]!==0x0){const _0x1cf6a4=JsonEx[_0x5edd64(0x9ce)](_0x52bef6);_0x1cf6a4[_0x5edd64(0x7a2)]=![],_0x1cf6a4[_0x5edd64(0x61c)]=![],_0x1cf6a4[_0x5edd64(0x672)]=![],this[_0x5edd64(0x252)][_0x5edd64(0x4c6)](_0x1cf6a4);}},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x18e)]=function(){const _0x4ca2f0=_0x9c6fcf;if(!this[_0x4ca2f0(0x252)])this[_0x4ca2f0(0x78c)]();return VisuMZ[_0x4ca2f0(0x8f5)][_0x4ca2f0(0x19c)][_0x4ca2f0(0x9a9)][_0x4ca2f0(0x1aa)]?this[_0x4ca2f0(0x252)]['shift']():this[_0x4ca2f0(0x252)][_0x4ca2f0(0x373)]();},Game_Battler[_0x9c6fcf(0x1ef)]['setupTextPopup']=function(_0x27edae,_0x29b0a0){const _0x1642c7=_0x9c6fcf;if(!SceneManager[_0x1642c7(0x319)]())return;if(BattleManager[_0x1642c7(0x3d4)]())return;if(!this[_0x1642c7(0x338)]())return;if(_0x27edae['length']<=0x0)return;_0x29b0a0=_0x29b0a0||{},_0x29b0a0['textColor']=_0x29b0a0[_0x1642c7(0x3a1)]||_0x1642c7(0x4a8),_0x29b0a0['flashColor']=_0x29b0a0[_0x1642c7(0x1b1)]||[0x0,0x0,0x0,0x0],_0x29b0a0[_0x1642c7(0x665)]=_0x29b0a0[_0x1642c7(0x665)]||0x0,this[_0x1642c7(0x338)]()['setupTextPopup'](_0x27edae,_0x29b0a0);},Game_Battler[_0x9c6fcf(0x1ef)]['setupIconTextPopup']=function(_0x58cc67,_0x368c72,_0x594282){const _0x1fcbc3=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x1fcbc3(0x3d4)]())return;if(!this[_0x1fcbc3(0x338)]())return;if(_0x368c72[_0x1fcbc3(0x88e)]<=0x0)return;_0x594282=_0x594282||{},_0x594282['textColor']=_0x594282['textColor']||_0x1fcbc3(0x4a8),_0x594282[_0x1fcbc3(0x1b1)]=_0x594282['flashColor']||[0x0,0x0,0x0,0x0],_0x594282[_0x1fcbc3(0x665)]=_0x594282['flashDuration']||0x0,this['battler']()['setupIconTextPopup'](_0x58cc67,_0x368c72,_0x594282);},Game_Battler[_0x9c6fcf(0x1ef)]['notFocusValid']=function(){const _0x5c88a5=_0x9c6fcf;if(this[_0x5c88a5(0xb10)]())return![];if(this[_0x5c88a5(0x69e)]()&&this['isAppeared']())return!![];if(this[_0x5c88a5(0x3fd)]()&&this[_0x5c88a5(0xb41)]()){if(this['isDead']()&&this['allowCollapse']())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Battler_clearMotion']=Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1a1)],Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1a1)]=function(){const _0x230be4=_0x9c6fcf;VisuMZ[_0x230be4(0x8f5)][_0x230be4(0xaa5)][_0x230be4(0x7df)](this),this[_0x230be4(0x367)]();},Game_Battler[_0x9c6fcf(0x1ef)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x9c6fcf(0x1ef)]['isBattlerGrounded']=function(){return![];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xb0a)]=Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x60d)],Game_Battler[_0x9c6fcf(0x1ef)]['onBattleStart']=function(_0x4aee8b){const _0x52b81a=_0x9c6fcf;VisuMZ[_0x52b81a(0x8f5)][_0x52b81a(0xb0a)][_0x52b81a(0x7df)](this,_0x4aee8b),this[_0x52b81a(0x3b0)](_0x4aee8b),this[_0x52b81a(0x78c)]();},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3b0)]=function(_0x37f2e2){const _0x2607fb=_0x9c6fcf;this['setBattlerFlip'](![]),this[_0x2607fb(0x578)]=undefined,this[_0x2607fb(0x525)]=undefined;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x937)]=Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x307)],Game_Battler['prototype'][_0x9c6fcf(0x307)]=function(){const _0x469a80=_0x9c6fcf;VisuMZ['BattleCore']['Game_Battler_onBattleEnd'][_0x469a80(0x7df)](this),this[_0x469a80(0x603)]();},Game_Battler['prototype']['onBattleEndBattleCore']=function(){const _0x449680=_0x9c6fcf;this[_0x449680(0x578)]=undefined,this[_0x449680(0x525)]=undefined;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x71d)]=Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8f4)],Game_Battler['prototype'][_0x9c6fcf(0x8f4)]=function(_0x47b118){const _0x332697=_0x9c6fcf;VisuMZ[_0x332697(0x8f5)]['Game_Battler_performActionStart'][_0x332697(0x7df)](this,_0x47b118);if(!_0x47b118[_0x332697(0x53a)]()){const _0x3ac030=this[_0x332697(0x338)]();_0x3ac030&&_0x3ac030[_0x332697(0x635)]();}this[_0x332697(0x359)](![]);},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb45)]=function(){const _0x5e2463=_0x9c6fcf;this[_0x5e2463(0x9d6)]=undefined;const _0x1276e4=this['_flinched'];this[_0x5e2463(0x49f)]=![];if(BattleManager['isActiveTpb']()&&this[_0x5e2463(0x227)]()){const _0x1dcb4d=this[_0x5e2463(0x338)]();if(_0x1dcb4d&&_0x1276e4)_0x1dcb4d[_0x5e2463(0x635)]();return;}const _0x562bb8=this[_0x5e2463(0x338)]();if(_0x562bb8)_0x562bb8[_0x5e2463(0x20b)]();this[_0x5e2463(0x359)](![]),this[_0x5e2463(0x21b)]();},Game_Battler['prototype']['performActionMotions']=function(_0x24bbb0){const _0x111c5c=_0x9c6fcf;if(_0x24bbb0[_0x111c5c(0x2ab)]())this['performAttack']();else{if(_0x24bbb0[_0x111c5c(0x53a)]())this[_0x111c5c(0x297)]('guard');else{if(_0x24bbb0['isMagical']())this['requestMotion']('spell');else{if(_0x24bbb0[_0x111c5c(0x52e)]())[0x1,0x2,0x5,0x6][_0x111c5c(0x765)](_0x24bbb0[_0x111c5c(0x9d3)]()['damage'][_0x111c5c(0x930)])?this[_0x111c5c(0xb0e)]():this[_0x111c5c(0x297)](_0x111c5c(0x3c5));else _0x24bbb0['isItem']()&&this['requestMotion'](_0x111c5c(0x9d3));}}}},Game_Battler['prototype'][_0x9c6fcf(0x593)]=function(){const _0x42b050=_0x9c6fcf;return $dataSystem[_0x42b050(0x649)][0x0];},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x47f)]=function(){const _0x2b2cf8=_0x9c6fcf,_0x34e8ef=this[_0x2b2cf8(0x593)]();return _0x34e8ef?_0x34e8ef[_0x2b2cf8(0x6ae)]:0x0;},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2ea)]=function(_0xfddf1b){const _0xcd0b43=_0x9c6fcf;if(!$gameSystem[_0xcd0b43(0x95c)]())return;const _0x2691a5=this[_0xcd0b43(0x338)](),_0x56a4df=_0xfddf1b[_0xcd0b43(0x338)]();if(!_0x2691a5||!_0x56a4df)return;const _0x46bb8f=_0x56a4df[_0xcd0b43(0x761)],_0x2ffd6b=_0x56a4df[_0xcd0b43(0x46a)];this[_0xcd0b43(0x4af)](_0x46bb8f,_0x2ffd6b,0x0,![],_0xcd0b43(0x5c4),-0x1),_0x2691a5[_0xcd0b43(0x96f)]();const _0x3e6501=VisuMZ[_0xcd0b43(0x8f5)]['Settings'][_0xcd0b43(0x7fe)];let _0x131f39=(_0x56a4df[_0xcd0b43(0xac8)]+_0x2691a5[_0xcd0b43(0xac8)])/0x2;_0x131f39*=this[_0xcd0b43(0x552)]()?0x1:-0x1;let _0x44c62a=_0x3e6501[_0xcd0b43(0x7b0)]*(this[_0xcd0b43(0x552)]()?0x1:-0x1);_0xfddf1b[_0xcd0b43(0x994)](_0x131f39,_0x44c62a,0x0,![],_0xcd0b43(0x5c4)),_0x56a4df['updatePosition']();},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x297)]=function(_0xd62bd1){const _0x5368e6=_0x9c6fcf;if(SceneManager[_0x5368e6(0x319)]()){const _0x1e48d3=this[_0x5368e6(0x338)]();_0x1e48d3&&(_0x1e48d3[_0x5368e6(0x355)](_0xd62bd1),['swing','thrust','missile'][_0x5368e6(0x765)](_0xd62bd1)&&this[_0x5368e6(0xa42)]());}this['clearFreezeMotion']();},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa42)]=function(){},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x23c)]=function(_0x10be02){const _0xec6e9b=_0x9c6fcf;if(SceneManager[_0xec6e9b(0x319)]()){const _0x30675e=this[_0xec6e9b(0x338)]();if(_0x30675e)_0x30675e[_0xec6e9b(0x7b9)](_0x10be02);}},Game_Battler['prototype'][_0x9c6fcf(0x8f3)]=function(){const _0x46e842=_0x9c6fcf;if(SceneManager[_0x46e842(0x319)]()){const _0x2fba58=this[_0x46e842(0x47f)]();this[_0x46e842(0x23c)](_0x2fba58);}},Game_Battler['prototype'][_0x9c6fcf(0x8a7)]=function(_0x2a79aa,_0x368a47){const _0x4ec0d3=_0x9c6fcf;if(!_0x2a79aa)return;if(!_0x2a79aa[_0x4ec0d3(0x9d3)]())return;if(_0x2a79aa['isAttack']())return;if(_0x2a79aa['isGuard']())return;if(_0x2a79aa[_0x4ec0d3(0x7ea)]())return;if($gameTemp[_0x4ec0d3(0x5f6)])return;let _0x2775c6=0x0;const _0x5239e9=VisuMZ[_0x4ec0d3(0x8f5)][_0x4ec0d3(0x19c)][_0x4ec0d3(0x7fe)],_0x1e9364=_0x2a79aa[_0x4ec0d3(0x9d3)]()[_0x4ec0d3(0x468)];if(_0x1e9364[_0x4ec0d3(0x3c6)](/<CAST ANIMATION: (\d+)>/i))_0x2775c6=Number(RegExp['$1']);else{if(_0x1e9364[_0x4ec0d3(0x3c6)](/<NO CAST ANIMATION>/i))return;else{if(_0x2a79aa[_0x4ec0d3(0x1dd)]())_0x2775c6=_0x5239e9[_0x4ec0d3(0x9aa)];else{if(_0x2a79aa[_0x4ec0d3(0x5c8)]())_0x2775c6=_0x5239e9['CastPhysical'];else _0x2a79aa[_0x4ec0d3(0x6d1)]()&&(_0x2775c6=_0x5239e9['CastMagical']);}}}_0x2775c6>0x0&&$gameTemp[_0x4ec0d3(0x2c6)]([this],_0x2775c6,!!_0x368a47);},Game_Battler[_0x9c6fcf(0x1ef)]['performReflection']=function(){const _0x38f016=_0x9c6fcf;SoundManager['playReflection']();let _0x28e87f=VisuMZ[_0x38f016(0x8f5)][_0x38f016(0x19c)][_0x38f016(0x7fe)][_0x38f016(0x7f9)];_0x28e87f>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp['requestFauxAnimation']([this],_0x28e87f):$gameTemp[_0x38f016(0x2c6)]([this],_0x28e87f));},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3e0)]=function(){const _0x36332a=_0x9c6fcf;if(!$gameSystem['isSideView']())return![];if(!BattleManager[_0x36332a(0x947)]())return![];if(!this[_0x36332a(0x69e)]())return![];if(this['isInputting']())return!![];if(this[_0x36332a(0xa51)]())return!![];if(this[_0x36332a(0x3f7)]>=0x1)return!![];return![];},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Battler_performDamage']=Game_Battler[_0x9c6fcf(0x1ef)]['performDamage'],Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb5c)]=function(){const _0x3881f0=_0x9c6fcf;this['isActiveTpbReady']()&&(this['_performDamageMotion']=!![]),VisuMZ['BattleCore'][_0x3881f0(0x458)]['call'](this),this[_0x3881f0(0x3e4)](),this['performShakeFlinch']();},VisuMZ['BattleCore'][_0x9c6fcf(0x6c6)]=Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaca)],Game_Battler[_0x9c6fcf(0x1ef)]['performMiss']=function(){const _0x19710e=_0x9c6fcf;this[_0x19710e(0x3e0)]()&&(this[_0x19710e(0x9d6)]=!![]),VisuMZ[_0x19710e(0x8f5)][_0x19710e(0x6c6)]['call'](this),this[_0x19710e(0x3e4)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x747)]=Game_Battler['prototype']['performEvasion'],Game_Battler['prototype']['performEvasion']=function(){const _0x326088=_0x9c6fcf;this[_0x326088(0x3e0)]()&&(this[_0x326088(0x9d6)]=!![]),VisuMZ[_0x326088(0x8f5)][_0x326088(0x747)][_0x326088(0x7df)](this),this[_0x326088(0x3e4)]();},Game_Battler[_0x9c6fcf(0x1ef)]['performFlinch']=function(){const _0x266420=_0x9c6fcf;if(!$gameSystem[_0x266420(0x95c)]())return;if(this[_0x266420(0x49f)])return;this[_0x266420(0x49f)]=!![];const _0x5b9bd6=this[_0x266420(0x338)]();if(_0x5b9bd6)_0x5b9bd6['stepFlinch']();},Game_Battler['prototype'][_0x9c6fcf(0x37a)]=function(){const _0x44a564=_0x9c6fcf;if(!this[_0x44a564(0x466)]())return;const _0x2d3175=VisuMZ[_0x44a564(0x8f5)][_0x44a564(0x19c)][_0x44a564(0x6e6)];if(!(_0x2d3175['ShakeFlinch']??![]))return;if(this[_0x44a564(0xa8f)]<=0x0)return;const _0x2ee62a=this[_0x44a564(0x338)]();if(_0x2ee62a){const _0x518dde=this['_lastHpDamage'],_0x5cb97f=(_0x518dde/this[_0x44a564(0x8da)])[_0x44a564(0x59c)](0.8,0x1),_0x44c9b2=_0x2d3175['ShakeFlinchPower']??0x30,_0x83149c=_0x5cb97f*_0x44c9b2;_0x2ee62a[_0x44a564(0x6cc)](_0x83149c,_0x5cb97f);}},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x21b)]=function(){const _0x17b49d=_0x9c6fcf;if(this['isDead']()&&this[_0x17b49d(0xa8a)]!==_0x17b49d(0x79d)){this['requestMotion'](_0x17b49d(0x79d));return;}if(this[_0x17b49d(0xb27)]()&&this[_0x17b49d(0xa8a)]===_0x17b49d(0x79d))return;if(!!this[_0x17b49d(0x98e)])return;if(this[_0x17b49d(0x3fd)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x17b49d(0x3d7)]){if(this[_0x17b49d(0x338)]())this['battler']()[_0x17b49d(0x24f)]();}this[_0x17b49d(0x367)]();return;}if(this[_0x17b49d(0xa8a)]===_0x17b49d(0x341))return;if(this[_0x17b49d(0xa8a)]===_0x17b49d(0x965)&&!BattleManager[_0x17b49d(0x227)]())return;if(this[_0x17b49d(0xa8a)]===_0x17b49d(0xa23)&&!BattleManager[_0x17b49d(0x227)]())return;this['clearMotion']();if(BattleManager[_0x17b49d(0x947)]()&&this===BattleManager[_0x17b49d(0x3d7)])return;if(this['battler']()&&BattleManager[_0x17b49d(0x227)]()){this[_0x17b49d(0x338)]()[_0x17b49d(0x24f)](),this[_0x17b49d(0x367)]();return;}this[_0x17b49d(0x338)]()&&BattleManager[_0x17b49d(0x947)]()&&this!==BattleManager[_0x17b49d(0x3d7)]&&this[_0x17b49d(0x338)]()[_0x17b49d(0x24f)]();},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x28a)]=function(){const _0x88b591=_0x9c6fcf;if(!this[_0x88b591(0xb41)]())return![];const _0x3ab273=this[_0x88b591(0x338)]();if(!_0x3ab273)return![];const _0x10cad7=_0x3ab273[_0x88b591(0x651)];if(!_0x10cad7)return![];const _0x3c6ffe=_0x10cad7[_0x88b591(0x3e2)];return _0x3c6ffe&&!_0x3c6ffe[_0x88b591(0xaf7)];},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x979)]=function(){const _0x2b6164=_0x9c6fcf;return this[_0x2b6164(0x5b9)];},Game_Battler[_0x9c6fcf(0x1ef)]['setBattlerFlip']=function(_0x35a7d2){const _0x5ac73a=_0x9c6fcf;if(!$gameSystem[_0x5ac73a(0x95c)]())return;this[_0x5ac73a(0x5b9)]=_0x35a7d2;const _0x454747=this['battler']();if(_0x454747)_0x454747[_0x5ac73a(0x8e3)]();},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8a4)]=function(_0x39fb0d,_0x10cc37,_0x1695a2){const _0x3d792f=_0x9c6fcf;if(!$gameSystem[_0x3d792f(0x95c)]())return;const _0x38abc6=this['battler']();if(!_0x38abc6)return;if(_0x39fb0d===_0x38abc6[_0x3d792f(0x761)])return;let _0x117429=![];if(this['isActor']()){if(_0x39fb0d>_0x38abc6[_0x3d792f(0x761)])_0x117429=!![];if(_0x39fb0d<_0x38abc6['_baseX'])_0x117429=![];}else{if(this['isEnemy']()){if(_0x39fb0d>_0x38abc6['_baseX'])_0x117429=![];if(_0x39fb0d<_0x38abc6['_baseX'])_0x117429=!![];}};this[_0x3d792f(0x359)](_0x1695a2?!_0x117429:_0x117429),_0x38abc6[_0x3d792f(0x8e3)]();},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x994)]=function(_0xe3854c,_0x5c53d3,_0x401ec7,_0x231b55,_0x5eeefc){const _0x46b0dd=_0x9c6fcf;if(!$gameSystem[_0x46b0dd(0x95c)]())return;const _0x2cb71d=this[_0x46b0dd(0x338)]();if(!_0x2cb71d)return;if(_0x231b55)this[_0x46b0dd(0x8a4)](_0xe3854c+_0x2cb71d[_0x46b0dd(0x761)],_0x5c53d3+_0x2cb71d['_baseY'],![]);_0xe3854c+=_0x2cb71d[_0x46b0dd(0x761)]-_0x2cb71d[_0x46b0dd(0x606)],_0x5c53d3+=_0x2cb71d['_baseY']-_0x2cb71d[_0x46b0dd(0x17a)],_0x2cb71d[_0x46b0dd(0x660)](_0xe3854c,_0x5c53d3,_0x401ec7);if(Imported[_0x46b0dd(0xb00)])_0x2cb71d[_0x46b0dd(0x3f4)](_0x5eeefc||_0x46b0dd(0x5c4));},Game_Battler['prototype']['moveBattlerToPoint']=function(_0x2534f5,_0x38e80c,_0x16a87a,_0x3b45b0,_0x4745b1,_0x206e1c){const _0x42765a=_0x9c6fcf;if(!$gameSystem['isSideView']())return;const _0x1a6ff2=this[_0x42765a(0x338)]();if(!_0x1a6ff2)return;if(_0x2534f5===Infinity||_0x38e80c===Infinity)return;if(isNaN(_0x2534f5)||isNaN(_0x38e80c))return;_0x206e1c=_0x206e1c||0x0;if(_0x206e1c>0x0){if(_0x1a6ff2[_0x42765a(0x761)]>_0x2534f5)_0x2534f5+=_0x1a6ff2[_0x42765a(0xac8)]/0x2+_0x206e1c;if(_0x1a6ff2[_0x42765a(0x761)]<_0x2534f5)_0x2534f5-=_0x1a6ff2[_0x42765a(0xac8)]/0x2+_0x206e1c;}if(_0x3b45b0)this[_0x42765a(0x8a4)](_0x2534f5,_0x38e80c,![]);_0x2534f5-=_0x1a6ff2[_0x42765a(0x606)],_0x38e80c-=_0x1a6ff2['_homeY'],_0x1a6ff2[_0x42765a(0x660)](_0x2534f5,_0x38e80c,_0x16a87a);if(Imported[_0x42765a(0xb00)])_0x1a6ff2[_0x42765a(0x3f4)](_0x4745b1||_0x42765a(0x5c4));},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaf4)]=function(_0x53aab0,_0x26bafd,_0x1eb961,_0x341715,_0x392374){const _0x2c404f=_0x9c6fcf;if(!$gameSystem[_0x2c404f(0x95c)]())return;const _0x2bb72f=this[_0x2c404f(0x338)]();if(!_0x2bb72f)return;if(_0x341715)this['setBattlerFacePoint'](_0x53aab0+_0x2bb72f[_0x2c404f(0x761)],_0x26bafd+_0x2bb72f[_0x2c404f(0x46a)],![]);_0x53aab0+=_0x2bb72f['_homeX'],_0x26bafd+=_0x2bb72f[_0x2c404f(0x17a)],_0x2bb72f[_0x2c404f(0x83d)](_0x53aab0,_0x26bafd,_0x1eb961,_0x392374),this[_0x2c404f(0x578)]=_0x53aab0,this[_0x2c404f(0x525)]=_0x26bafd;},Game_Battler['prototype'][_0x9c6fcf(0x379)]=function(_0x1a5b40,_0x7f5048,_0x5d11ef,_0x482f60,_0x214dc0,_0x360901){const _0x41dfa1=_0x9c6fcf;if(!$gameSystem[_0x41dfa1(0x95c)]())return;const _0x6ea51=this[_0x41dfa1(0x338)]();if(!_0x6ea51)return;_0x360901=_0x360901||0x0;if(_0x360901>0x0){if(_0x6ea51[_0x41dfa1(0x761)]>_0x1a5b40)_0x1a5b40+=_0x6ea51[_0x41dfa1(0xac8)]/0x2+_0x360901;if(_0x6ea51[_0x41dfa1(0x761)]<_0x1a5b40)_0x1a5b40-=_0x6ea51[_0x41dfa1(0xac8)]/0x2+_0x360901;}if(_0x482f60)this[_0x41dfa1(0x8a4)](_0x1a5b40,_0x7f5048,![]);_0x6ea51[_0x41dfa1(0x83d)](_0x1a5b40,_0x7f5048,_0x5d11ef,_0x214dc0),this[_0x41dfa1(0x578)]=_0x1a5b40,this['_forcedHomeY']=_0x7f5048;},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7cb)]=function(_0x5869d7,_0x4be704,_0x4a1ea3){const _0x5d23ac=_0x9c6fcf;if(!$gameSystem[_0x5d23ac(0x95c)]())return;const _0x461449=this[_0x5d23ac(0x338)]();if(!_0x461449)return;_0x461449[_0x5d23ac(0x74f)](_0x5869d7,_0x4be704,_0x4a1ea3);},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7b1)]=function(_0x181024,_0x309a7f){const _0x4ec0dd=_0x9c6fcf;if(!$gameSystem['isSideView']())return;const _0x419858=this[_0x4ec0dd(0x338)]();if(!_0x419858)return;_0x419858[_0x4ec0dd(0x5bf)](_0x181024,_0x309a7f);},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9b4)]=function(_0x2fa136,_0x539428,_0x23eae0,_0x4dd4e6){const _0x11628e=_0x9c6fcf;if(!$gameSystem['isSideView']())return;const _0x206795=this[_0x11628e(0x338)]();if(!_0x206795)return;_0x206795[_0x11628e(0x4d0)](_0x2fa136,_0x539428,_0x23eae0,_0x4dd4e6);},Game_Battler['prototype'][_0x9c6fcf(0x501)]=function(_0x2380c7,_0x42d27e,_0x2659b2,_0x3213f6){const _0x35011f=_0x9c6fcf;if(!$gameSystem[_0x35011f(0x95c)]())return;const _0xee7f27=this['battler']();if(!_0xee7f27)return;this[_0x35011f(0x552)]()&&(_0x2380c7*=-0x1,_0x42d27e*=-0x1),_0xee7f27[_0x35011f(0xa83)](_0x2380c7,_0x42d27e,_0x2659b2,_0x3213f6);},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x357)]=function(_0x9e5d09,_0x5eda95,_0x57159a,_0x5578ca){const _0x41d7bb=_0x9c6fcf;if(!$gameSystem['isSideView']())return;const _0x363491=this[_0x41d7bb(0x338)]();if(!_0x363491)return;_0x363491[_0x41d7bb(0x213)](_0x9e5d09,_0x5eda95,_0x57159a,_0x5578ca);},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x725)]=function(_0x364d87,_0x3c5ba1,_0x425723){const _0x55cfbb=_0x9c6fcf;if(!$gameSystem[_0x55cfbb(0x95c)]())return;const _0x4be0e4=this[_0x55cfbb(0x338)]();if(!_0x4be0e4)return;_0x4be0e4['startOpacity'](_0x364d87,_0x3c5ba1,_0x425723);},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x367)]=function(){const _0x3429be=_0x9c6fcf,_0x55ad9e=!!this[_0x3429be(0x98e)];this[_0x3429be(0x98e)]=undefined,_0x55ad9e&&(this[_0x3429be(0x21b)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x440)]=function(){const _0x36c286=_0x9c6fcf;if(!SceneManager[_0x36c286(0x319)]())return;const _0x321a2a=this[_0x36c286(0x338)]();if(!_0x321a2a)return;let _0x5cdf88=this[_0x36c286(0x552)]()?_0x321a2a['_weaponSprite']:_0x321a2a[_0x36c286(0x651)][_0x36c286(0xa99)];_0x5cdf88&&_0x5cdf88[_0x36c286(0xa66)](0x0);},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x75e)]=function(_0x28571c,_0x3d74d6,_0x2bccef){const _0x19cd20=_0x9c6fcf;if(this[_0x19cd20(0x3fd)]()&&!this[_0x19cd20(0xb41)]())return;let _0x508d84=0x0,_0x2aa50a=0x0;_0x28571c['match'](/ATTACK[ ](\d+)/i)&&(_0x2aa50a=Number(RegExp['$1']),_0x2aa50a--);if(this[_0x19cd20(0x552)]()){const _0xc99296=this[_0x19cd20(0x26b)]();_0x508d84=_0xc99296[_0x2aa50a]?_0xc99296[_0x2aa50a]['wtypeId']:0x0;}else this[_0x19cd20(0x3fd)]()&&(_0x508d84=this[_0x19cd20(0x2c1)]()['wtypeId']||0x0);const _0x11b2b5=$dataSystem['attackMotions'][_0x508d84];_0x28571c[_0x19cd20(0x3c6)](/attack/i)&&(_0x28571c=['thrust',_0x19cd20(0x36e),_0x19cd20(0x59a)][_0x11b2b5[_0x19cd20(0x930)]]||_0x19cd20(0x36e)),this['_freezeMotionData']={'motionType':_0x28571c,'weaponImageId':_0x3d74d6?_0x11b2b5[_0x19cd20(0x6ae)]:0x0,'pattern':_0x2bccef};},Game_Battler['prototype'][_0x9c6fcf(0x2be)]=function(_0xfab710){const _0xccd3f5=_0x9c6fcf;if(!_0xfab710)return![];return _0xfab710[_0xccd3f5(0x616)]()===this[_0xccd3f5(0x616)]();},Game_Battler['prototype'][_0x9c6fcf(0x807)]=function(_0x10a346){const _0x34f920=_0x9c6fcf;if(!_0x10a346)return![];return _0x10a346[_0x34f920(0xa70)]()===this['friendsUnit']();},Game_Battler[_0x9c6fcf(0x1ef)]['hasStaticSvBattler']=function(){return![];},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x394)]=function(){const _0x1b026c=_0x9c6fcf;return this[_0x1b026c(0xaaa)]()[_0x1b026c(0x3c6)](/\$/i);},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x394)]=function(){const _0x2749b7=_0x9c6fcf;return this['hasSvBattler']()&&this[_0x2749b7(0x7db)]()[_0x2749b7(0x3c6)](/\$/i);},VisuMZ['BattleCore']['Game_Actor_setup']=Game_Actor['prototype']['setup'],Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa66)]=function(_0x2c983c){const _0x5268dc=_0x9c6fcf;VisuMZ[_0x5268dc(0x8f5)][_0x5268dc(0xac6)][_0x5268dc(0x7df)](this,_0x2c983c),this['initBattlePortrait']();},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3de)]=function(){const _0x36572c=_0x9c6fcf;this['_battlePortrait']='',this['actor']()&&this['actor']()[_0x36572c(0x468)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x36572c(0x853)]=String(RegExp['$1']));},Game_Actor[_0x9c6fcf(0x1ef)]['getBattlePortraitFilename']=function(){const _0x2e848e=_0x9c6fcf;if(this['getBattlePortrait']()!=='')return this['getBattlePortrait']();else{if(Imported[_0x2e848e(0x9f2)]&&this[_0x2e848e(0x34c)]()!=='')return this['getMenuImage']();}return'';},Game_Actor[_0x9c6fcf(0x1ef)]['getBattlePortrait']=function(){const _0x82c698=_0x9c6fcf;if(this[_0x82c698(0x853)]===undefined)this['initBattlePortrait']();return this[_0x82c698(0x853)];},Game_Actor['prototype'][_0x9c6fcf(0xa63)]=function(_0x3b26d7){const _0x1583d6=_0x9c6fcf;if(this['_battlePortrait']===undefined)this[_0x1583d6(0x3de)]();this[_0x1583d6(0x853)]=_0x3b26d7;if(SceneManager[_0x1583d6(0x319)]()&&$gameParty[_0x1583d6(0x14b)]()[_0x1583d6(0x765)](this)){const _0x57a62f=SceneManager[_0x1583d6(0x90f)][_0x1583d6(0x197)];_0x57a62f&&_0x57a62f[_0x1583d6(0x1c9)](this);}},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x167)]=function(){return!![];},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xad4)]=function(){const _0x14344a=_0x9c6fcf;if(!this[_0x14344a(0x260)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x14344a(0x1ef)][_0x14344a(0xad4)]['call'](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x8fe)]=Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x412)],Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x412)]=function(){const _0x28ac41=_0x9c6fcf;if(BattleManager['_autoBattle']&&!ConfigManager['autoBattleUseSkills'])return this['makeActionListAutoAttack']();else{return VisuMZ[_0x28ac41(0x8f5)][_0x28ac41(0x8fe)][_0x28ac41(0x7df)](this);;}},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x685)]=function(){const _0x5c3508=_0x9c6fcf,_0x1afe73=[],_0x2f4242=new Game_Action(this);return _0x2f4242[_0x5c3508(0xa77)](),_0x1afe73[_0x5c3508(0x4c6)](_0x2f4242),_0x1afe73;},Game_Actor['prototype'][_0x9c6fcf(0x32c)]=function(){const _0x3bbf3f=_0x9c6fcf;return this[_0x3bbf3f(0x960)]()[_0x3bbf3f(0x468)][_0x3bbf3f(0x3c6)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x3bbf3f(0x8f5)][_0x3bbf3f(0x19c)][_0x3bbf3f(0xac0)][_0x3bbf3f(0x5a3)];},Game_Actor['prototype']['svBattlerAnchorX']=function(){const _0x223cf7=_0x9c6fcf;if(this[_0x223cf7(0xb12)][_0x223cf7(0x6bf)]!==undefined)return this['_cache'][_0x223cf7(0x6bf)];return this[_0x223cf7(0x23a)]()[_0x223cf7(0x468)][_0x223cf7(0x3c6)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x223cf7(0xb12)][_0x223cf7(0x6bf)]=eval(RegExp['$1']),this[_0x223cf7(0xb12)][_0x223cf7(0x286)]=eval(RegExp['$2'])):this[_0x223cf7(0xb12)]['svAnchorX']=Game_Battler[_0x223cf7(0x1ef)]['svBattlerAnchorX'][_0x223cf7(0x7df)](this),this[_0x223cf7(0xb12)][_0x223cf7(0x6bf)];},Game_Actor[_0x9c6fcf(0x1ef)]['svBattlerAnchorY']=function(){const _0x2981b8=_0x9c6fcf;if(this[_0x2981b8(0xb12)][_0x2981b8(0x286)]!==undefined)return this[_0x2981b8(0xb12)][_0x2981b8(0x286)];return this[_0x2981b8(0x23a)]()[_0x2981b8(0x468)][_0x2981b8(0x3c6)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x2981b8(0x6bf)]=eval(RegExp['$1']),this[_0x2981b8(0xb12)][_0x2981b8(0x286)]=eval(RegExp['$2'])):this['_cache'][_0x2981b8(0x286)]=Game_Battler['prototype'][_0x2981b8(0x1e2)][_0x2981b8(0x7df)](this),this[_0x2981b8(0xb12)][_0x2981b8(0x286)];},Game_Actor[_0x9c6fcf(0x1ef)]['svBattlerShadowVisible']=function(){const _0x5c03be=_0x9c6fcf;if(this[_0x5c03be(0xb12)][_0x5c03be(0x385)]!==undefined)return this[_0x5c03be(0xb12)][_0x5c03be(0x385)];if(this[_0x5c03be(0x23a)]()[_0x5c03be(0x468)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x5c03be(0xb12)][_0x5c03be(0x385)]=!![];else this[_0x5c03be(0x23a)]()['note'][_0x5c03be(0x3c6)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x5c03be(0x385)]=![]:this[_0x5c03be(0xb12)][_0x5c03be(0x385)]=Game_Battler[_0x5c03be(0x1ef)]['svBattlerShadowVisible'][_0x5c03be(0x7df)](this);return this[_0x5c03be(0xb12)][_0x5c03be(0x385)];},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x757)]=function(){const _0x32924a=_0x9c6fcf;return VisuMZ[_0x32924a(0x8f5)]['Settings'][_0x32924a(0x6e6)][_0x32924a(0xa13)];},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa42)]=function(){const _0x51aec8=_0x9c6fcf,_0x50e5be=this[_0x51aec8(0x26b)](),_0x4bc5a1=_0x50e5be[0x0]?_0x50e5be[0x0]['wtypeId']:0x0,_0x28ae55=$dataSystem[_0x51aec8(0x649)][_0x4bc5a1];_0x28ae55&&this[_0x51aec8(0x23c)](_0x28ae55[_0x51aec8(0x6ae)]);},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2b9)]=function(_0x3cf5b7){const _0x5a873=_0x9c6fcf;Game_Battler[_0x5a873(0x1ef)][_0x5a873(0x2b9)][_0x5a873(0x7df)](this,_0x3cf5b7),this[_0x5a873(0xb25)](_0x3cf5b7);},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x593)]=function(){const _0x3755c2=_0x9c6fcf,_0x3e0b3a=this[_0x3755c2(0x26b)](),_0x12c668=_0x3e0b3a[0x0]?_0x3e0b3a[0x0][_0x3755c2(0xb2b)]:0x0;return $dataSystem[_0x3755c2(0x649)][_0x12c668];},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa0a)]=function(_0x52d0a8){const _0x41b2f1=_0x9c6fcf;_0x52d0a8=_0x52d0a8||0x1,_0x52d0a8--;const _0x34a41e=this[_0x41b2f1(0x26b)]();return _0x34a41e[_0x52d0a8]?_0x34a41e[_0x52d0a8]['animationId']:0x0;},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x230)]=function(_0x1cce97){const _0x1706a9=_0x9c6fcf;_0x1cce97=_0x1cce97||0x1,_0x1cce97--;const _0x1eb1da=this[_0x1706a9(0x26b)](),_0x5ef2fc=_0x1eb1da[_0x1cce97]?_0x1eb1da[_0x1cce97][_0x1706a9(0xb2b)]:0x0;return $dataSystem['attackMotions'][_0x5ef2fc];},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2ba)]=function(_0x533a6c){const _0x333982=_0x9c6fcf;_0x533a6c=_0x533a6c||0x1,_0x533a6c--;const _0x43181a=this[_0x333982(0x26b)](),_0x7f2a7b=_0x43181a[_0x533a6c]?_0x43181a[_0x533a6c][_0x333982(0xb2b)]:0x0,_0xd30e00=$dataSystem['attackMotions'][_0x7f2a7b];if(_0xd30e00){if(_0xd30e00[_0x333982(0x930)]===0x0)this[_0x333982(0x297)](_0x333982(0x53f));else{if(_0xd30e00['type']===0x1)this['requestMotion']('swing');else _0xd30e00['type']===0x2&&this[_0x333982(0x297)](_0x333982(0x59a));}this[_0x333982(0x23c)](_0xd30e00[_0x333982(0x6ae)]);}},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3f3)]=function(_0x3bc15d){const _0x2702df=_0x9c6fcf;if(this['isActor']()){const _0x3b9180=this[_0x2702df(0x26b)]();if(_0x3b9180[_0x2702df(0x88e)]>0x0){const _0x24c5fd=_0x3b9180[_0x3bc15d];if(_0x24c5fd)_0x3bc15d=this['equips']()[_0x2702df(0x9c4)](_0x24c5fd);}}this['_activeWeaponSlot']=_0x3bc15d||0x0,this[_0x2702df(0xb12)]={};},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6b5)]=function(){const _0x3ea65b=_0x9c6fcf;this[_0x3ea65b(0x451)]=this['_activeWeaponSlot']||0x0,this[_0x3ea65b(0x451)]++,this['_cache']={};},Game_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x659)]=function(){this['_activeWeaponSlot']=undefined,this['_cache']={};},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x69b)]=Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x598)],Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x598)]=function(){const _0x2ef483=_0x9c6fcf;let _0x31f0eb=VisuMZ['BattleCore'][_0x2ef483(0x69b)][_0x2ef483(0x7df)](this);if(this['_tempEquipCheck'])return _0x31f0eb;if(this[_0x2ef483(0x451)]!==undefined){this[_0x2ef483(0x84d)]=!![];const _0x3baee2=this['equipSlots']();for(let _0x4703d3=0x0;_0x4703d3<_0x3baee2[_0x2ef483(0x88e)];_0x4703d3++){_0x3baee2[_0x4703d3]===0x1&&this[_0x2ef483(0x451)]!==_0x4703d3&&(_0x31f0eb[_0x4703d3]=null);}this[_0x2ef483(0x84d)]=undefined;}return _0x31f0eb;},Window_BattleLog[_0x9c6fcf(0x1ef)]['getDualWieldTimes']=function(_0x2c15be){const _0xb6003e=_0x9c6fcf;return _0x2c15be[_0xb6003e(0x552)]()?_0x2c15be[_0xb6003e(0x26b)]()[_0xb6003e(0x88e)]||0x1:0x1;},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x886)]=function(_0x58f677,_0x42b00){const _0x170944=_0x9c6fcf;_0x58f677&&_0x58f677[_0x170944(0x552)]()&&_0x58f677[_0x170944(0x3f3)](_0x42b00),this[_0x170944(0x792)]();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9a8)]=function(_0xa52ecf){const _0x472950=_0x9c6fcf;_0xa52ecf&&_0xa52ecf['isActor']()&&_0xa52ecf[_0x472950(0x659)](),this[_0x472950(0x792)]();},Game_Actor[_0x9c6fcf(0x1ef)]['battleUIOffsetX']=function(){const _0x3aec62=_0x9c6fcf;let _0x491f94=_0x3aec62(0x9b9);if(this[_0x3aec62(0x4ca)](_0x491f94))return this[_0x3aec62(0xb12)][_0x491f94];return this['_cache'][_0x491f94]=this[_0x3aec62(0x6fc)](this[_0x3aec62(0x23a)]()),this['_cache'][_0x491f94];},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x512)]=function(){const _0x8e65f7=_0x9c6fcf;let _0x3a1b53=_0x8e65f7(0x512);if(this[_0x8e65f7(0x4ca)](_0x3a1b53))return this[_0x8e65f7(0xb12)][_0x3a1b53];return this['_cache'][_0x3a1b53]=this['createBattleUIOffsetY'](this[_0x8e65f7(0x23a)]()),this['_cache'][_0x3a1b53];},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Enemy_setup']=Game_Enemy[_0x9c6fcf(0x1ef)]['setup'],Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa66)]=function(_0x4c8ae3,_0x2b5e58,_0x36a5ff){const _0x4bb6ed=_0x9c6fcf;_0x4c8ae3=DataManager['swapEnemyIDs'](_0x4c8ae3),VisuMZ[_0x4bb6ed(0x8f5)][_0x4bb6ed(0x170)][_0x4bb6ed(0x7df)](this,_0x4c8ae3,_0x2b5e58,_0x36a5ff),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x4bb6ed(0x347)](),this[_0x4bb6ed(0x318)](),this[_0x4bb6ed(0x3a4)](),Imported[_0x4bb6ed(0x6d4)]&&this[_0x4bb6ed(0x2fd)]();},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x318)]=function(){const _0x6cd7e3=_0x9c6fcf,_0xa11a7a=VisuMZ[_0x6cd7e3(0x8f5)]['Settings'][_0x6cd7e3(0x7b3)];this[_0x6cd7e3(0x172)]=_0xa11a7a[_0x6cd7e3(0x403)],this[_0x6cd7e3(0x25b)]={},this[_0x6cd7e3(0x71b)]();},Game_Enemy['prototype']['setupBattleCoreData']=function(){const _0x4deb63=_0x9c6fcf,_0x9bd04b=VisuMZ[_0x4deb63(0x8f5)][_0x4deb63(0x19c)][_0x4deb63(0x7b3)],_0xae8ae0=this[_0x4deb63(0x2c9)]()[_0x4deb63(0x468)];this[_0x4deb63(0x25b)]={'name':'','wtypeId':_0x9bd04b[_0x4deb63(0x220)],'collapse':_0x9bd04b[_0x4deb63(0x670)],'motionIdle':_0x9bd04b['MotionIdle'],'width':_0x9bd04b['Width']||0x40,'height':_0x9bd04b['Height']||0x40,'anchorX':_0x9bd04b[_0x4deb63(0x153)]||0x0,'anchorY':_0x9bd04b[_0x4deb63(0xb56)]||0x0,'shadow':_0x9bd04b['Shadow']};_0xae8ae0[_0x4deb63(0x3c6)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x4deb63(0x172)]=Number(RegExp['$1']));const _0x83604b=this[_0x4deb63(0x25b)];if(_0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW BATTLER: (.*)>/i))_0x83604b[_0x4deb63(0x613)]=String(RegExp['$1']);else{if(_0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x5c792e=String(RegExp['$1'])[_0x4deb63(0x8d8)](/[\r\n]+/)['remove']('');_0x83604b[_0x4deb63(0x613)]=DataManager[_0x4deb63(0x7eb)](_0x5c792e);}}_0xae8ae0['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x83604b[_0x4deb63(0x8e6)]=eval(RegExp['$1']),_0x83604b[_0x4deb63(0x9e4)]=eval(RegExp['$2']));if(_0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW COLLAPSE>/i))_0x83604b[_0x4deb63(0x658)]=!![];else _0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x83604b[_0x4deb63(0x658)]=![]);if(_0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW SHOW SHADOW>/i))_0x83604b[_0x4deb63(0x3e3)]=!![];else _0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x83604b[_0x4deb63(0x3e3)]=![]);if(_0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x83604b[_0x4deb63(0x485)]=String(RegExp['$1'])[_0x4deb63(0x3b9)]()[_0x4deb63(0x4a5)]();else{if(_0xae8ae0['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x4a612c=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x4deb63(0x7e5)]('');_0x83604b['motionIdle']=DataManager[_0x4deb63(0x7eb)](_0x4a612c);}}_0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x83604b[_0x4deb63(0xac8)]=Number(RegExp['$1']),_0x83604b[_0x4deb63(0x202)]=Number(RegExp['$2']));if(_0xae8ae0[_0x4deb63(0x3c6)](/<SIDEVIEW WEAPON: (.*)>/i))_0x83604b[_0x4deb63(0xb2b)]=DataManager[_0x4deb63(0x597)](RegExp['$1']);else{if(_0xae8ae0['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x47816a=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x4deb63(0x7e5)](''),_0x3adca4=DataManager[_0x4deb63(0x7eb)](_0x47816a);_0x83604b[_0x4deb63(0xb2b)]=DataManager['getWtypeIdWithName'](_0x3adca4);}}if(Imported[_0x4deb63(0x6d4)]){const _0x1fe6e1=this[_0x4deb63(0x7a6)]();for(const _0x3a1dd0 of _0x1fe6e1){const _0x44a5c1=this['traitSet'](_0x3a1dd0)[_0x4deb63(0xa09)][_0x4deb63(0x5ed)]()[_0x4deb63(0x4a5)](),_0x262792=_0x3a1dd0['toUpperCase']()[_0x4deb63(0x4a5)]();if(_0xae8ae0[_0x4deb63(0x3c6)](VisuMZ[_0x4deb63(0x580)][_0x4deb63(0x942)][_0x4deb63(0x43d)[_0x4deb63(0x9da)](_0x262792,_0x44a5c1)]))_0x83604b[_0x4deb63(0x613)]=String(RegExp['$1']);else{if(_0xae8ae0['match'](VisuMZ['ElementStatusCore'][_0x4deb63(0x942)][_0x4deb63(0x181)['format'](_0x262792,_0x44a5c1)])){const _0x284306=String(RegExp['$1'])[_0x4deb63(0x8d8)](/[\r\n]+/)[_0x4deb63(0x7e5)]('');_0x83604b[_0x4deb63(0x613)]=DataManager[_0x4deb63(0x7eb)](_0x284306);}}if(_0xae8ae0[_0x4deb63(0x3c6)](VisuMZ[_0x4deb63(0x580)][_0x4deb63(0x942)][_0x4deb63(0x755)[_0x4deb63(0x9da)](_0x262792,_0x44a5c1)]))_0x83604b[_0x4deb63(0xb2b)]=DataManager[_0x4deb63(0x597)](RegExp['$1']);else{if(_0xae8ae0[_0x4deb63(0x3c6)](VisuMZ[_0x4deb63(0x580)][_0x4deb63(0x942)][_0x4deb63(0x275)[_0x4deb63(0x9da)](_0x262792,_0x44a5c1)])){const _0x28efe1=String(RegExp['$1'])[_0x4deb63(0x8d8)](/[\r\n]+/)[_0x4deb63(0x7e5)](''),_0x286c96=DataManager[_0x4deb63(0x7eb)](_0x28efe1);_0x83604b[_0x4deb63(0xb2b)]=DataManager[_0x4deb63(0x597)](_0x286c96);}}if(_0xae8ae0[_0x4deb63(0x3c6)](VisuMZ[_0x4deb63(0x580)]['RegExp'][_0x4deb63(0x9d4)[_0x4deb63(0x9da)](_0x262792,_0x44a5c1)]))_0x83604b[_0x4deb63(0x485)]=String(RegExp['$1'])[_0x4deb63(0x3b9)]()[_0x4deb63(0x4a5)]();else{if(_0xae8ae0[_0x4deb63(0x3c6)](VisuMZ['ElementStatusCore'][_0x4deb63(0x942)][_0x4deb63(0x92d)[_0x4deb63(0x9da)](_0x262792,_0x44a5c1)])){const _0x1fd9ea=String(RegExp['$1'])[_0x4deb63(0x8d8)](/[\r\n]+/)['remove']('');_0x83604b['motionIdle']=DataManager['processRandomizedData'](_0x1fd9ea);}}}}},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa5e)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy['prototype'][_0x9c6fcf(0x17e)]=function(){const _0x10f5b9=_0x9c6fcf;return this[_0x10f5b9(0xa5e)]();},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa0a)]=function(_0x203fa0){const _0x55f4cf=_0x9c6fcf;return this[_0x55f4cf(0xa5e)]();},Game_Enemy[_0x9c6fcf(0x1ef)]['canBattlerMove']=function(){const _0x521d4f=_0x9c6fcf;if(this[_0x521d4f(0x2c9)]()[_0x521d4f(0x468)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x521d4f(0x1ef)][_0x521d4f(0x466)][_0x521d4f(0x7df)](this);},Game_Enemy['prototype']['isBattlerGrounded']=function(){const _0x2954d9=_0x9c6fcf;if(this[_0x2954d9(0x2c9)]()[_0x2954d9(0x468)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x72a)]=function(){const _0x3ef543=_0x9c6fcf,_0x31a0c2=[];for(const _0x503239 of this['enemy']()[_0x3ef543(0x4f8)]){const _0xbdb635=$dataSkills[_0x503239[_0x3ef543(0xa7c)]];if(_0xbdb635&&!_0x31a0c2['includes'](_0xbdb635))_0x31a0c2[_0x3ef543(0x4c6)](_0xbdb635);}return _0x31a0c2;},Game_Enemy['prototype'][_0x9c6fcf(0x9b9)]=function(){const _0x1319db=_0x9c6fcf;let _0x5bc503='battleUIOffsetX';if(this[_0x1319db(0x4ca)](_0x5bc503))return this[_0x1319db(0xb12)][_0x5bc503];return this['_cache'][_0x5bc503]=this['createBattleUIOffsetX'](this['enemy']()),this[_0x1319db(0xb12)][_0x5bc503];},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x512)]=function(){const _0x5b4f46=_0x9c6fcf;let _0x1c5fd1=_0x5b4f46(0x512);if(this[_0x5b4f46(0x4ca)](_0x1c5fd1))return this[_0x5b4f46(0xb12)][_0x1c5fd1];return this[_0x5b4f46(0xb12)][_0x1c5fd1]=this[_0x5b4f46(0xb08)](this['enemy']()),this[_0x5b4f46(0xb12)][_0x1c5fd1];},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c1)]=function(){const _0x28ccb6=_0x9c6fcf;if(this[_0x28ccb6(0x25b)]!==undefined)return this['_svBattlerData'];return this[_0x28ccb6(0x3a4)](),this[_0x28ccb6(0x25b)];},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb41)]=function(){const _0x8facc5=_0x9c6fcf;return this['svBattlerData']()[_0x8facc5(0x613)]!=='';},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7db)]=function(){const _0x4e0a19=_0x9c6fcf;return this[_0x4e0a19(0x2c1)]()[_0x4e0a19(0x613)];},Game_Enemy[_0x9c6fcf(0x1ef)]['battlerSmoothImage']=function(){const _0x45c060=_0x9c6fcf;return this[_0x45c060(0xb41)]()?VisuMZ[_0x45c060(0x8f5)][_0x45c060(0x19c)][_0x45c060(0x6e6)][_0x45c060(0xa13)]:VisuMZ['BattleCore']['Settings'][_0x45c060(0x7b3)][_0x45c060(0xa13)];},Game_Enemy[_0x9c6fcf(0x1ef)]['performAction']=function(_0x337e9a){const _0x5d96d2=_0x9c6fcf;Game_Battler[_0x5d96d2(0x1ef)][_0x5d96d2(0x2b9)]['call'](this,_0x337e9a);if(this['hasSvBattler']())this[_0x5d96d2(0xb25)](_0x337e9a);},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb0e)]=function(){const _0x1b4400=_0x9c6fcf,_0x19169c=this[_0x1b4400(0x2c1)]()[_0x1b4400(0xb2b)]||0x0,_0x2dda46=$dataSystem[_0x1b4400(0x649)][_0x19169c];if(_0x2dda46){if(_0x2dda46[_0x1b4400(0x930)]===0x0)this[_0x1b4400(0x297)](_0x1b4400(0x53f));else{if(_0x2dda46[_0x1b4400(0x930)]===0x1)this['requestMotion'](_0x1b4400(0x36e));else _0x2dda46[_0x1b4400(0x930)]===0x2&&this[_0x1b4400(0x297)](_0x1b4400(0x59a));}}},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa42)]=function(){const _0x4a4198=_0x9c6fcf,_0x1a5da2=this['svBattlerData']()[_0x4a4198(0xb2b)]||0x0,_0x328414=$dataSystem[_0x4a4198(0x649)][_0x1a5da2];_0x328414&&this[_0x4a4198(0x23c)](_0x328414[_0x4a4198(0x6ae)]);},Game_Enemy[_0x9c6fcf(0x1ef)]['getAttackMotion']=function(){const _0x52868e=_0x9c6fcf,_0x318da3=this[_0x52868e(0x2c1)]()[_0x52868e(0xb2b)]||0x0;return $dataSystem[_0x52868e(0x649)][_0x318da3];},Game_Enemy[_0x9c6fcf(0x1ef)]['getAttackMotionSlot']=function(_0x3f1bce){const _0x35680a=_0x9c6fcf;return this[_0x35680a(0x593)]();},Game_Enemy[_0x9c6fcf(0x1ef)]['performDamage']=function(){const _0x462b25=_0x9c6fcf;Game_Battler[_0x462b25(0x1ef)]['performDamage'][_0x462b25(0x7df)](this),this['isSpriteVisible']()&&this['hasSvBattler']()&&this['requestMotion'](_0x462b25(0x6ea)),SoundManager['playEnemyDamage']();},Game_Enemy['prototype'][_0x9c6fcf(0x1e4)]=function(){const _0x4501cc=_0x9c6fcf;Game_Battler['prototype'][_0x4501cc(0x1e4)]['call'](this),this[_0x4501cc(0x297)](_0x4501cc(0x76c));},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x628)]=function(){const _0x9be0a5=_0x9c6fcf;Game_Battler[_0x9be0a5(0x1ef)][_0x9be0a5(0x628)][_0x9be0a5(0x7df)](this),this[_0x9be0a5(0x297)]('evade');},Game_Enemy['prototype'][_0x9c6fcf(0x17d)]=function(){const _0x23f774=_0x9c6fcf;Game_Battler['prototype']['performCounter'][_0x23f774(0x7df)](this),this['performAttack']();},Game_Enemy[_0x9c6fcf(0x1ef)]['allowCollapse']=function(){const _0x5013f1=_0x9c6fcf;if(this[_0x5013f1(0xb41)]()){if(this[_0x5013f1(0x16b)]()>=0x1)return!![];return this[_0x5013f1(0x2c1)]()[_0x5013f1(0x658)];}else return!![];},Game_Enemy['prototype'][_0x9c6fcf(0x975)]=function(){const _0x1a5330=_0x9c6fcf;return this['svBattlerData']()[_0x1a5330(0x8e6)];},Game_Enemy[_0x9c6fcf(0x1ef)]['svBattlerAnchorY']=function(){const _0x15d552=_0x9c6fcf;return this['svBattlerData']()[_0x15d552(0x9e4)];},Game_Enemy[_0x9c6fcf(0x1ef)]['svBattlerShadowVisible']=function(){const _0x3811bb=_0x9c6fcf;return this['svBattlerData']()[_0x3811bb(0x3e3)];},VisuMZ['BattleCore']['Game_Enemy_transform']=Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5c6)],Game_Enemy['prototype'][_0x9c6fcf(0x5c6)]=function(_0x56aa99){const _0x148ebe=_0x9c6fcf;VisuMZ[_0x148ebe(0x8f5)][_0x148ebe(0x693)][_0x148ebe(0x7df)](this,_0x56aa99),this[_0x148ebe(0x318)](),this[_0x148ebe(0x3a4)]();const _0x2991dd=this[_0x148ebe(0x338)]();_0x2991dd&&(_0x2991dd[_0x148ebe(0x2e9)]=undefined,_0x2991dd[_0x148ebe(0x7dc)](this));},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x71b)]=function(){const _0x561812=_0x9c6fcf,_0x3bdb55=VisuMZ[_0x561812(0x8f5)][_0x561812(0x19c)][_0x561812(0x7b3)];this[_0x561812(0x882)]=_0x3bdb55[_0x561812(0x83e)]??0x0;},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x33f)]=function(){const _0x4dbbcb=_0x9c6fcf;return this[_0x4dbbcb(0x882)]&&this[_0x4dbbcb(0x882)]>0x0;},Game_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7b7)]=function(){const _0x58d735=_0x9c6fcf;this[_0x58d735(0x882)]&&this[_0x58d735(0x882)]>0x0&&this[_0x58d735(0x882)]--;},Game_Enemy['prototype'][_0x9c6fcf(0x4a2)]=function(){const _0x5f5000=_0x9c6fcf;this[_0x5f5000(0x882)]=0x0;},Game_Unit[_0x9c6fcf(0x1ef)]['processBattleCoreJS']=function(_0xbe6dee){const _0xf2c373=_0x9c6fcf;for(const _0x1c684a of this[_0xf2c373(0x90e)]()){if(_0x1c684a)_0x1c684a[_0xf2c373(0x194)](_0xbe6dee);}},Game_Unit['prototype'][_0x9c6fcf(0x3b4)]=function(){const _0x5bea27=_0x9c6fcf,_0x4bf250=this[_0x5bea27(0x3b8)]();return _0x4bf250[Math[_0x5bea27(0x316)](_0x4bf250[_0x5bea27(0x88e)])];},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Party_addActor']=Game_Party[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x93d)],Game_Party[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x93d)]=function(_0x491b6f){const _0x589a57=_0x9c6fcf;VisuMZ['BattleCore'][_0x589a57(0x743)][_0x589a57(0x7df)](this,_0x491b6f),BattleManager['refreshStatusWindow']();},VisuMZ['BattleCore'][_0x9c6fcf(0x161)]=Game_Party[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x620)],Game_Party[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x620)]=function(_0x228cd1){const _0x3db7ee=_0x9c6fcf;VisuMZ[_0x3db7ee(0x8f5)][_0x3db7ee(0x161)][_0x3db7ee(0x7df)](this,_0x228cd1),BattleManager[_0x3db7ee(0x334)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x2a1)]=Game_Troop['prototype'][_0x9c6fcf(0xa66)],Game_Troop[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa66)]=function(_0x1368f1){const _0x254c00=_0x9c6fcf;$gameTemp[_0x254c00(0x639)](),$gameTemp[_0x254c00(0x5eb)](_0x1368f1),VisuMZ[_0x254c00(0x8f5)][_0x254c00(0x2a1)][_0x254c00(0x7df)](this,_0x1368f1),this[_0x254c00(0x4b6)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x847)]=Game_Troop['prototype'][_0x9c6fcf(0x8ec)],Game_Troop[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8ec)]=function(){const _0x2eadb7=_0x9c6fcf;let _0x2637b2=VisuMZ['BattleCore'][_0x2eadb7(0x847)][_0x2eadb7(0x7df)](this);return this[_0x2eadb7(0x370)]&&(_0x2637b2*=this[_0x2eadb7(0x370)]()),Math[_0x2eadb7(0x571)](_0x2637b2);},Game_Troop[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x370)]=function(){return 0x1;},Game_Troop[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4b6)]=function(){const _0x3d5c5c=_0x9c6fcf,_0x7c1eb=DataManager[_0x3d5c5c(0x67b)](this[_0x3d5c5c(0x432)]()['id']);if(_0x7c1eb[_0x3d5c5c(0x3c6)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x35adb7=RegExp['$1']['split'](',')[_0x3d5c5c(0x1f9)](_0x38ac22=>Number(_0x38ac22));this[_0x3d5c5c(0x8c5)](),this['processExtendTroopMembers'](_0x35adb7);}},Game_Troop[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8c5)]=function(){const _0xd0cfc0=_0x9c6fcf;let _0x2c4069='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x2c4069+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.',Imported[_0xd0cfc0(0x653)]&&(VisuMZ[_0xd0cfc0(0x844)][_0xd0cfc0(0x14c)]<1.11&&(alert(_0x2c4069[_0xd0cfc0(0x9da)]('BTB')),SceneManager[_0xd0cfc0(0x2ee)]())),Imported['VisuMZ_2_BattleSystemCTB']&&(VisuMZ[_0xd0cfc0(0xb01)]['version']<1.19&&(alert(_0x2c4069[_0xd0cfc0(0x9da)](_0xd0cfc0(0x2b5))),SceneManager[_0xd0cfc0(0x2ee)]())),Imported[_0xd0cfc0(0x4f6)]&&(VisuMZ[_0xd0cfc0(0xa04)]['version']<1.15&&(alert(_0x2c4069[_0xd0cfc0(0x9da)](_0xd0cfc0(0x652))),SceneManager[_0xd0cfc0(0x2ee)]()));},Game_Troop[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2ff)]=function(_0x1abae0){const _0x282f9f=_0x9c6fcf;this[_0x282f9f(0x55c)]={};for(const _0x33a0e2 of this[_0x282f9f(0x90e)]()){if(!_0x33a0e2)continue;_0x33a0e2[_0x282f9f(0x284)]('');}for(const _0x7086f2 of _0x1abae0){const _0x3c5219=$dataTroops[_0x7086f2];if(_0x3c5219)this[_0x282f9f(0x62a)](_0x3c5219);}this[_0x282f9f(0x177)]();},Game_Troop[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x62a)]=function(_0x586f28){const _0x1bb2d2=_0x9c6fcf;for(const _0x134c22 of _0x586f28[_0x1bb2d2(0x90e)]){if($dataEnemies[_0x134c22[_0x1bb2d2(0x26d)]]){const _0x580d95=_0x134c22[_0x1bb2d2(0x26d)],_0x3a22a0=_0x134c22['x'],_0x3b31d8=_0x134c22['y'],_0x384379=new Game_Enemy(_0x580d95,_0x3a22a0,_0x3b31d8);_0x134c22[_0x1bb2d2(0x4b1)]&&_0x384379[_0x1bb2d2(0x837)](),this[_0x1bb2d2(0x9a1)]['push'](_0x384379);}}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x805)]=Game_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x848)],Game_Map[_0x9c6fcf(0x1ef)]['setupBattleback']=function(){const _0x260d6a=_0x9c6fcf;VisuMZ[_0x260d6a(0x8f5)][_0x260d6a(0x805)]['call'](this),this['setupBattlebackBattleCore']();},Game_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1cd)]=function(){const _0x3ac822=_0x9c6fcf;this[_0x3ac822(0x9c8)]={},this[_0x3ac822(0x4ef)]={};if(!$dataMap)return;const _0xd273a7=$dataMap[_0x3ac822(0x468)];if(!_0xd273a7)return;const _0x8b12be=_0xd273a7['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x8b12be)for(const _0xb99858 of _0x8b12be){_0xb99858[_0x3ac822(0x3c6)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x18ca47=Number(RegExp['$1']),_0x5ebb73=Number(RegExp['$2']),_0xc69452=_0x5ebb73===0x1?this[_0x3ac822(0x9c8)]:this[_0x3ac822(0x4ef)],_0x3f5203=String(RegExp['$3']);_0xc69452[_0x18ca47]=_0x3f5203;}},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Map_battleback1Name']=Game_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa47)],Game_Map[_0x9c6fcf(0x1ef)]['battleback1Name']=function(){const _0x3c4a5c=_0x9c6fcf;if(!BattleManager[_0x3c4a5c(0x299)]()){const _0x35b167=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3c4a5c(0x9c8)]&&this[_0x3c4a5c(0x9c8)][_0x35b167])return this[_0x3c4a5c(0x9c8)][_0x35b167];}return VisuMZ[_0x3c4a5c(0x8f5)][_0x3c4a5c(0x666)][_0x3c4a5c(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x22f)]=Game_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x452)],Game_Map['prototype'][_0x9c6fcf(0x452)]=function(){const _0x278520=_0x9c6fcf;if(!BattleManager[_0x278520(0x299)]()){const _0x567edb=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x278520(0x9c8)]&&this[_0x278520(0x4ef)][_0x567edb])return this[_0x278520(0x4ef)][_0x567edb];}return VisuMZ[_0x278520(0x8f5)][_0x278520(0x22f)][_0x278520(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x956)]=Game_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2ca)],Game_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2ca)]=function(){const _0x3c3786=_0x9c6fcf;let _0x574510=JsonEx[_0x3c3786(0x9ce)](VisuMZ['BattleCore'][_0x3c3786(0x956)][_0x3c3786(0x7df)](this));return VisuMZ[_0x3c3786(0x8f5)]['ShuffleArray'](_0x574510);},VisuMZ[_0x9c6fcf(0x8f5)]['ShuffleArray']=function(_0xc7c851){const _0x433b43=_0x9c6fcf;var _0x3d9ccf,_0x4acee6,_0x534ecf;for(_0x534ecf=_0xc7c851[_0x433b43(0x88e)]-0x1;_0x534ecf>0x0;_0x534ecf--){_0x3d9ccf=Math[_0x433b43(0x52a)](Math[_0x433b43(0x644)]()*(_0x534ecf+0x1)),_0x4acee6=_0xc7c851[_0x534ecf],_0xc7c851[_0x534ecf]=_0xc7c851[_0x3d9ccf],_0xc7c851[_0x3d9ccf]=_0x4acee6;}return _0xc7c851;},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Interpreter_PluginCommand']=Game_Interpreter['prototype'][_0x9c6fcf(0x636)],Game_Interpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x636)]=function(_0x2f7813){const _0x410e8e=_0x9c6fcf;return $gameTemp[_0x410e8e(0x776)](this),VisuMZ[_0x410e8e(0x8f5)][_0x410e8e(0x55d)][_0x410e8e(0x7df)](this,_0x2f7813);},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x9c6fcf(0x1ef)]['updateWaitMode'],Game_Interpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x399)]=function(){const _0x96b3d8=_0x9c6fcf;if(SceneManager['isSceneBattle']())switch(this['_waitMode']){case _0x96b3d8(0xb51):if(Imported[_0x96b3d8(0x87b)]){if($gameScreen[_0x96b3d8(0xa06)]()[_0x96b3d8(0x80d)]>0x0)return!![];this[_0x96b3d8(0x178)]='';}break;case _0x96b3d8(0x425):if(BattleManager['_spriteset'][_0x96b3d8(0xb18)]())return!![];this[_0x96b3d8(0x178)]='';break;case'battleBalloon':if(BattleManager[_0x96b3d8(0x21f)][_0x96b3d8(0x8d6)]())return!![];this[_0x96b3d8(0x178)]='';break;case _0x96b3d8(0x443):if(Imported[_0x96b3d8(0x87b)]){if($gameScreen[_0x96b3d8(0xa06)]()[_0x96b3d8(0x8df)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x96b3d8(0x88b)]>0x0)return!![];this[_0x96b3d8(0x178)]='';}break;case _0x96b3d8(0x25f):if(BattleManager[_0x96b3d8(0x21f)]['isEffecting']())return!![];this[_0x96b3d8(0x178)]='';break;case'battleFloat':if(BattleManager[_0x96b3d8(0x21f)][_0x96b3d8(0x87e)]())return!![];this[_0x96b3d8(0x178)]='';break;case _0x96b3d8(0x208):if(BattleManager[_0x96b3d8(0x21f)][_0x96b3d8(0x9fb)]())return!![];this[_0x96b3d8(0x178)]='';break;case _0x96b3d8(0x21c):if(BattleManager[_0x96b3d8(0x3d6)]['isBusy']())return!![];this[_0x96b3d8(0x178)]='';break;case _0x96b3d8(0x31f):if(BattleManager[_0x96b3d8(0x21f)][_0x96b3d8(0xacb)]())return!![];this[_0x96b3d8(0x178)]='';break;case _0x96b3d8(0x1e3):if(BattleManager['_spriteset'][_0x96b3d8(0x2a5)]())return!![];this[_0x96b3d8(0x178)]='';break;case _0x96b3d8(0xa01):if(BattleManager[_0x96b3d8(0x21f)][_0x96b3d8(0x6e0)]())return!![];this[_0x96b3d8(0x178)]='';break;case _0x96b3d8(0xa2f):if(BattleManager[_0x96b3d8(0x21f)]['isAnyoneSkewing']())return!![];this[_0x96b3d8(0x178)]='';break;case _0x96b3d8(0x26e):if(Imported[_0x96b3d8(0x6e2)]){if(BattleManager[_0x96b3d8(0x21f)]['isAnyProjectilePresent']())return!![];this[_0x96b3d8(0x178)]='';}break;case'battleSkew':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen['battleCameraData']()[_0x96b3d8(0x40d)]>0x0)return!![];this[_0x96b3d8(0x178)]='';}break;case _0x96b3d8(0x951):if(BattleManager[_0x96b3d8(0x21f)][_0x96b3d8(0x2d4)]())return!![];this[_0x96b3d8(0x178)]='';break;case'battleZoom':if(Imported[_0x96b3d8(0x87b)]){if($gameScreen[_0x96b3d8(0xa06)]()['zoomDuration']>0x0)return!![];this[_0x96b3d8(0x178)]='';}break;case'battleInjectPrep':if(Imported[_0x96b3d8(0x62f)]){if(BattleManager['_spriteset'][_0x96b3d8(0x81f)]){if(BattleManager[_0x96b3d8(0x21f)][_0x96b3d8(0x81f)]())return!![];this[_0x96b3d8(0x178)]=_0x96b3d8(0x78f);}else this[_0x96b3d8(0x178)]='';break;}break;case _0x96b3d8(0x78f):if(Imported[_0x96b3d8(0x62f)]){if(BattleManager[_0x96b3d8(0x21f)][_0x96b3d8(0x82c)]())return!![];this[_0x96b3d8(0x178)]='';}break;}return VisuMZ[_0x96b3d8(0x8f5)][_0x96b3d8(0x156)]['call'](this);},VisuMZ[_0x9c6fcf(0x8f5)]['Game_Interpreter_command301']=Game_Interpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4be)],Game_Interpreter[_0x9c6fcf(0x1ef)]['command301']=function(_0x14ab4a){const _0xfaf421=_0x9c6fcf;return!$gameParty[_0xfaf421(0x69a)]()?this['command301_PreBattleEvent'](_0x14ab4a):VisuMZ['BattleCore']['Game_Interpreter_command301'][_0xfaf421(0x7df)](this,_0x14ab4a);},Game_Interpreter['prototype'][_0x9c6fcf(0x392)]=function(_0x3aa140){const _0x1abca4=_0x9c6fcf;return VisuMZ['BattleCore'][_0x1abca4(0x267)][_0x1abca4(0x7df)](this,_0x3aa140),BattleManager['setEventCallback'](_0x11b513=>{const _0x1f52b5=_0x1abca4;this[_0x1f52b5(0x857)][this[_0x1f52b5(0x1e8)]]=_0x11b513;}),!![];},VisuMZ['BattleCore'][_0x9c6fcf(0xae9)]=function(_0x500ea7){const _0x2bcb62=_0x9c6fcf,_0x1728e4=$dataCommonEvents[_0x500ea7];if(!_0x1728e4)return![];if(_0x1728e4['list'][_0x2bcb62(0x88e)]<=0x1)return![];return!![];},Game_Interpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8b5)]=function(_0x3c48da){const _0xa619a1=_0x9c6fcf,_0x496207=VisuMZ[_0xa619a1(0x8f5)][_0xa619a1(0x19c)][_0xa619a1(0xb07)],_0x19dd8c=_0x496207[_0xa619a1(0x393)],_0x24914b=$dataCommonEvents[_0x19dd8c];if(_0x24914b&&VisuMZ[_0xa619a1(0x8f5)]['CheckMapBattleEventValid'](_0x19dd8c)){const _0x11fc41=this['isOnCurrentMap']()?this[_0xa619a1(0x559)]:0x0,_0x19f2ab=_0x24914b[_0xa619a1(0x61b)];this[_0xa619a1(0x8cf)](_0x19f2ab,_0x11fc41),this[_0xa619a1(0x9fc)]=JsonEx[_0xa619a1(0x9ce)](this[_0xa619a1(0x9fc)]);const _0x24d736={'code':0xbc3,'indent':this[_0xa619a1(0x1e8)],'parameters':JsonEx['makeDeepCopy'](_0x3c48da)};return this[_0xa619a1(0x9fc)]['splice'](this[_0xa619a1(0x435)]+0x1,0x0,_0x24d736),!![];}else return VisuMZ[_0xa619a1(0x8f5)][_0xa619a1(0x267)]['call'](this,_0x3c48da);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x7de)]=BattleManager[_0x9c6fcf(0xb1d)],BattleManager[_0x9c6fcf(0xb1d)]=function(){const _0x1c55db=_0x9c6fcf;VisuMZ[_0x1c55db(0x8f5)][_0x1c55db(0x7de)]['call'](this),this['onEncounterBattleCore']();},BattleManager[_0x9c6fcf(0x1bc)]=function(){const _0x52ee21=_0x9c6fcf,_0x1eb06c=VisuMZ[_0x52ee21(0x8f5)]['Settings'][_0x52ee21(0xb07)],_0x2064bf=_0x1eb06c['BattleStartEvent'];_0x2064bf&&VisuMZ[_0x52ee21(0x8f5)]['CheckMapBattleEventValid'](_0x2064bf)&&(this[_0x52ee21(0x9bc)]=!![],$gameTemp[_0x52ee21(0xaf9)](_0x1eb06c[_0x52ee21(0x393)]),$gameMap['updateInterpreter'](),$gameMap[_0x52ee21(0x306)][_0x52ee21(0x1a9)]=!![]),_0x1eb06c[_0x52ee21(0x9f4)]>0x0&&(this[_0x52ee21(0x58d)]=!![]);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xa76)]=Scene_Map['prototype'][_0x9c6fcf(0x265)],Scene_Map[_0x9c6fcf(0x1ef)]['updateCallMenu']=function(){const _0xe7d56e=_0x9c6fcf;if(BattleManager[_0xe7d56e(0x9bc)])return;VisuMZ[_0xe7d56e(0x8f5)][_0xe7d56e(0xa76)]['call'](this);},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Map_launchBattle']=Scene_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9b0)],Scene_Map['prototype']['launchBattle']=function(){const _0x23cc86=_0x9c6fcf;BattleManager[_0x23cc86(0x9bc)]?this['battleCorePreBattleCommonEvent']():VisuMZ[_0x23cc86(0x8f5)][_0x23cc86(0xb0b)][_0x23cc86(0x7df)](this);},Scene_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3b5)]=function(){const _0x3694e7=_0x9c6fcf;this[_0x3694e7(0x889)]=!![];},VisuMZ[_0x9c6fcf(0x8f5)]['SceneManager_isSceneChanging']=SceneManager['isSceneChanging'],SceneManager['isSceneChanging']=function(){const _0x251c99=_0x9c6fcf;if(BattleManager[_0x251c99(0x9bc)])return![];return VisuMZ[_0x251c99(0x8f5)]['SceneManager_isSceneChanging'][_0x251c99(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x4a3)]=Game_Interpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x19a)],Game_Interpreter['prototype'][_0x9c6fcf(0x19a)]=function(){const _0x60aab0=_0x9c6fcf;VisuMZ['BattleCore'][_0x60aab0(0x4a3)][_0x60aab0(0x7df)](this),this[_0x60aab0(0x1a9)]&&(this[_0x60aab0(0x1a9)]=undefined,SceneManager[_0x60aab0(0x90f)][_0x60aab0(0x226)]());},Scene_Map[_0x9c6fcf(0x1ef)]['battleCoreResumeLaunchBattle']=function(){const _0x2fe6a7=_0x9c6fcf;BattleManager[_0x2fe6a7(0x9bc)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x2fe6a7(0x978)]();},VisuMZ['BattleCore']['Scene_Map_initializeAfter']=Scene_Map['prototype']['initialize'],Scene_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(){const _0x3c6871=_0x9c6fcf;VisuMZ['BattleCore'][_0x3c6871(0x814)][_0x3c6871(0x7df)](this),BattleManager[_0x3c6871(0x9c7)]&&(this[_0x3c6871(0x889)]=!![],BattleManager[_0x3c6871(0x9c7)]=undefined);},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Map_initialize']=Scene_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)],Scene_Map[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(){const _0x23092f=_0x9c6fcf;VisuMZ[_0x23092f(0x8f5)][_0x23092f(0x158)]['call'](this),$gameTemp[_0x23092f(0x639)]();},VisuMZ['BattleCore'][_0x9c6fcf(0xb06)]=Scene_ItemBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3c8)],Scene_ItemBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3c8)]=function(){const _0x58a25a=_0x9c6fcf;VisuMZ[_0x58a25a(0x8f5)][_0x58a25a(0xb06)][_0x58a25a(0x7df)](this);if(this[_0x58a25a(0x9d3)]()[_0x58a25a(0x468)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x58a25a(0x9d3)]()[_0x58a25a(0x468)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager[_0x58a25a(0x8be)](this[_0x58a25a(0x9d3)]())&&($gameTemp[_0x58a25a(0x592)]=[]);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x2e2)]=Scene_Options[_0x9c6fcf(0x1ef)]['maxCommands'],Scene_Options[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa07)]=function(){const _0x182aee=_0x9c6fcf;let _0x2fea43=VisuMZ[_0x182aee(0x8f5)][_0x182aee(0x2e2)]['call'](this);const _0x58d948=VisuMZ[_0x182aee(0x8f5)]['Settings'];if(_0x58d948[_0x182aee(0x36a)][_0x182aee(0x98a)]&&_0x58d948[_0x182aee(0x36a)][_0x182aee(0x758)])_0x2fea43+=0x2;if(_0x58d948[_0x182aee(0x1a7)][_0x182aee(0x98a)]&&_0x58d948[_0x182aee(0x1a7)][_0x182aee(0x758)])_0x2fea43+=0x1;return _0x2fea43;},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_initialize']=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(){const _0x17a46b=_0x9c6fcf;VisuMZ[_0x17a46b(0x8f5)][_0x17a46b(0x625)][_0x17a46b(0x7df)](this),this['clearOnceParallelInterpreters']();},VisuMZ['BattleCore'][_0x9c6fcf(0x1bb)]=Scene_Battle['prototype']['start'],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c8)]=function(){const _0x32cccb=_0x9c6fcf;SceneManager[_0x32cccb(0x678)]()?(Scene_Message[_0x32cccb(0x1ef)][_0x32cccb(0x2c8)][_0x32cccb(0x7df)](this),this['_spriteset']&&this[_0x32cccb(0x21f)][_0x32cccb(0x255)](),BattleManager[_0x32cccb(0xb44)]&&BattleManager[_0x32cccb(0x47c)]()):(VisuMZ[_0x32cccb(0x8f5)]['Scene_Battle_start'][_0x32cccb(0x7df)](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x9ab)]=Scene_Battle['prototype'][_0x9c6fcf(0x978)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x978)]=function(){const _0x599bd1=_0x9c6fcf;SceneManager[_0x599bd1(0x4da)]()?Scene_Message[_0x599bd1(0x1ef)][_0x599bd1(0x978)]['call'](this):VisuMZ[_0x599bd1(0x8f5)]['Scene_Battle_stop'][_0x599bd1(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_terminate']=Scene_Battle[_0x9c6fcf(0x1ef)]['terminate'],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x19a)]=function(){const _0x496fcc=_0x9c6fcf;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message['prototype'][_0x496fcc(0x19a)][_0x496fcc(0x7df)](this):VisuMZ['BattleCore']['Scene_Battle_terminate'][_0x496fcc(0x7df)](this),$gameTemp[_0x496fcc(0x24d)](),this[_0x496fcc(0x262)]();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9b1)]=function(){const _0x1d823a=_0x9c6fcf;if(ConfigManager[_0x1d823a(0x774)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0x1d823a(0xa28)];else{if(this['battleLayoutStyle']()==='border')return![];else{return Scene_Message[_0x1d823a(0x1ef)]['isRightInputMode'][_0x1d823a(0x7df)](this);;}}},VisuMZ['BattleCore']['Scene_Battle_createAllWindows']=Scene_Battle['prototype'][_0x9c6fcf(0x2bd)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2bd)]=function(){const _0x1ccaa1=_0x9c6fcf;this['createEnemyNameContainer'](),VisuMZ[_0x1ccaa1(0x8f5)]['Scene_Battle_createAllWindows']['call'](this),this[_0x1ccaa1(0x171)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_createEnemyWindow']=Scene_Battle[_0x9c6fcf(0x1ef)]['createEnemyWindow'],Scene_Battle['prototype'][_0x9c6fcf(0x4d1)]=function(){const _0x3c3577=_0x9c6fcf;VisuMZ[_0x3c3577(0x8f5)][_0x3c3577(0x8e9)]['call'](this),this['createMultiTargetWindows']();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5da)]=function(){const _0xa053e8=_0x9c6fcf;this[_0xa053e8(0x939)](!![]),this[_0xa053e8(0x939)](![]);},Scene_Battle[_0x9c6fcf(0x1ef)]['multiTargetWindowRect']=function(_0x3b8203){const _0x4490d7=_0x9c6fcf,_0xc20ea2=Window_BattleMultiTarget[_0x4490d7(0xaa2)],_0x1d77f7=this[_0x4490d7(0x479)](0x1,!![]);let _0x42adfe=_0x3b8203?Graphics[_0x4490d7(0x671)]-_0xc20ea2:0x0;_0x42adfe+=_0x3b8203?Window_BattleMultiTarget[_0x4490d7(0x742)]:Window_BattleMultiTarget[_0x4490d7(0x85c)];const _0x366784=['frontview_ui']['includes'](this['battleLayoutStyle']())?0x0:this[_0x4490d7(0x197)][_0x4490d7(0x202)];let _0x5177cf=Graphics['boxHeight']-_0x366784-_0x1d77f7;return _0x5177cf+=_0x3b8203?Window_BattleMultiTarget[_0x4490d7(0x2a6)]:Window_BattleMultiTarget[_0x4490d7(0x22c)],new Rectangle(_0x42adfe,_0x5177cf,_0xc20ea2,_0x1d77f7);},Scene_Battle[_0x9c6fcf(0x1ef)]['createMultiTargetWindow']=function(_0x2dedf2){const _0x44908b=_0x9c6fcf,_0xfb4f27=this['multiTargetWindowRect'](_0x2dedf2),_0x52f4e5=new Window_BattleMultiTarget(_0xfb4f27,_0x2dedf2);this[_0x44908b(0x8aa)](_0x52f4e5),_0x2dedf2?this[_0x44908b(0x804)]=_0x52f4e5:this['_enemyMultiTargetWindow']=_0x52f4e5;},VisuMZ['BattleCore'][_0x9c6fcf(0x76f)]=Scene_Battle['prototype'][_0x9c6fcf(0x40a)],Scene_Battle['prototype'][_0x9c6fcf(0x40a)]=function(){const _0x4cf52b=_0x9c6fcf;VisuMZ[_0x4cf52b(0x8f5)][_0x4cf52b(0x76f)]['call'](this),this[_0x4cf52b(0xa3f)]()===_0x4cf52b(0x75f)&&this[_0x4cf52b(0x741)]();},Scene_Battle[_0x9c6fcf(0x1ef)]['setVisibleUI']=function(_0x349cad){const _0x334886=_0x9c6fcf;_0x349cad?(this[_0x334886(0x185)]['x']=(Graphics[_0x334886(0xac8)]-Graphics[_0x334886(0x671)])/0x2,this[_0x334886(0x185)]['y']=(Graphics[_0x334886(0x202)]-Graphics['boxHeight'])/0x2):(this[_0x334886(0x185)]['x']=Graphics[_0x334886(0xac8)]*0xa,this['_windowLayer']['y']=Graphics[_0x334886(0x202)]*0xa);},VisuMZ['BattleCore'][_0x9c6fcf(0x482)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7d4)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7d4)]=function(){const _0x58ed96=_0x9c6fcf,_0x3250bd=BattleManager[_0x58ed96(0x23a)]();VisuMZ[_0x58ed96(0x8f5)][_0x58ed96(0x482)]['call'](this);if(_0x3250bd){if(_0x3250bd===BattleManager[_0x58ed96(0x23a)]())return;if(_0x3250bd===BattleManager['_subject'])return;if(_0x3250bd[_0x58ed96(0x338)]())_0x3250bd[_0x58ed96(0x338)]()[_0x58ed96(0x20b)]();}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x940)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x473)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x473)]=function(){const _0x2e1607=_0x9c6fcf,_0x2823b0=BattleManager['actor']();if(_0x2823b0&&_0x2823b0[_0x2e1607(0x338)])_0x2823b0[_0x2e1607(0x338)]()['stepBack']();VisuMZ[_0x2e1607(0x8f5)][_0x2e1607(0x940)][_0x2e1607(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xb46)]=Scene_Battle[_0x9c6fcf(0x1ef)]['logWindowRect'],Scene_Battle[_0x9c6fcf(0x1ef)]['logWindowRect']=function(){const _0x41b459=_0x9c6fcf;if(VisuMZ[_0x41b459(0x8f5)][_0x41b459(0x19c)][_0x41b459(0x769)][_0x41b459(0x80a)])return VisuMZ[_0x41b459(0x8f5)][_0x41b459(0x19c)][_0x41b459(0x769)]['BattleLogRectJS']['call'](this);return VisuMZ[_0x41b459(0x8f5)][_0x41b459(0xb46)][_0x41b459(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x179)]=Scene_Battle['prototype'][_0x9c6fcf(0xa6d)],Scene_Battle['prototype'][_0x9c6fcf(0xa6d)]=function(){const _0x160ff3=_0x9c6fcf;VisuMZ[_0x160ff3(0x8f5)][_0x160ff3(0x179)]['call'](this),this[_0x160ff3(0x39d)]();},Scene_Battle['prototype'][_0x9c6fcf(0x39d)]=function(){const _0x4e4c76=_0x9c6fcf,_0x51044f=this[_0x4e4c76(0x35d)];_0x51044f[_0x4e4c76(0x1b6)](_0x4e4c76(0x57a),this['commandAutoBattle'][_0x4e4c76(0x43b)](this)),_0x51044f['setHandler'](_0x4e4c76(0x6e9),this[_0x4e4c76(0x146)][_0x4e4c76(0x43b)](this));const _0x505467=this[_0x4e4c76(0xa3f)]();switch(_0x505467){case'xp':case _0x4e4c76(0x7c0):return this[_0x4e4c76(0x35d)][_0x4e4c76(0x136)](0x1);break;}},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x872)]=function(){const _0x540f08=_0x9c6fcf;BattleManager['_autoBattle']=!![],$gameParty[_0x540f08(0x2e6)](),this[_0x540f08(0x7d4)](),BattleManager[_0x540f08(0x89e)]()&&(BattleManager[_0x540f08(0x344)]=![]);},Scene_Battle[_0x9c6fcf(0x1ef)]['commandOptions']=function(){const _0x48f87c=_0x9c6fcf;this['isQueueOptionsMenu']()?(this[_0x48f87c(0xa7a)]=!![],this[_0x48f87c(0x3d6)][_0x48f87c(0x4c6)]('addText',VisuMZ[_0x48f87c(0x8f5)]['Settings'][_0x48f87c(0x3c0)][_0x48f87c(0xa36)])):this['callOptions']();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x239)]=function(){const _0x503f1a=_0x9c6fcf;return BattleManager[_0x503f1a(0x947)]();},Scene_Battle['prototype'][_0x9c6fcf(0x26a)]=function(){const _0x4d8d4a=_0x9c6fcf;this[_0x4d8d4a(0xa7a)]=![],this[_0x4d8d4a(0x21f)]['update'](),this[_0x4d8d4a(0x185)]['visible']=![];if(BattleManager[_0x4d8d4a(0x299)]())($dataSystem['battleback1Name']||$dataSystem[_0x4d8d4a(0x452)])&&SceneManager[_0x4d8d4a(0x4bf)]();else($gameMap[_0x4d8d4a(0xa47)]()||$gameMap[_0x4d8d4a(0x452)]())&&SceneManager[_0x4d8d4a(0x4bf)]();SceneManager[_0x4d8d4a(0x4c6)](Scene_Options),BattleManager[_0x4d8d4a(0x89e)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager['actor']());},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0x9c6fcf(0x1ef)]['updateBattleProcess'],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7ec)]=function(){const _0x24e96f=_0x9c6fcf;VisuMZ[_0x24e96f(0x8f5)][_0x24e96f(0x5ab)][_0x24e96f(0x7df)](this);if(this[_0x24e96f(0xa7a)]&&!BattleManager[_0x24e96f(0x3d7)])this[_0x24e96f(0x26a)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_update']=Scene_Battle['prototype'][_0x9c6fcf(0x255)],Scene_Battle['prototype'][_0x9c6fcf(0x255)]=function(){const _0x10c7e0=_0x9c6fcf;VisuMZ[_0x10c7e0(0x8f5)][_0x10c7e0(0x966)][_0x10c7e0(0x7df)](this),this[_0x10c7e0(0x8b4)]();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x171)]=function(){const _0x190435=_0x9c6fcf,_0x16813a=this[_0x190435(0xaa7)]();this[_0x190435(0x7c3)]=new Window_AutoBattleCancel(_0x16813a),this['_autoBattleWindow'][_0x190435(0x837)](),this[_0x190435(0x210)](this['_autoBattleWindow']);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaa7)]=function(){const _0x365d0b=_0x9c6fcf;return VisuMZ['BattleCore'][_0x365d0b(0x19c)]['AutoBattle'][_0x365d0b(0x923)][_0x365d0b(0x7df)](this);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x262)]=function(){const _0x166ce5=_0x9c6fcf;this[_0x166ce5(0xa1e)]=[];},Scene_Battle['prototype'][_0x9c6fcf(0x8b4)]=function(){const _0x513fa9=_0x9c6fcf;if(!this[_0x513fa9(0xa1e)])return;for(const _0x500d84 of this[_0x513fa9(0xa1e)]){_0x500d84&&_0x500d84[_0x513fa9(0x255)]();}},Scene_Battle['prototype'][_0x9c6fcf(0x736)]=function(_0x21148e){const _0x5576b8=_0x9c6fcf,_0x418efa=$dataCommonEvents[_0x21148e];if(!_0x418efa)return;const _0x4e1fd5=new Game_BattleOnceParallelInterpreter();this[_0x5576b8(0x207)](_0x4e1fd5),_0x4e1fd5['setCommonEvent'](_0x21148e);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x207)]=function(_0x251dab){const _0x37000f=_0x9c6fcf;this[_0x37000f(0xa1e)]=this[_0x37000f(0xa1e)]||[],this[_0x37000f(0xa1e)][_0x37000f(0x4c6)](_0x251dab);},Scene_Battle['prototype']['removeOnceParallelInterpreter']=function(_0x4d8604){const _0x155743=_0x9c6fcf;this['_onceParallelInterpreters']=this['_onceParallelInterpreters']||[],this['_onceParallelInterpreters'][_0x155743(0x7e5)](_0x4d8604);},Game_Troop[_0x9c6fcf(0x1ef)]['onBattleStartOnceParallels']=function(){const _0x3e20c0=_0x9c6fcf;for(const _0x248328 of this['troop']()[_0x3e20c0(0x777)]){if(!this[_0x3e20c0(0x51e)](_0x248328))continue;SceneManager['_scene']['playOnceParallelTroopPage'](_0x248328);}},Game_Troop['prototype'][_0x9c6fcf(0x51e)]=function(_0x399605){const _0x3fd188=_0x9c6fcf;if(!_0x399605)return;for(const _0x28083c of _0x399605[_0x3fd188(0x61b)]){if([0x6c,0x198][_0x3fd188(0x765)](_0x28083c[_0x3fd188(0x3aa)])){const _0xc6f169=_0x28083c[_0x3fd188(0x3bd)][0x0];if(_0xc6f169[_0x3fd188(0x3c6)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x892)]=function(_0x3ff4f0){const _0x467d1c=_0x9c6fcf;if(!_0x3ff4f0)return;const _0x24ac5d=new Game_BattleOnceParallelInterpreter();this[_0x467d1c(0x207)](_0x24ac5d),_0x24ac5d[_0x467d1c(0x205)](_0x3ff4f0);};function Game_BattleOnceParallelInterpreter(){const _0x32dcba=_0x9c6fcf;this[_0x32dcba(0x32f)](...arguments);}Game_BattleOnceParallelInterpreter[_0x9c6fcf(0x1ef)]=Object[_0x9c6fcf(0x866)](Game_Interpreter[_0x9c6fcf(0x1ef)]),Game_BattleOnceParallelInterpreter['prototype'][_0x9c6fcf(0x788)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x258)]=function(_0x16f726){const _0x14d6a0=_0x9c6fcf,_0x56f29d=$dataCommonEvents[_0x16f726];_0x56f29d?this[_0x14d6a0(0xa66)](_0x56f29d[_0x14d6a0(0x61b)],0x0):this[_0x14d6a0(0x19a)]();},Game_BattleOnceParallelInterpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x19a)]=function(){const _0x450341=_0x9c6fcf;if(!SceneManager[_0x450341(0x319)]())return;SceneManager['_scene'][_0x450341(0xb43)](this),Game_Interpreter['prototype'][_0x450341(0x19a)][_0x450341(0x7df)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x9c6fcf(0x205)]=function(_0x378e61){const _0x1858c8=_0x9c6fcf;_0x378e61?this['setup'](_0x378e61[_0x1858c8(0x61b)],0x0):this[_0x1858c8(0x19a)]();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3ae)]=function(){const _0x19d6b8=_0x9c6fcf;return VisuMZ[_0x19d6b8(0x8f5)][_0x19d6b8(0x19c)][_0x19d6b8(0x3c0)][_0x19d6b8(0x89c)];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x1fe)]=Scene_Battle['prototype'][_0x9c6fcf(0x1cb)],Scene_Battle['prototype'][_0x9c6fcf(0x1cb)]=function(){const _0x47911c=_0x9c6fcf;this[_0x47911c(0x3ae)]()?this[_0x47911c(0x8cb)]():VisuMZ[_0x47911c(0x8f5)][_0x47911c(0x1fe)][_0x47911c(0x7df)](this);},Scene_Battle['prototype'][_0x9c6fcf(0x8cb)]=function(){const _0x6105af=_0x9c6fcf;if(BattleManager['isDTB']())this[_0x6105af(0x7d4)]();else BattleManager['isTpb']()&&VisuMZ['BattleCore'][_0x6105af(0x1fe)][_0x6105af(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_commandFight']=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x775)],Scene_Battle[_0x9c6fcf(0x1ef)]['commandFight']=function(){const _0x71b450=_0x9c6fcf;BattleManager[_0x71b450(0x89e)]()?(this['tpbCommandFight'](),this[_0x71b450(0x609)]()):VisuMZ[_0x71b450(0x8f5)]['Scene_Battle_commandFight'][_0x71b450(0x7df)](this);},Scene_Battle['prototype'][_0x9c6fcf(0x922)]=function(){const _0x3218ac=_0x9c6fcf;if(!VisuMZ[_0x3218ac(0x8f5)][_0x3218ac(0x5bd)])return;if(Imported[_0x3218ac(0x97d)]&&BattleManager[_0x3218ac(0x3af)]())return;const _0x35a5da=$gameParty[_0x3218ac(0x3b8)]()['filter'](_0x28f8d6=>_0x28f8d6['isTpbCharged']()&&_0x28f8d6[_0x3218ac(0x397)]());BattleManager[_0x3218ac(0x380)]=_0x35a5da[0x0]||null,BattleManager['_currentActor']&&BattleManager[_0x3218ac(0x380)][_0x3218ac(0x32b)](_0x3218ac(0x2a3));},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x633)]=Scene_Battle['prototype'][_0x9c6fcf(0x62c)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x62c)]=function(){const _0x34244b=_0x9c6fcf;VisuMZ[_0x34244b(0x8f5)][_0x34244b(0x633)][_0x34244b(0x7df)](this);if(!BattleManager[_0x34244b(0x89e)]())BattleManager[_0x34244b(0x380)]=null;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x20a)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x70f)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x70f)]=function(){const _0x1183e=_0x9c6fcf;VisuMZ[_0x1183e(0x8f5)][_0x1183e(0x20a)]['call'](this),this[_0x1183e(0x1a6)]();},Scene_Battle['prototype'][_0x9c6fcf(0x1a6)]=function(){const _0x4c7f93=_0x9c6fcf,_0x66c613=this[_0x4c7f93(0x217)];_0x66c613[_0x4c7f93(0x1b6)]('escape',this[_0x4c7f93(0x13b)]['bind'](this)),_0x66c613[_0x4c7f93(0x1b6)](_0x4c7f93(0x57a),this[_0x4c7f93(0x41e)][_0x4c7f93(0x43b)](this)),_0x66c613['setHandler']('singleSkill',this[_0x4c7f93(0x3d1)][_0x4c7f93(0x43b)](this)),BattleManager[_0x4c7f93(0x89e)]()&&(this[_0x4c7f93(0x3ae)]()?delete _0x66c613[_0x4c7f93(0x63e)][_0x4c7f93(0xa6f)]:_0x66c613['setHandler'](_0x4c7f93(0xa6f),this['actorCommandCancelTPB'][_0x4c7f93(0x43b)](this)));},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x13b)]=function(){this['commandEscape']();},Scene_Battle['prototype'][_0x9c6fcf(0x41e)]=function(){const _0x65367=_0x9c6fcf;BattleManager[_0x65367(0x23a)]()['makeAutoBattleActions'](),BattleManager[_0x65367(0x29f)](),BattleManager[_0x65367(0x15d)](),this[_0x65367(0x4f0)]();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3d1)]=function(){const _0x39a4ec=_0x9c6fcf,_0x2cc291=BattleManager[_0x39a4ec(0x356)](),_0x3b991b=this[_0x39a4ec(0x217)][_0x39a4ec(0x543)]();_0x2cc291[_0x39a4ec(0xb34)](_0x3b991b),BattleManager[_0x39a4ec(0x23a)]()['setLastBattleSkill']($dataSkills[_0x3b991b]),this[_0x39a4ec(0x236)]();},Scene_Battle[_0x9c6fcf(0x1ef)]['actorCommandCancelTPB']=function(){const _0x3a545f=_0x9c6fcf;this[_0x3a545f(0xa38)]()?this['performTpbActiveCheckSwitch']():this[_0x3a545f(0x85d)]();},VisuMZ['BattleCore'][_0x9c6fcf(0x5bd)]=![],Scene_Battle['prototype'][_0x9c6fcf(0xa38)]=function(){const _0x38c573=_0x9c6fcf;if(Imported[_0x38c573(0x97d)]&&BattleManager[_0x38c573(0x3af)]())return![];else{if(!VisuMZ['BattleCore'][_0x38c573(0x5bd)])return![];const _0xaa419f=$gameParty[_0x38c573(0x3b8)]()[_0x38c573(0x4e3)](_0x226777=>_0x226777['isTpbCharged']()&&_0x226777[_0x38c573(0x397)]());return _0xaa419f[_0x38c573(0x88e)]>0x0&&BattleManager[_0x38c573(0x23a)]()!==_0xaa419f[_0xaa419f[_0x38c573(0x88e)]-0x1];}},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb1f)]=function(){const _0x24d8b6=_0x9c6fcf,_0x2b329b=BattleManager[_0x24d8b6(0x23a)](),_0x21df20=_0x2b329b['battler']();if(_0x21df20)_0x21df20[_0x24d8b6(0x20b)]();const _0x58d06a=$gameParty[_0x24d8b6(0x3b8)]()[_0x24d8b6(0x4e3)](_0x7697d4=>_0x7697d4['isTpbCharged']()&&_0x7697d4[_0x24d8b6(0x397)]()),_0x444a8e=_0x58d06a[_0x24d8b6(0x9c4)](_0x2b329b),_0x4b6071=_0x58d06a[_0x444a8e+0x1];BattleManager[_0x24d8b6(0x380)]=_0x4b6071||null;if(_0x4b6071)_0x4b6071['setActionState'](_0x24d8b6(0x2a3));_0x2b329b[_0x24d8b6(0x32b)](_0x24d8b6(0x6e4)),this[_0x24d8b6(0x4f0)]();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x85d)]=function(){const _0x4580=_0x9c6fcf;this[_0x4580(0x35d)][_0x4580(0xa66)](),this['_actorCommandWindow'][_0x4580(0x498)]();if(!VisuMZ[_0x4580(0x8f5)][_0x4580(0x5bd)])return;if(Imported[_0x4580(0x97d)]&&BattleManager[_0x4580(0x3af)]())return;if(BattleManager[_0x4580(0x380)]){BattleManager[_0x4580(0x380)][_0x4580(0x32b)](_0x4580(0x6e4));const _0x35be08=BattleManager[_0x4580(0x380)]['battler']();if(_0x35be08)_0x35be08[_0x4580(0x20b)]();}BattleManager[_0x4580(0x380)]=null;},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x9c6fcf(0x1ef)]['createHelpWindow'],Scene_Battle['prototype'][_0x9c6fcf(0xa15)]=function(){const _0x5475ac=_0x9c6fcf;VisuMZ[_0x5475ac(0x8f5)]['Scene_Battle_createHelpWindow'][_0x5475ac(0x7df)](this),this[_0x5475ac(0x698)]();},Scene_Battle['prototype'][_0x9c6fcf(0x698)]=function(){const _0x34f194=_0x9c6fcf;this[_0x34f194(0x217)][_0x34f194(0x4e5)](this[_0x34f194(0x82d)]),this[_0x34f194(0x35d)][_0x34f194(0x4e5)](this[_0x34f194(0x82d)]);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa3f)]=function(){const _0xba681f=_0x9c6fcf;if($gameTemp[_0xba681f(0x7fc)]!==undefined)return $gameTemp[_0xba681f(0x7fc)];if(this['_battleLayoutStyle'])return this[_0xba681f(0x991)];return this[_0xba681f(0x991)]=VisuMZ[_0xba681f(0x8f5)][_0xba681f(0x19c)][_0xba681f(0xb17)][_0xba681f(0x6b8)][_0xba681f(0x3b9)]()[_0xba681f(0x4a5)](),this['_battleLayoutStyle']==='sideview_ui'&&!Imported[_0xba681f(0xa89)]&&(this['_battleLayoutStyle']=_0xba681f(0x295)),this[_0xba681f(0x991)]===_0xba681f(0x365)&&!Imported[_0xba681f(0x446)]&&(this[_0xba681f(0x991)]=_0xba681f(0x295)),this[_0xba681f(0x991)];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x772)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1c6)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1c6)]=function(){const _0x543939=_0x9c6fcf,_0x364926=this['battleLayoutStyle']();switch(_0x364926){case _0x543939(0x61b):return this['calcWindowHeight'](Math[_0x543939(0x716)](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x543939(0x8f5)][_0x543939(0x772)]['call'](this);break;}},VisuMZ[_0x9c6fcf(0x8f5)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa98)],Scene_Battle['prototype'][_0x9c6fcf(0xa98)]=function(){const _0x334ebb=_0x9c6fcf,_0x1b3e7=this[_0x334ebb(0xa3f)]();switch(_0x1b3e7){case _0x334ebb(0x75f):return this[_0x334ebb(0x426)]();break;case _0x334ebb(0x295):case _0x334ebb(0x61b):case'xp':case _0x334ebb(0x7c0):default:return VisuMZ['BattleCore'][_0x334ebb(0x503)][_0x334ebb(0x7df)](this);break;}},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8b3)]=function(){const _0x16f80d=_0x9c6fcf,_0x26243a=this[_0x16f80d(0xa3f)]();switch(_0x26243a){case'xp':case _0x16f80d(0x7c0):return this['statusWindowRectXPStyle']();break;case _0x16f80d(0x75f):return this[_0x16f80d(0x281)]();break;case'default':case _0x16f80d(0x61b):default:return this[_0x16f80d(0x541)]();break;}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x7f5)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7b4)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7b4)]=function(){const _0x32dfd3=_0x9c6fcf,_0x590397=this['battleLayoutStyle']();switch(_0x590397){case'xp':case _0x32dfd3(0x7c0):return this[_0x32dfd3(0x463)]();break;case _0x32dfd3(0x75f):return this[_0x32dfd3(0xae2)]();case _0x32dfd3(0x295):case'list':default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x9c6fcf(0x1ef)]['partyCommandWindowRectDefaultStyle']=function(){const _0x2e140c=_0x9c6fcf,_0x2673d=VisuMZ['BattleCore'][_0x2e140c(0x19c)][_0x2e140c(0xb17)],_0x389c16=_0x2673d['CommandWidth']||0xc0,_0x4993e9=this[_0x2e140c(0x1c6)](),_0x8bc0b8=this[_0x2e140c(0x9b1)]()?Graphics['boxWidth']-_0x389c16:0x0,_0x3083b2=Graphics['boxHeight']-_0x4993e9;return new Rectangle(_0x8bc0b8,_0x3083b2,_0x389c16,_0x4993e9);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x62e)]=function(){const _0x536435=_0x9c6fcf;return this[_0x536435(0x7b4)]();},VisuMZ['BattleCore'][_0x9c6fcf(0x3a9)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x337)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x337)]=function(){const _0x4efe21=_0x9c6fcf,_0x4b34b9=this[_0x4efe21(0xa3f)]();switch(_0x4b34b9){case'xp':case'portrait':case _0x4efe21(0x75f):break;case _0x4efe21(0x295):case'list':default:VisuMZ[_0x4efe21(0x8f5)][_0x4efe21(0x3a9)]['call'](this);break;}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x2bb)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x368)],Scene_Battle[_0x9c6fcf(0x1ef)]['startActorSelection']=function(){const _0x2ce1d0=_0x9c6fcf;VisuMZ['BattleCore'][_0x2ce1d0(0x2bb)][_0x2ce1d0(0x7df)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x49a)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x343)],Scene_Battle['prototype'][_0x9c6fcf(0x343)]=function(){const _0x1db3eb=_0x9c6fcf;VisuMZ[_0x1db3eb(0x8f5)][_0x1db3eb(0x49a)][_0x1db3eb(0x7df)](this),this[_0x1db3eb(0x3ad)]['autoSelect'](),this[_0x1db3eb(0x587)]();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x587)]=function(){const _0x1ae996=_0x9c6fcf,_0x30b9ad=this[_0x1ae996(0xa3f)]();['xp','portrait',_0x1ae996(0x75f)][_0x1ae996(0x765)](_0x30b9ad)&&this[_0x1ae996(0x217)][_0x1ae996(0x498)](),(_0x30b9ad===_0x1ae996(0x75f)||this[_0x1ae996(0x4b7)]())&&(this[_0x1ae996(0x6e5)][_0x1ae996(0x498)](),this[_0x1ae996(0x39e)][_0x1ae996(0x498)]());},VisuMZ['BattleCore'][_0x9c6fcf(0x920)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1f3)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1f3)]=function(){const _0x26696a=_0x9c6fcf;VisuMZ['BattleCore'][_0x26696a(0x920)][_0x26696a(0x7df)](this),this[_0x26696a(0x5f5)]();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2fb)]=function(){const _0xe68364=_0x9c6fcf;return[_0xe68364(0x254),_0xe68364(0xa23),_0xe68364(0x7d6)][_0xe68364(0x765)](this[_0xe68364(0x217)][_0xe68364(0x3f1)]());},VisuMZ['BattleCore'][_0x9c6fcf(0x32d)]=Scene_Battle[_0x9c6fcf(0x1ef)]['onActorCancel'],Scene_Battle['prototype'][_0x9c6fcf(0x9d2)]=function(){const _0x579254=_0x9c6fcf;this[_0x579254(0x2fb)]()?(this[_0x579254(0x197)][_0x579254(0x277)](),this[_0x579254(0x6d3)]['hide'](),this[_0x579254(0x217)]['activate']()):VisuMZ[_0x579254(0x8f5)][_0x579254(0x32d)]['call'](this),this[_0x579254(0x352)]();},VisuMZ['BattleCore'][_0x9c6fcf(0x2a2)]=Scene_Battle['prototype'][_0x9c6fcf(0x291)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x291)]=function(){const _0x2f54aa=_0x9c6fcf;if(!this[_0x2f54aa(0x3ad)][_0x2f54aa(0x2c9)]()){this[_0x2f54aa(0x3ad)]['activate']();return;}const _0x74f00a=BattleManager[_0x2f54aa(0x356)]();_0x74f00a[_0x2f54aa(0x767)](this[_0x2f54aa(0x3ad)][_0x2f54aa(0x2c9)]()),this['_enemyWindow'][_0x2f54aa(0x48f)](),VisuMZ['BattleCore'][_0x2f54aa(0x2a2)][_0x2f54aa(0x7df)](this),this[_0x2f54aa(0x5f5)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x214)]=Scene_Battle[_0x9c6fcf(0x1ef)]['onEnemyCancel'],Scene_Battle[_0x9c6fcf(0x1ef)]['onEnemyCancel']=function(){const _0x1e200a=_0x9c6fcf;this[_0x1e200a(0x2fb)]()?(this[_0x1e200a(0x197)][_0x1e200a(0x277)](),this[_0x1e200a(0x3ad)][_0x1e200a(0x837)](),this[_0x1e200a(0x217)]['activate']()):VisuMZ[_0x1e200a(0x8f5)]['Scene_Battle_onEnemyCancel'][_0x1e200a(0x7df)](this),this[_0x1e200a(0x352)](),this['_enemyWindow'][_0x1e200a(0x48f)]();},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5f5)]=function(){const _0x34dae0=_0x9c6fcf,_0x11578b=this[_0x34dae0(0xa3f)]();(_0x11578b===_0x34dae0(0x75f)||this[_0x34dae0(0x4b7)]())&&(this[_0x34dae0(0x6e5)][_0x34dae0(0x93f)](),this[_0x34dae0(0x6e5)][_0x34dae0(0x313)]&&this['_skillWindow'][_0x34dae0(0x277)](),this[_0x34dae0(0x39e)][_0x34dae0(0x93f)](),this['_itemWindow'][_0x34dae0(0x313)]&&this[_0x34dae0(0x39e)]['show']());},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x352)]=function(){const _0x3c5223=_0x9c6fcf,_0x3899b3=this[_0x3c5223(0xa3f)]();['xp',_0x3c5223(0x7c0),_0x3c5223(0x75f)][_0x3c5223(0x765)](_0x3899b3)&&this[_0x3c5223(0x217)][_0x3c5223(0x93f)](),this[_0x3c5223(0x5f5)]();},Scene_Battle[_0x9c6fcf(0x1ef)]['statusWindowRectDefaultStyle']=function(){const _0x1405e9=_0x9c6fcf,_0x561524=VisuMZ[_0x1405e9(0x8f5)][_0x1405e9(0x19c)]['BattleLayout'],_0x8fad32=Window_BattleStatus[_0x1405e9(0x1ef)][_0x1405e9(0x9ec)](),_0x34ac21=Graphics[_0x1405e9(0x671)]-(_0x561524[_0x1405e9(0x66b)]||0xc0),_0x55e68d=this[_0x1405e9(0x1c6)]()+_0x8fad32,_0x16d831=this['isRightInputMode']()?0x0:Graphics['boxWidth']-_0x34ac21,_0x46436f=Graphics[_0x1405e9(0x5bb)]-_0x55e68d+_0x8fad32;return new Rectangle(_0x16d831,_0x46436f,_0x34ac21,_0x55e68d);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x19f)]=function(){const _0x12c288=_0x9c6fcf,_0x2cc57e=Window_BattleStatus[_0x12c288(0x1ef)][_0x12c288(0x9ec)](),_0x42d13a=Graphics['boxWidth'],_0x1b7c5f=this[_0x12c288(0x1c6)]()+_0x2cc57e,_0x1e81aa=0x0,_0x17e5e8=Graphics[_0x12c288(0x5bb)]-_0x1b7c5f+_0x2cc57e;return new Rectangle(_0x1e81aa,_0x17e5e8,_0x42d13a,_0x1b7c5f);},Scene_Battle['prototype']['partyCommandWindowRectXPStyle']=function(){const _0x4e7af0=_0x9c6fcf,_0x44790e=Graphics['boxWidth']/0x2,_0x9eed80=this[_0x4e7af0(0x479)](VisuMZ[_0x4e7af0(0x8f5)][_0x4e7af0(0x19c)][_0x4e7af0(0xb17)][_0x4e7af0(0x27d)],!![]),_0x2378af=Math[_0x4e7af0(0xb65)]((Graphics[_0x4e7af0(0x671)]-_0x44790e)/0x2),_0x181a3f=Graphics['boxHeight']-_0x9eed80-this['statusWindowRectXPStyle']()[_0x4e7af0(0x202)];return new Rectangle(_0x2378af,_0x181a3f,_0x44790e,_0x9eed80);},Scene_Battle[_0x9c6fcf(0x1ef)]['helpWindowRectBorderStyle']=function(){const _0x418bd1=_0x9c6fcf,_0x23a5bf=Graphics[_0x418bd1(0xac8)],_0x5e5085=Math[_0x418bd1(0xb65)]((Graphics['boxWidth']-_0x23a5bf)/0x2),_0x5cb761=this[_0x418bd1(0x30e)](),_0x2d9f69=(Graphics[_0x418bd1(0x202)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x5e5085,_0x2d9f69,_0x23a5bf,_0x5cb761);},Scene_Battle['prototype'][_0x9c6fcf(0x281)]=function(){const _0x1064ce=_0x9c6fcf,_0x2591bf=Graphics[_0x1064ce(0xac8)],_0x826164=Math[_0x1064ce(0xb65)]((Graphics[_0x1064ce(0x671)]-_0x2591bf)/0x2),_0x326bcf=this['calcWindowHeight'](0x4,!![]),_0x3e3a7e=Graphics[_0x1064ce(0x5bb)]-_0x326bcf+(Graphics[_0x1064ce(0x202)]-Graphics[_0x1064ce(0x5bb)])/0x2;return new Rectangle(_0x826164,_0x3e3a7e,_0x2591bf,_0x326bcf);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xae2)]=function(){const _0x5df968=_0x9c6fcf,_0x28d859=Math['floor'](Graphics[_0x5df968(0xac8)]/0x3),_0x1afd2c=this['isRightInputMode']()?(Graphics[_0x5df968(0xac8)]+Graphics[_0x5df968(0x671)])/0x2-_0x28d859:(Graphics[_0x5df968(0xac8)]-Graphics['boxWidth'])/-0x2,_0x37f702=this[_0x5df968(0x426)](),_0x45c0d1=_0x37f702['y']+_0x37f702[_0x5df968(0x202)],_0x350563=this[_0x5df968(0x281)](),_0x12be59=_0x350563['y']-_0x45c0d1;return new Rectangle(_0x1afd2c,_0x45c0d1,_0x28d859,_0x12be59);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x810)]=function(){const _0x5c678e=_0x9c6fcf,_0x359910=Math[_0x5c678e(0x571)](Graphics['width']/0x3),_0x2134b0=Math['round']((Graphics[_0x5c678e(0x671)]-_0x359910)/0x2),_0x40ca79=this[_0x5c678e(0xae2)](),_0x434141=_0x40ca79['y'],_0x5d8458=_0x40ca79['height'];return new Rectangle(_0x2134b0,_0x434141,_0x359910,_0x5d8458);},Scene_Battle[_0x9c6fcf(0x1ef)]['repositionCancelButtonBorderStyle']=function(){const _0x80af1b=_0x9c6fcf;this['_cancelButton']['y']=this[_0x80af1b(0x82d)]['y']+this[_0x80af1b(0x82d)][_0x80af1b(0x202)],this[_0x80af1b(0x9b1)]()?this[_0x80af1b(0xa3f)]()==='border'?this[_0x80af1b(0xb55)]['x']=0x8:this[_0x80af1b(0xb55)]['x']=-this[_0x80af1b(0xb55)][_0x80af1b(0xac8)]-0x4:this[_0x80af1b(0xb55)]['x']=Graphics[_0x80af1b(0xac8)]-(Graphics[_0x80af1b(0xac8)]-Graphics[_0x80af1b(0x671)])/0x2-this['_cancelButton']['width']-0x4;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xa40)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1ea)],Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1ea)]=function(){const _0x539ba0=_0x9c6fcf;if(this[_0x539ba0(0xa3f)]()===_0x539ba0(0x75f))return this[_0x539ba0(0x810)]();else return this[_0x539ba0(0x4b7)]()?this[_0x539ba0(0x5fb)]():VisuMZ[_0x539ba0(0x8f5)][_0x539ba0(0xa40)]['call'](this);},VisuMZ['BattleCore'][_0x9c6fcf(0x8e4)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ff)],Scene_Battle['prototype'][_0x9c6fcf(0x5ff)]=function(){const _0x41acba=_0x9c6fcf;if(this['battleLayoutStyle']()===_0x41acba(0x75f))return this[_0x41acba(0x810)]();else return this['isSkillItemWindowsMiddle']()?this[_0x41acba(0x5fb)]():VisuMZ['BattleCore'][_0x41acba(0x8e4)]['call'](this);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4b7)]=function(){const _0x37f0f1=_0x9c6fcf;return VisuMZ[_0x37f0f1(0x8f5)][_0x37f0f1(0x19c)]['BattleLayout'][_0x37f0f1(0x469)];},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5fb)]=function(){const _0x444db9=_0x9c6fcf,_0x4b6645=Sprite_Button['prototype'][_0x444db9(0x2f4)]()*0x2+0x4;let _0x350ec3=Graphics[_0x444db9(0x671)]-_0x4b6645;Imported[_0x444db9(0xb00)]&&SceneManager[_0x444db9(0x59d)]()&&(_0x350ec3+=_0x4b6645);const _0x4396f6=this[_0x444db9(0x322)](),_0xcc7fb2=Graphics[_0x444db9(0x5bb)]-_0x4396f6-this[_0x444db9(0x8b3)]()[_0x444db9(0x202)]+Window_BattleStatus[_0x444db9(0x1ef)][_0x444db9(0x9ec)](),_0x19dd9a=0x0;return new Rectangle(_0x19dd9a,_0x4396f6,_0x350ec3,_0xcc7fb2);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x908)]=function(){const _0x2f316c=_0x9c6fcf;if(!VisuMZ[_0x2f316c(0x8f5)][_0x2f316c(0x19c)][_0x2f316c(0x7b3)][_0x2f316c(0x5bc)])return;this['_enemyNameContainer']=new Sprite(),this[_0x2f316c(0x770)]['x']=this[_0x2f316c(0x185)]['x'],this[_0x2f316c(0x770)]['y']=this[_0x2f316c(0x185)]['y'];const _0x2e8ed1=this[_0x2f316c(0x621)][_0x2f316c(0x9c4)](this[_0x2f316c(0x185)]);this[_0x2f316c(0x63c)](this['_enemyNameContainer'],_0x2e8ed1);for(let _0xf0f1e2=0x0;_0xf0f1e2<0x8;_0xf0f1e2++){const _0x2f901e=new Window_EnemyName(_0xf0f1e2);this[_0x2f316c(0x770)][_0x2f316c(0x210)](_0x2f901e);}},Sprite_Battler[_0x9c6fcf(0x5be)]=VisuMZ['BattleCore'][_0x9c6fcf(0x19c)][_0x9c6fcf(0x6e6)][_0x9c6fcf(0xb14)],VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x6c0)]=Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x875)],Sprite_Battler['prototype'][_0x9c6fcf(0x875)]=function(){const _0x26cfe9=_0x9c6fcf;VisuMZ['BattleCore']['Sprite_Battler_initMembers']['call'](this),this[_0x26cfe9(0x9c2)]();if(this[_0x26cfe9(0x788)]===Sprite_Enemy)this[_0x26cfe9(0x9e6)]();this['createDistortionSprite']();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9c2)]=function(){const _0x4e84a4=_0x9c6fcf;this[_0x4e84a4(0x761)]=0x0,this[_0x4e84a4(0x46a)]=0x0,this[_0x4e84a4(0x6db)]=0x0,this[_0x4e84a4(0xa54)]=0x0,this[_0x4e84a4(0x169)]=0x0,this[_0x4e84a4(0x400)]=0x0,this['_floatEasing']=_0x4e84a4(0x5c4),this[_0x4e84a4(0x80e)]=0x0,this['_jumpMaxHeight']=0x0,this[_0x4e84a4(0x2aa)]=0x0,this['_jumpWholeDuration']=0x0,this[_0x4e84a4(0x733)]=0xff,this[_0x4e84a4(0x537)]=0x0,this[_0x4e84a4(0x5fe)]=0x0,this[_0x4e84a4(0x371)]=_0x4e84a4(0x5c4),this[_0x4e84a4(0x8d9)]=0x0,this[_0x4e84a4(0x18a)]=0x0,this[_0x4e84a4(0x5af)]=0x0,this[_0x4e84a4(0x4e0)]=0x0,this[_0x4e84a4(0x5a6)]=_0x4e84a4(0x5c4),this[_0x4e84a4(0xaf1)]=!![],this[_0x4e84a4(0x8b0)]=0x0,this[_0x4e84a4(0x423)]=0x0,this[_0x4e84a4(0x626)]=0x0,this[_0x4e84a4(0xa88)]=0x0,this[_0x4e84a4(0xa6e)]=0x0,this[_0x4e84a4(0x8c8)]=0x0,this[_0x4e84a4(0xaed)]=_0x4e84a4(0x5c4),this['_growX']=0x1,this[_0x4e84a4(0x472)]=0x1,this[_0x4e84a4(0x433)]=0x1,this['_targetGrowY']=0x1,this['_growDuration']=0x0,this[_0x4e84a4(0x845)]=0x0,this['_growEasing']=_0x4e84a4(0x5c4),this[_0x4e84a4(0xa85)]=0x1,this[_0x4e84a4(0x50a)]=0x0,this[_0x4e84a4(0x7a8)]=0x0,this[_0x4e84a4(0x6d9)]=0x0,this[_0x4e84a4(0x6aa)]=0x0,this[_0x4e84a4(0x9d8)]=_0x4e84a4(0x5c4),this[_0x4e84a4(0x650)]=0x0,this[_0x4e84a4(0x798)]=0x0;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9e6)]=function(){const _0x1868f6=_0x9c6fcf;this[_0x1868f6(0x8a1)]=new Sprite(),this['_shadowSprite'][_0x1868f6(0x96b)]=ImageManager[_0x1868f6(0x48e)](_0x1868f6(0xafa)),this['_shadowSprite'][_0x1868f6(0x96b)][_0x1868f6(0x682)]=VisuMZ['BattleCore'][_0x1868f6(0x19c)][_0x1868f6(0x6e6)][_0x1868f6(0xa13)],this['_shadowSprite'][_0x1868f6(0x62b)]['x']=0.5,this['_shadowSprite'][_0x1868f6(0x62b)]['y']=0.5,this[_0x1868f6(0x8a1)]['y']=-0x2,this[_0x1868f6(0x8a1)][_0x1868f6(0x9cb)]=![],this['addChild'](this[_0x1868f6(0x8a1)]);},Sprite_Battler[_0x9c6fcf(0x1ef)]['createDistortionSprite']=function(){const _0x2f28cf=_0x9c6fcf;this['_distortionSprite']=new Sprite(),this['_distortionSprite'][_0x2f28cf(0x62b)]['x']=0.5,this[_0x2f28cf(0x7ee)][_0x2f28cf(0x62b)]['y']=0.5,this[_0x2f28cf(0x210)](this[_0x2f28cf(0x7ee)]);},Sprite_Battler[_0x9c6fcf(0x1ef)]['_updateColorFilter']=function(){const _0x157435=_0x9c6fcf;if(this[_0x157435(0x6ca)]&&this[_0x157435(0x6ca)]()){Sprite[_0x157435(0x1ef)][_0x157435(0x4b3)][_0x157435(0x7df)](this);return;}const _0x3f0269=this[_0x157435(0x7ee)];if(!_0x3f0269)return;!_0x3f0269['_colorFilter']&&_0x3f0269[_0x157435(0x323)](),_0x3f0269[_0x157435(0x78b)][_0x157435(0x43e)](this[_0x157435(0x917)]),_0x3f0269[_0x157435(0x78b)][_0x157435(0x5ad)](this[_0x157435(0xaad)]),_0x3f0269[_0x157435(0x78b)]['setColorTone'](this[_0x157435(0x345)]);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4c1)]=function(){const _0x1d7135=_0x9c6fcf;if(!this['_distortionSprite'])return;if(this['_shadowSprite']){const _0x35ba2a=this[_0x1d7135(0xb26)](this['_distortionSprite']);this['addChildAt'](this['_shadowSprite'],_0x35ba2a),this['updateShadowVisibility']();}this[_0x1d7135(0x651)]&&this['_distortionSprite'][_0x1d7135(0x210)](this[_0x1d7135(0x651)]),this['_weaponSprite']&&this['_distortionSprite']['addChild'](this[_0x1d7135(0xa99)]),this[_0x1d7135(0x692)]&&this[_0x1d7135(0x7ee)][_0x1d7135(0x210)](this[_0x1d7135(0x692)]),this[_0x1d7135(0x843)]&&this[_0x1d7135(0x7ee)][_0x1d7135(0x210)](this[_0x1d7135(0x843)]),this[_0x1d7135(0xb37)]&&this[_0x1d7135(0x7ee)][_0x1d7135(0x210)](this[_0x1d7135(0xb37)]);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1eb)]=function(){const _0x428acb=_0x9c6fcf;if(!this[_0x428acb(0x8a1)])return;if(this[_0x428acb(0x7f4)]&&this[_0x428acb(0x7f4)][_0x428acb(0xa52)]()){const _0x2ab280=this[_0x428acb(0x8a1)]['bitmap'];this[_0x428acb(0x8a1)][_0x428acb(0x5fa)](0x0,0x0,_0x2ab280[_0x428acb(0xac8)],_0x2ab280[_0x428acb(0x202)]);}else this['_shadowSprite']['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x68a)]=function(){const _0x3982b7=_0x9c6fcf;return SceneManager[_0x3982b7(0x319)]()?SceneManager['_scene'][_0x3982b7(0x21f)][_0x3982b7(0x64b)]:this[_0x3982b7(0x7cc)];},Sprite_Battler['prototype'][_0x9c6fcf(0x64d)]=function(_0x14b141,_0x3a4f9f){const _0x38fb5c=_0x9c6fcf;if(!this[_0x38fb5c(0x7f4)][_0x38fb5c(0x167)]())return;if(BattleManager[_0x38fb5c(0x3d4)]())return;const _0x57f1f4=VisuMZ[_0x38fb5c(0x8f5)][_0x38fb5c(0x19c)][_0x38fb5c(0x9a9)],_0x1ea7b8=new Sprite_Damage();_0x1ea7b8[_0x38fb5c(0xa29)]=_0x57f1f4['PopupDuration'],this[_0x38fb5c(0x88c)](_0x1ea7b8),_0x1ea7b8[_0x38fb5c(0x64d)](_0x14b141,_0x3a4f9f),this['addDamageSprite'](_0x1ea7b8);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2f9)]=function(_0x1747c9,_0xc9e01d,_0x493f47){const _0x38d629=_0x9c6fcf;if(!this['_battler'][_0x38d629(0x167)]())return;if(BattleManager[_0x38d629(0x3d4)]())return;const _0xb7bc4=VisuMZ[_0x38d629(0x8f5)][_0x38d629(0x19c)][_0x38d629(0x9a9)],_0x1333c3=new Sprite_Damage();_0x1333c3['_duration']=_0xb7bc4[_0x38d629(0x91f)],this['sortDamageSprites'](_0x1333c3),_0x1333c3['setupIconTextPopup'](_0x1747c9,_0xc9e01d,_0x493f47),this[_0x38d629(0x3c1)](_0x1333c3);},Sprite_Battler['prototype'][_0x9c6fcf(0xb23)]=function(){const _0x225a7e=_0x9c6fcf;if(!this['_battler'][_0x225a7e(0x1f7)]())return;while(this['_battler'][_0x225a7e(0x1f7)]()){this[_0x225a7e(0x7f4)][_0x225a7e(0x167)]()&&this[_0x225a7e(0x7cd)]();}this[_0x225a7e(0x7f4)][_0x225a7e(0x78c)](),this[_0x225a7e(0x7f4)][_0x225a7e(0x51b)]();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7cd)]=function(){const _0x1597bd=_0x9c6fcf;if(BattleManager[_0x1597bd(0x3d4)]())return;const _0x3f228f=VisuMZ[_0x1597bd(0x8f5)][_0x1597bd(0x19c)][_0x1597bd(0x9a9)],_0x64288f=new Sprite_Damage();_0x64288f['_duration']=_0x3f228f[_0x1597bd(0x91f)],this[_0x1597bd(0x88c)](_0x64288f),_0x64288f[_0x1597bd(0xa66)](this[_0x1597bd(0x7f4)]),_0x64288f[_0x1597bd(0x912)](this[_0x1597bd(0x7f4)]),this[_0x1597bd(0x3c1)](_0x64288f);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3c1)]=function(_0x15607e){const _0x42c9d9=_0x9c6fcf;this['_damages']['push'](_0x15607e);if(this[_0x42c9d9(0x563)]()){const _0x31ad61=SceneManager[_0x42c9d9(0x90f)]['_statusWindow'];if(_0x31ad61)_0x31ad61[_0x42c9d9(0x3c1)](_0x15607e,this[_0x42c9d9(0x7f4)]);}else{this[_0x42c9d9(0x68a)]()[_0x42c9d9(0x210)](_0x15607e);if(SceneManager[_0x42c9d9(0x980)]())_0x15607e[_0x42c9d9(0x4bc)]['x']=-0x1;}},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x563)]=function(){const _0x18beb6=_0x9c6fcf;return!$gameSystem[_0x18beb6(0x95c)]()&&this[_0x18beb6(0x7f4)]&&this[_0x18beb6(0x7f4)]['isActor']();return!$gameSystem[_0x18beb6(0x95c)]()&&this[_0x18beb6(0x7f4)]&&this[_0x18beb6(0x7f4)][_0x18beb6(0x552)]()&&Window_BattleStatus[_0x18beb6(0x1ef)][_0x18beb6(0xa3f)]()==='portrait';},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x88c)]=function(_0x9bb38f){const _0x279697=_0x9c6fcf;this['alignBattleCoreDamageSprite'](_0x9bb38f,!![]);const _0x10d9c2=VisuMZ['BattleCore'][_0x279697(0x19c)][_0x279697(0x9a9)],_0x5f5826=SceneManager[_0x279697(0x980)]()?-0x1:0x1;if(_0x10d9c2[_0x279697(0x1aa)])for(const _0x11b70c of this['_damages']){_0x11b70c['x']+=_0x10d9c2[_0x279697(0x139)]*_0x5f5826,_0x11b70c['y']+=_0x10d9c2[_0x279697(0x93b)];}else{const _0x4202fa=this[_0x279697(0x72b)][this[_0x279697(0x72b)]['length']-0x1];_0x4202fa&&(_0x9bb38f['x']=_0x4202fa['x']+_0x10d9c2[_0x279697(0x139)]*_0x5f5826,_0x9bb38f['y']=_0x4202fa['y']+_0x10d9c2[_0x279697(0x93b)]);}},Sprite_Battler['prototype'][_0x9c6fcf(0x5b1)]=function(_0x54d423,_0x1f2184){const _0xd57960=_0x9c6fcf,_0x18e324=SceneManager[_0xd57960(0x980)]()?-0x1:0x1;let _0x577e24=this[_0xd57960(0x761)];_0x577e24+=this['extraPositionX']();let _0x40b0f4=this[_0xd57960(0x46a)];const _0x4b5d76=this[_0xd57960(0x7ee)][_0xd57960(0x4bc)]['y'];_0x40b0f4+=this[_0xd57960(0x401)]();const _0x51304d=SceneManager[_0xd57960(0x90f)][_0xd57960(0x197)];if(_0x51304d&&this[_0xd57960(0x7cc)]===_0x51304d){_0x577e24+=_0x51304d['x']-this[_0xd57960(0xa53)]();const _0x3fdc14=_0x51304d[_0xd57960(0x8ae)]()*0x3/0x4;_0x40b0f4=_0x51304d['y']+_0x3fdc14,_0x40b0f4=Math['min'](_0x40b0f4,_0x51304d['y']+this['y']-this[_0xd57960(0x202)]+_0x3fdc14);}_0x54d423['x']=Math[_0xd57960(0xb65)](_0x577e24+this[_0xd57960(0xa53)]()*_0x18e324),_0x54d423['y']=Math[_0xd57960(0xb65)](_0x40b0f4+this[_0xd57960(0x8ee)]());},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa53)],Sprite_Battler['prototype'][_0x9c6fcf(0xa53)]=function(){const _0x129b58=_0x9c6fcf;let _0x1177e1=VisuMZ[_0x129b58(0x8f5)][_0x129b58(0x7fa)][_0x129b58(0x7df)](this),_0x5caee3=VisuMZ[_0x129b58(0x8f5)][_0x129b58(0x19c)][_0x129b58(0x9a9)][_0x129b58(0x969)]||0x0;return Math[_0x129b58(0xb65)](_0x1177e1+_0x5caee3);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x1e1)]=Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8ee)],Sprite_Battler[_0x9c6fcf(0x1ef)]['damageOffsetY']=function(){const _0x502c27=_0x9c6fcf;let _0x429026=VisuMZ[_0x502c27(0x8f5)][_0x502c27(0x1e1)][_0x502c27(0x7df)](this);switch(VisuMZ[_0x502c27(0x8f5)][_0x502c27(0x19c)][_0x502c27(0x9a9)][_0x502c27(0x8ad)]){case _0x502c27(0x945):_0x429026-=this[_0x502c27(0x202)]*this[_0x502c27(0x4bc)]['y'];break;case _0x502c27(0x328):_0x429026-=this['height']*this['scale']['y']*0.5;break;}let _0x52f8eb=VisuMZ[_0x502c27(0x8f5)]['Settings']['Damage']['PopupOffsetY']||0x0;return Math[_0x502c27(0xb65)](_0x429026+_0x52f8eb);},Sprite_Actor[_0x9c6fcf(0x1ef)]['damageOffsetX']=function(){const _0x24a946=_0x9c6fcf;return Sprite_Battler[_0x24a946(0x1ef)][_0x24a946(0xa53)][_0x24a946(0x7df)](this);},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8ee)]=function(){const _0x30aadb=_0x9c6fcf;return Sprite_Battler[_0x30aadb(0x1ef)][_0x30aadb(0x8ee)]['call'](this);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x12f)]=function(_0x3a1e66){const _0x4a14fd=_0x9c6fcf;this[_0x4a14fd(0x563)]()?SceneManager[_0x4a14fd(0x90f)][_0x4a14fd(0x197)]['removeDamageSprite'](_0x3a1e66):(this[_0x4a14fd(0x68a)]()[_0x4a14fd(0x68d)](_0x3a1e66),this[_0x4a14fd(0x72b)][_0x4a14fd(0x7e5)](_0x3a1e66),_0x3a1e66[_0x4a14fd(0x209)]());},VisuMZ['BattleCore'][_0x9c6fcf(0x17f)]=Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7e8)],Sprite_Battler['prototype'][_0x9c6fcf(0x7e8)]=function(_0x9677d3,_0x5cfc5d){const _0x4e8c89=_0x9c6fcf,_0x1b952c=VisuMZ[_0x4e8c89(0x8f5)][_0x4e8c89(0x19c)];if(this[_0x4e8c89(0x788)]===Sprite_Actor)_0x9677d3+=_0x1b952c['Actor'][_0x4e8c89(0x30c)]||0x0,_0x5cfc5d+=_0x1b952c[_0x4e8c89(0x6e6)][_0x4e8c89(0x238)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x9677d3+=_0x1b952c[_0x4e8c89(0x7b3)][_0x4e8c89(0x30c)]||0x0,_0x5cfc5d+=_0x1b952c['Enemy'][_0x4e8c89(0x238)]||0x0);this['_battler']&&(_0x9677d3=this[_0x4e8c89(0x7f4)][_0x4e8c89(0x578)]??_0x9677d3,_0x5cfc5d=this[_0x4e8c89(0x7f4)]['_forcedHomeY']??_0x5cfc5d),VisuMZ['BattleCore'][_0x4e8c89(0x17f)]['call'](this,_0x9677d3,_0x5cfc5d),this['_targetHomeX']=this['_homeX'],this[_0x4e8c89(0x7a8)]=this[_0x4e8c89(0x17a)],this[_0x4e8c89(0x6d9)]=0x0,this[_0x4e8c89(0x6aa)]=0x0,this[_0x4e8c89(0x9d8)]=_0x4e8c89(0x5c4);},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Battler_update']=Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)],Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)]=function(){const _0x36abdd=_0x9c6fcf;VisuMZ[_0x36abdd(0x8f5)][_0x36abdd(0x3e8)][_0x36abdd(0x7df)](this),!this[_0x36abdd(0x7f4)]&&this[_0x36abdd(0x615)]&&(this[_0x36abdd(0x615)][_0x36abdd(0x9cb)]=![]);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x9a3)]=Sprite_Battler['prototype']['updateMain'],Sprite_Battler[_0x9c6fcf(0x1ef)]['updateMain']=function(){const _0x280b09=_0x9c6fcf;this['updateScale'](),this[_0x280b09(0x6a1)](),this[_0x280b09(0x949)](),this[_0x280b09(0x8e3)](),VisuMZ[_0x280b09(0x8f5)][_0x280b09(0x9a3)][_0x280b09(0x7df)](this),this[_0x280b09(0x523)](),this[_0x280b09(0x1bf)]();if(this[_0x280b09(0x788)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x88a)]=Sprite_Battler[_0x9c6fcf(0x1ef)]['updatePosition'],Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x96f)]=function(){const _0x3b1c6d=_0x9c6fcf;this['updateHomeMove'](),VisuMZ[_0x3b1c6d(0x8f5)][_0x3b1c6d(0x88a)]['call'](this),this[_0x3b1c6d(0x684)](),this[_0x3b1c6d(0x3ba)]();},Sprite_Battler['prototype'][_0x9c6fcf(0x50c)]=function(){const _0x2641b4=_0x9c6fcf,_0x3c4257=this[_0x2641b4(0x2db)]();if(this['_battler']['isSelected']())this[_0x2641b4(0x6a8)]++,Graphics[_0x2641b4(0xb42)]%0x1e<0xf?_0x3c4257[_0x2641b4(0x5ad)]([0xff,0xff,0xff,0x40]):_0x3c4257[_0x2641b4(0x5ad)]([0x0,0x0,0x0,0x0]);else this[_0x2641b4(0x6a8)]>0x0&&(this[_0x2641b4(0x6a8)]=0x0,_0x3c4257[_0x2641b4(0x5ad)]([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype']['silentHomeMove']=function(_0xd9507f,_0x3a167f){const _0x156207=_0x9c6fcf,_0x586cb4=VisuMZ[_0x156207(0x8f5)][_0x156207(0x19c)];if(this[_0x156207(0x788)]===Sprite_Actor)_0xd9507f+=_0x586cb4['Actor'][_0x156207(0x30c)]||0x0,_0x3a167f+=_0x586cb4[_0x156207(0x6e6)]['OffsetY']||0x0;else this[_0x156207(0x788)]===Sprite_Enemy&&(_0xd9507f+=_0x586cb4[_0x156207(0x7b3)]['OffsetX']||0x0,_0x3a167f+=_0x586cb4[_0x156207(0x7b3)][_0x156207(0x238)]||0x0);const _0x23c286=_0xd9507f-this[_0x156207(0x606)],_0x1d8f8a=_0x3a167f-this[_0x156207(0x17a)];this[_0x156207(0x606)]=_0xd9507f,this[_0x156207(0x17a)]=_0x3a167f,this[_0x156207(0x94f)]-=_0x23c286,this[_0x156207(0x201)]-=_0x1d8f8a,this['_targetOffsetX']-=_0x23c286,this[_0x156207(0x141)]-=_0x1d8f8a,this[_0x156207(0x96f)]();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x83d)]=function(_0x1cd9dd,_0x514bd2,_0x4fbb9e,_0x214ea2){const _0x2db458=_0x9c6fcf,_0x4732f7=VisuMZ[_0x2db458(0x8f5)][_0x2db458(0x19c)];if(this[_0x2db458(0x788)]===Sprite_Actor)_0x1cd9dd+=_0x4732f7[_0x2db458(0x6e6)]['OffsetX']||0x0,_0x514bd2+=_0x4732f7['Actor']['OffsetY']||0x0;else this[_0x2db458(0x788)]===Sprite_Enemy&&(_0x1cd9dd+=_0x4732f7[_0x2db458(0x7b3)][_0x2db458(0x30c)]||0x0,_0x514bd2+=_0x4732f7[_0x2db458(0x7b3)][_0x2db458(0x238)]||0x0);(this[_0x2db458(0x50a)]!==_0x1cd9dd||this['_targetHomeY']!==_0x514bd2)&&(this[_0x2db458(0x50a)]=_0x1cd9dd,this[_0x2db458(0x7a8)]=_0x514bd2,this[_0x2db458(0x6d9)]=_0x4fbb9e,this[_0x2db458(0x6aa)]=_0x4fbb9e,this['_homeEasing']=_0x214ea2,_0x4fbb9e<=0x0&&this[_0x2db458(0x95b)]());},Sprite_Battler['prototype'][_0x9c6fcf(0xa65)]=function(){const _0x523386=_0x9c6fcf;if(this['_homeDuration']<=0x0)return;const _0x2ad040=this[_0x523386(0x6d9)],_0x5868e3=this['_homeWholeDuration'],_0xddabd5=this[_0x523386(0x9d8)];Imported[_0x523386(0xb00)]?(this[_0x523386(0x606)]=this[_0x523386(0x377)](this[_0x523386(0x606)],this[_0x523386(0x50a)],_0x2ad040,_0x5868e3,_0xddabd5),this[_0x523386(0x17a)]=this[_0x523386(0x377)](this[_0x523386(0x17a)],this[_0x523386(0x7a8)],_0x2ad040,_0x5868e3,_0xddabd5)):(this['_homeX']=(this[_0x523386(0x606)]*(_0x2ad040-0x1)+this[_0x523386(0x50a)])/_0x2ad040,this[_0x523386(0x17a)]=(this[_0x523386(0x17a)]*(_0x2ad040-0x1)+this[_0x523386(0x7a8)])/_0x2ad040);this[_0x523386(0x6d9)]--;if(this[_0x523386(0x6d9)]<=0x0)this[_0x523386(0x95b)]();},Sprite_Battler['prototype'][_0x9c6fcf(0x95b)]=function(){const _0x5f10f2=_0x9c6fcf;this[_0x5f10f2(0x606)]=this[_0x5f10f2(0x50a)],this[_0x5f10f2(0x17a)]=this[_0x5f10f2(0x7a8)];},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x684)]=function(){const _0x298a8f=_0x9c6fcf;this[_0x298a8f(0x761)]=this['x'],this['_baseY']=this['y'],this['updateFloat'](),this[_0x298a8f(0x186)](),this['x']+=this[_0x298a8f(0x82a)](),this['y']+=this[_0x298a8f(0x401)](),this['y']+=this[_0x298a8f(0x964)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x298a8f(0x52a)](this['y']);},Sprite_Battler['prototype']['extraPositionX']=function(){let _0x5b404f=0x0;return _0x5b404f;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x401)]=function(){const _0x531c7a=_0x9c6fcf;let _0x3dbb17=0x0;return this['_battler']&&!this['_battler']['isBattlerGrounded']()&&(_0x3dbb17-=this[_0x531c7a(0x6db)],_0x3dbb17-=this[_0x531c7a(0x80e)]),_0x3dbb17;},Sprite_Battler['prototype'][_0x9c6fcf(0x964)]=function(){const _0x3f0708=_0x9c6fcf;let _0x325370=0x0;if(this['_distortionSprite']&&this[_0x3f0708(0x788)]!==Sprite_SvEnemy){const _0x59cf27=this[_0x3f0708(0x7ee)][_0x3f0708(0x4bc)]['y'];_0x325370-=(_0x59cf27-0x1)*this['height'];}return _0x325370;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8e3)]=function(){const _0x3e7000=_0x9c6fcf,_0x1a9212=this[_0x3e7000(0x7f4)]&&this['_battler'][_0x3e7000(0x979)]();this[_0x3e7000(0xa85)]=(_0x1a9212?-0x1:0x1)*Math[_0x3e7000(0x278)](this[_0x3e7000(0x4bc)]['x']);},Sprite_Battler[_0x9c6fcf(0x1ef)]['startFloat']=function(_0xa36f08,_0x524d69,_0x57685a){const _0x153686=_0x9c6fcf;if(!this[_0x153686(0x933)]())return;if(this[_0x153686(0xa54)]===_0xa36f08)return;this[_0x153686(0xa54)]=_0xa36f08,this['_floatDuration']=_0x524d69,this[_0x153686(0x400)]=_0x524d69,this[_0x153686(0x314)]=_0x57685a||_0x153686(0x5c4);if(_0x524d69<=0x0)this[_0x153686(0x6db)]=_0xa36f08;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ac)]=function(){const _0x18e15e=_0x9c6fcf;if(this['_floatDuration']<=0x0)return;const _0xae8ce6=this[_0x18e15e(0x169)],_0x2410e1=this['_floatWholeDuration'],_0x2b0e60=this[_0x18e15e(0x314)];Imported['VisuMZ_0_CoreEngine']?this['_floatHeight']=this[_0x18e15e(0x377)](this['_floatHeight'],this[_0x18e15e(0xa54)],_0xae8ce6,_0x2410e1,_0x2b0e60):this['_floatHeight']=(this[_0x18e15e(0x6db)]*(_0xae8ce6-0x1)+this[_0x18e15e(0xa54)])/_0xae8ce6;this[_0x18e15e(0x169)]--;if(this[_0x18e15e(0x169)]<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x9c6fcf(0x1ef)]['onFloatEnd']=function(){const _0x2c1e8e=_0x9c6fcf;this[_0x2c1e8e(0x6db)]=this[_0x2c1e8e(0xa54)];},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x92a)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5bf)]=function(_0x5d99da,_0x29d585){const _0x288de4=_0x9c6fcf;if(!this[_0x288de4(0x933)]())return;if(_0x29d585<=0x0)return;this['_jumpMaxHeight']=_0x5d99da,this[_0x288de4(0x2aa)]=_0x29d585,this['_jumpWholeDuration']=_0x29d585;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x186)]=function(){const _0x4fd5cf=_0x9c6fcf;if(this['_jumpDuration']<=0x0)return;const _0x255caa=this[_0x4fd5cf(0x893)]-this[_0x4fd5cf(0x2aa)],_0x9436dd=this[_0x4fd5cf(0x893)]/0x2,_0x2b54d4=this[_0x4fd5cf(0x68b)],_0x42232d=-_0x2b54d4/Math[_0x4fd5cf(0xa67)](_0x9436dd,0x2);this[_0x4fd5cf(0x80e)]=_0x42232d*Math['pow'](_0x255caa-_0x9436dd,0x2)+_0x2b54d4,this['_jumpDuration']--;if(this['_jumpDuration']<=0x0)return this[_0x4fd5cf(0x125)]();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x125)]=function(){const _0x321dfb=_0x9c6fcf;this[_0x321dfb(0x80e)]=0x0;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x532)]=function(){const _0x2da996=_0x9c6fcf;return this[_0x2da996(0x2aa)]>0x0;},Sprite_Battler['prototype'][_0x9c6fcf(0x43c)]=function(_0x3d07b2,_0x32990f,_0x42c13a){const _0x414ce2=_0x9c6fcf;if(this[_0x414ce2(0x733)]===_0x3d07b2)return;this['_targetOpacity']=_0x3d07b2,this[_0x414ce2(0x537)]=_0x32990f,this[_0x414ce2(0x5fe)]=_0x32990f,this[_0x414ce2(0x371)]=_0x42c13a||_0x414ce2(0x5c4);if(_0x32990f<=0x0)this['opacity']=_0x3d07b2;},Sprite_Battler['prototype'][_0x9c6fcf(0x3ba)]=function(){const _0x12141d=_0x9c6fcf;if(this[_0x12141d(0x788)][_0x12141d(0x613)]===_0x12141d(0xa30))return;if(this[_0x12141d(0x537)]<=0x0)return;const _0x5dee5d=this['_opacityDuration'],_0x5ae0a1=this[_0x12141d(0x5fe)],_0x41d431=this[_0x12141d(0x371)];Imported['VisuMZ_0_CoreEngine']?this[_0x12141d(0x888)]=this['applyEasing'](this[_0x12141d(0x888)],this[_0x12141d(0x733)],_0x5dee5d,_0x5ae0a1,_0x41d431):this[_0x12141d(0x888)]=(this[_0x12141d(0x888)]*(_0x5dee5d-0x1)+this[_0x12141d(0x733)])/_0x5dee5d;this[_0x12141d(0x537)]--;if(this[_0x12141d(0x537)]<=0x0)this[_0x12141d(0x558)]();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x558)]=function(){const _0x54a49b=_0x9c6fcf;this[_0x54a49b(0x888)]=this[_0x54a49b(0x733)];},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x27c)]=function(){const _0x5495aa=_0x9c6fcf;return this[_0x5495aa(0x537)]>0x0;},Sprite_Battler['prototype'][_0x9c6fcf(0x6b4)]=function(){const _0x9adcb0=_0x9c6fcf;this[_0x9adcb0(0x8a1)]['visible']=this[_0x9adcb0(0x7f4)][_0x9adcb0(0xb41)](),this[_0x9adcb0(0x86a)]();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x86a)]=function(){const _0x5a19b5=_0x9c6fcf;if(!this[_0x5a19b5(0x8a1)])return;this[_0x5a19b5(0x8a1)]['y']=this[_0x5a19b5(0x46a)]-this['y']-0x2;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x711)]=function(){const _0x118c3e=_0x9c6fcf;if(!this[_0x118c3e(0x7f4)])return;this[_0x118c3e(0x288)]=this['_battler']['battlerShadowScaleX'](),this[_0x118c3e(0x75a)]=this[_0x118c3e(0x7f4)]['battlerShadowScaleY']();},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8ff)]=function(){const _0x414714=_0x9c6fcf,_0x3368b7=this[_0x414714(0x552)]()?this['actor']():this[_0x414714(0x2c9)]();if(_0x3368b7){const _0x339d68=_0x3368b7[_0x414714(0x468)];if(_0x339d68['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x339d68[_0x414714(0x3c6)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9e3)]=function(){const _0x3b6191=_0x9c6fcf,_0x228a80=this[_0x3b6191(0x552)]()?this[_0x3b6191(0x23a)]():this['enemy']();if(_0x228a80){const _0x10dab1=_0x228a80['note'];if(_0x10dab1[_0x3b6191(0x3c6)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x10dab1['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa2b)]=function(){const _0x4a86b3=_0x9c6fcf;if(this['constructor']===Sprite_SvEnemy)return;this[_0x4a86b3(0xaea)](),this['finalizeScale']();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x263)]=function(){const _0x38b6fe=_0x9c6fcf,_0x48eb30=this['_distortionSprite'];_0x48eb30&&(_0x48eb30[_0x38b6fe(0x4bc)]['x']=this[_0x38b6fe(0x968)](),_0x48eb30['scale']['y']=this[_0x38b6fe(0xb2d)]());},Sprite_Battler['prototype'][_0x9c6fcf(0x968)]=function(){const _0xf34cf6=_0x9c6fcf;let _0x281e29=0x1;return _0x281e29*=this[_0xf34cf6(0xa85)],_0x281e29*=this['_growX'],_0x281e29;},Sprite_Battler[_0x9c6fcf(0x1ef)]['mainSpriteScaleY']=function(){const _0x3d32a6=_0x9c6fcf;return 0x1*this[_0x3d32a6(0x472)];},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x899)]=function(){const _0x4c8c73=_0x9c6fcf;return this[_0x4c8c73(0xac8)]*this[_0x4c8c73(0x968)]();},Sprite_Battler[_0x9c6fcf(0x1ef)]['mainSpriteHeight']=function(){const _0x5702b5=_0x9c6fcf;return this[_0x5702b5(0x202)]*this[_0x5702b5(0xb2d)]();},Sprite_Battler['prototype'][_0x9c6fcf(0x213)]=function(_0x630f5c,_0x5d2b48,_0x46dea6,_0x577e81){const _0x375ac5=_0x9c6fcf;if(!this[_0x375ac5(0x933)]())return;if(!this['_distortionSprite'])return;if(this[_0x375ac5(0x433)]===_0x630f5c&&this['_targetGrowY']===_0x5d2b48)return;this['_targetGrowX']=_0x630f5c,this[_0x375ac5(0x193)]=_0x5d2b48,this[_0x375ac5(0xac5)]=_0x46dea6,this['_growWholeDuration']=_0x46dea6,this[_0x375ac5(0xaff)]=_0x577e81||_0x375ac5(0x5c4),_0x46dea6<=0x0&&(this[_0x375ac5(0x50e)]=this[_0x375ac5(0x433)],this[_0x375ac5(0x472)]=this[_0x375ac5(0x193)]);},Sprite_Battler[_0x9c6fcf(0x1ef)]['updateGrow']=function(){const _0xa643e3=_0x9c6fcf;if(this[_0xa643e3(0xac5)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x1b865b=this[_0xa643e3(0xac5)],_0xc907d5=this['_growWholeDuration'],_0x1f30f7=this['_growEasing'];Imported[_0xa643e3(0xb00)]?(this[_0xa643e3(0x50e)]=this[_0xa643e3(0x377)](this[_0xa643e3(0x50e)],this['_targetGrowX'],_0x1b865b,_0xc907d5,_0x1f30f7),this[_0xa643e3(0x472)]=this[_0xa643e3(0x377)](this[_0xa643e3(0x472)],this[_0xa643e3(0x193)],_0x1b865b,_0xc907d5,_0x1f30f7)):(this['_growX']=(this[_0xa643e3(0x50e)]*(_0x1b865b-0x1)+this[_0xa643e3(0x433)])/_0x1b865b,this['_growY']=(this[_0xa643e3(0x472)]*(_0x1b865b-0x1)+this[_0xa643e3(0x193)])/_0x1b865b);this[_0xa643e3(0xac5)]--;if(this[_0xa643e3(0xac5)]<=0x0)this[_0xa643e3(0x6b1)]();},Sprite_Battler[_0x9c6fcf(0x1ef)]['onGrowEnd']=function(){const _0x27c2aa=_0x9c6fcf;this['_growX']=this[_0x27c2aa(0x433)],this['_growY']=this['_targetGrowY'];},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x15e)]=function(){const _0xe0a569=_0x9c6fcf;return this[_0xe0a569(0xac5)]>0x0;},Sprite_Battler['prototype'][_0x9c6fcf(0xa83)]=function(_0x56278b,_0x414e27,_0x19a7de,_0x138971){const _0x5b5e3a=_0x9c6fcf;if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this[_0x5b5e3a(0x626)]===_0x56278b&&this[_0x5b5e3a(0xa88)]===_0x414e27)return;this['_targetSkewX']=_0x56278b,this[_0x5b5e3a(0xa88)]=_0x414e27,this[_0x5b5e3a(0xa6e)]=_0x19a7de,this[_0x5b5e3a(0x8c8)]=_0x19a7de,this['_skewEasing']=_0x138971||_0x5b5e3a(0x5c4),_0x19a7de<=0x0&&(this[_0x5b5e3a(0x7ee)][_0x5b5e3a(0x44d)]['x']=this[_0x5b5e3a(0x626)],this[_0x5b5e3a(0x7ee)][_0x5b5e3a(0x44d)]['y']=this[_0x5b5e3a(0xa88)]);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6a1)]=function(){const _0x183b57=_0x9c6fcf;if(this['_skewDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x2547e9=this['_skewDuration'],_0x565b02=this[_0x183b57(0x8c8)],_0xe68898=this[_0x183b57(0xaed)],_0xfd24c=this['_distortionSprite'];Imported[_0x183b57(0xb00)]?(_0xfd24c[_0x183b57(0x44d)]['x']=this['applyEasing'](_0xfd24c[_0x183b57(0x44d)]['x'],this[_0x183b57(0x626)],_0x2547e9,_0x565b02,_0xe68898),_0xfd24c[_0x183b57(0x44d)]['y']=this[_0x183b57(0x377)](_0xfd24c[_0x183b57(0x44d)]['y'],this[_0x183b57(0xa88)],_0x2547e9,_0x565b02,_0xe68898)):(_0xfd24c[_0x183b57(0x44d)]['x']=(_0xfd24c[_0x183b57(0x44d)]['x']*(_0x2547e9-0x1)+this[_0x183b57(0x626)])/_0x2547e9,_0xfd24c[_0x183b57(0x44d)]['y']=(_0xfd24c['skew']['y']*(_0x2547e9-0x1)+this[_0x183b57(0xa88)])/_0x2547e9);this[_0x183b57(0xa6e)]--;if(this[_0x183b57(0xa6e)]<=0x0)this['onSkewEnd']();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x737)]=function(){const _0x357200=_0x9c6fcf;this['_distortionSprite'][_0x357200(0x44d)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x357200(0x44d)]['y']=this[_0x357200(0xa88)];},Sprite_Battler['prototype'][_0x9c6fcf(0x816)]=function(){return this['_skewDuration']>0x0;},Sprite_Battler['prototype']['startSpin']=function(_0x27a4dc,_0x26a667,_0x49c824,_0x2f2358){const _0x410646=_0x9c6fcf;if(!this[_0x410646(0x933)]())return;if(!this['_distortionSprite'])return;if(this[_0x410646(0x18a)]===_0x27a4dc)return;this['_targetAngle']=_0x27a4dc,this['_angleDuration']=_0x26a667,this[_0x410646(0x4e0)]=_0x26a667,this[_0x410646(0x5a6)]=_0x49c824||_0x410646(0x5c4),this[_0x410646(0xaf1)]=_0x2f2358,this[_0x410646(0xaf1)]===undefined&&(this[_0x410646(0xaf1)]=!![]),_0x26a667<=0x0&&(this[_0x410646(0x8d9)]=_0x27a4dc,this[_0x410646(0xaf1)]&&(this[_0x410646(0x18a)]=0x0,this[_0x410646(0x8d9)]=0x0));},Sprite_Battler['prototype'][_0x9c6fcf(0x949)]=function(){const _0x5dd9ba=_0x9c6fcf;this[_0x5dd9ba(0x81b)](),this[_0x5dd9ba(0x369)]();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x81b)]=function(){const _0xa95d1c=_0x9c6fcf;if(this[_0xa95d1c(0x5af)]<=0x0)return;const _0x4ef93b=this[_0xa95d1c(0x5af)],_0x39ea50=this['_angleWholeDuration'],_0x569227=this[_0xa95d1c(0x5a6)];Imported['VisuMZ_0_CoreEngine']?this[_0xa95d1c(0x8d9)]=this[_0xa95d1c(0x377)](this[_0xa95d1c(0x8d9)],this[_0xa95d1c(0x18a)],_0x4ef93b,_0x39ea50,_0x569227):this[_0xa95d1c(0x8d9)]=(this[_0xa95d1c(0x8d9)]*(_0x4ef93b-0x1)+this['_targetAngle'])/_0x4ef93b;this[_0xa95d1c(0x5af)]--;if(this[_0xa95d1c(0x5af)]<=0x0)this[_0xa95d1c(0x74e)]();},Sprite_Battler['prototype']['onAngleEnd']=function(){const _0x19e3d3=_0x9c6fcf;this['_currentAngle']=this[_0x19e3d3(0x18a)],this[_0x19e3d3(0xaf1)]&&(this[_0x19e3d3(0x18a)]=0x0,this[_0x19e3d3(0x8d9)]=0x0);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x967)]=function(){const _0x4b4267=_0x9c6fcf;return this[_0x4b4267(0x5af)]>0x0;},Sprite_Battler[_0x9c6fcf(0x1ef)]['applyAngleChange']=function(){const _0x47dd33=_0x9c6fcf;if(!this['_distortionSprite'])return;const _0x3b92c0=this['_currentAngle'],_0x1ebe70=this[_0x47dd33(0x4bc)]['x'],_0x23d0de=this['_battler']['isActor']()?-0x1:0x1;this[_0x47dd33(0x7ee)]['angle']=_0x3b92c0*_0x1ebe70*_0x23d0de;const _0x29b200=this[_0x47dd33(0x7ee)][_0x47dd33(0x4bc)]['y'];this['_distortionSprite']['y']=this[_0x47dd33(0x202)]*-0.5*(0x2-_0x29b200),this[_0x47dd33(0x7ee)]['y']=Math[_0x47dd33(0x571)](this[_0x47dd33(0x7ee)]['y']);const _0x1d1cad=[this['_mainSprite'],this[_0x47dd33(0x651)],this['_dragonbonesSpriteContainer']];for(const _0x10a243 of _0x1d1cad){if(!_0x10a243)continue;_0x10a243['y']=this[_0x47dd33(0x202)]*0.5;}this[_0x47dd33(0x8a1)]&&(this[_0x47dd33(0x288)]=this[_0x47dd33(0x288)]??0x1,this['_shadowScaleY']=this[_0x47dd33(0x75a)]??0x1,this[_0x47dd33(0x8a1)][_0x47dd33(0x4bc)]['x']=this[_0x47dd33(0x7ee)][_0x47dd33(0x4bc)]['x']*this[_0x47dd33(0x288)],this[_0x47dd33(0x8a1)]['scale']['y']=this[_0x47dd33(0x7ee)][_0x47dd33(0x4bc)]['y']*this[_0x47dd33(0x75a)]);},VisuMZ['BattleCore'][_0x9c6fcf(0x610)]=Sprite_Actor['prototype'][_0x9c6fcf(0x941)],Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x941)]=function(){const _0x1ad9ac=_0x9c6fcf;VisuMZ[_0x1ad9ac(0x8f5)]['Sprite_Actor_createStateSprite'][_0x1ad9ac(0x7df)](this),VisuMZ[_0x1ad9ac(0x8f5)][_0x1ad9ac(0x19c)][_0x1ad9ac(0x1a7)]['ShowActorGauge']&&this['createHpGaugeSprite']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x5f3)]=Sprite_Enemy['prototype'][_0x9c6fcf(0xace)],Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xace)]=function(){const _0x3a8177=_0x9c6fcf;VisuMZ[_0x3a8177(0x8f5)][_0x3a8177(0x19c)][_0x3a8177(0x1a7)][_0x3a8177(0x454)]&&this[_0x3a8177(0x66c)](),VisuMZ[_0x3a8177(0x8f5)][_0x3a8177(0x5f3)]['call'](this);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x66c)]=function(){const _0x1a3703=_0x9c6fcf;if(!ConfigManager[_0x1a3703(0x6e8)])return;if(this[_0x1a3703(0x788)]===Sprite_SvEnemy)return;const _0xd0790b=VisuMZ['BattleCore'][_0x1a3703(0x19c)][_0x1a3703(0x1a7)],_0x36bbc4=new Sprite_HpGauge();_0x36bbc4[_0x1a3703(0x62b)]['x']=_0xd0790b['AnchorX'],_0x36bbc4[_0x1a3703(0x62b)]['y']=_0xd0790b[_0x1a3703(0xb56)],_0x36bbc4[_0x1a3703(0x4bc)]['x']=_0x36bbc4[_0x1a3703(0x4bc)]['y']=_0xd0790b[_0x1a3703(0x1c1)],this['_hpGaugeSprite']=_0x36bbc4,this[_0x1a3703(0x210)](this[_0x1a3703(0x615)]),Spriteset_Battle[_0x1a3703(0x7d7)]&&BattleManager[_0x1a3703(0x9c9)](this[_0x1a3703(0x615)]);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x470)]=Sprite_Battler['prototype'][_0x9c6fcf(0x7dc)],Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7dc)]=function(_0x2285f6){const _0x187f79=_0x9c6fcf,_0x12094e=this[_0x187f79(0x7f4)];VisuMZ['BattleCore']['Sprite_Battler_setBattler']['call'](this,_0x2285f6),this[_0x187f79(0x5ee)](_0x2285f6);if(_0x12094e!==_0x2285f6)this[_0x187f79(0x711)]();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ee)]=function(_0x38ce8f){const _0x191428=_0x9c6fcf;if(!_0x38ce8f)return;if(!this[_0x191428(0x615)])return;if(_0x38ce8f[_0x191428(0x552)]()){}else{if(_0x38ce8f[_0x191428(0x3fd)]()){if(this[_0x191428(0x788)]===Sprite_SvEnemy&&!_0x38ce8f[_0x191428(0xb41)]())return;}}this[_0x191428(0x615)][_0x191428(0xa66)](_0x38ce8f,'hp');},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x394)]=function(){const _0x43744e=_0x9c6fcf;return this['_battler']&&this[_0x43744e(0x7f4)][_0x43744e(0x394)]();},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x409)]=function(){const _0x1dde8a=_0x9c6fcf,_0x55397b=this[_0x1dde8a(0x692)][_0x1dde8a(0x96b)];if(!_0x55397b)return;const _0x39c60e=_0x55397b['width'];let _0x37c9e6=_0x55397b[_0x1dde8a(0x202)];if(this[_0x1dde8a(0x7f4)][_0x1dde8a(0xb27)]()){if(this['_frame'])_0x37c9e6=Math['max'](0x0,this[_0x1dde8a(0x864)][_0x1dde8a(0x202)]-0x4);}this['_mainSprite'][_0x1dde8a(0x5fa)](0x0,0x0,_0x39c60e,_0x37c9e6),this[_0x1dde8a(0x5fa)](0x0,0x0,_0x39c60e,_0x37c9e6);},Sprite_Battler['prototype']['updateHpGaugePosition']=function(){const _0x1659af=_0x9c6fcf;if(!this[_0x1659af(0x7f4)])return;if(!this[_0x1659af(0x615)])return;const _0x2c4763=VisuMZ[_0x1659af(0x8f5)][_0x1659af(0x19c)][_0x1659af(0x1a7)],_0x14984d=this[_0x1659af(0x615)];_0x14984d[_0x1659af(0x9cb)]=this[_0x1659af(0x9ee)]();const _0x525993=_0x2c4763['OffsetX'],_0x425b2d=_0x2c4763['OffsetY'];_0x14984d['x']=_0x525993,_0x14984d['x']+=this[_0x1659af(0x7f4)][_0x1659af(0x9b9)](),_0x14984d['y']=-this[_0x1659af(0x202)]+_0x425b2d,_0x14984d['y']+=this['_battler'][_0x1659af(0x512)](),Spriteset_Battle[_0x1659af(0x7d7)]&&SceneManager[_0x1659af(0x90f)][_0x1659af(0x21f)]&&(_0x14984d['x']+=this['x'],_0x14984d['y']+=this['y']);},Sprite_Battler[_0x9c6fcf(0x1ef)]['isVisualHpGaugeDisplayed']=function(){const _0x53bb3e=_0x9c6fcf;if(!this[_0x53bb3e(0x7f4)])return![];if(this['_battler']['isActor']())return!![];if(this['_battler'][_0x53bb3e(0xb10)]())return![];if(this[_0x53bb3e(0x888)]<=0x0)return![];const _0x4757f7=this['_battler'][_0x53bb3e(0x2c9)]()['note'];if(_0x4757f7[_0x53bb3e(0x3c6)](/<SHOW HP GAUGE>/i))return!![];if(_0x4757f7[_0x53bb3e(0x3c6)](/<HIDE HP GAUGE>/i))return![];const _0x272534=VisuMZ[_0x53bb3e(0x8f5)][_0x53bb3e(0x19c)]['HpGauge'];if(_0x272534[_0x53bb3e(0xb53)]){if(_0x272534[_0x53bb3e(0x2fe)]&&BattleManager[_0x53bb3e(0x299)]())return!![];if(this['_battler'][_0x53bb3e(0x27f)])return![];return this[_0x53bb3e(0x7f4)][_0x53bb3e(0x680)]();}return!![];},VisuMZ['BattleCore'][_0x9c6fcf(0xa69)]=Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6ad)],Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6ad)]=function(){const _0x2a72fa=_0x9c6fcf;if(!this[_0x2a72fa(0x7f4)])return![];if(this[_0x2a72fa(0x6d9)]>0x0)return!![];return VisuMZ[_0x2a72fa(0x8f5)][_0x2a72fa(0xa69)][_0x2a72fa(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x59b)]=Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x660)],Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x660)]=function(_0x5c5d08,_0x433432,_0x1e292e){const _0xf15bfd=_0x9c6fcf;this[_0xf15bfd(0x933)]()&&VisuMZ[_0xf15bfd(0x8f5)][_0xf15bfd(0x59b)][_0xf15bfd(0x7df)](this,_0x5c5d08,_0x433432,_0x1e292e);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x933)]=function(){const _0x3b6a4f=_0x9c6fcf;if(this['_battler']&&this[_0x3b6a4f(0x7f4)][_0x3b6a4f(0xb27)]())return![];if(this[_0x3b6a4f(0x7f4)]&&!this[_0x3b6a4f(0x7f4)][_0x3b6a4f(0x466)]())return![];return $gameSystem[_0x3b6a4f(0x95c)]();},Sprite_Battler['prototype'][_0x9c6fcf(0x635)]=function(){},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x20b)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x9c6fcf(0x1ef)]['retreat']=function(){},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb31)]=function(){const _0x3f383f=_0x9c6fcf,_0xa2370c=VisuMZ[_0x3f383f(0x8f5)]['Settings'][_0x3f383f(0x6e6)],_0x290e5c=this['_battler']&&this[_0x3f383f(0x7f4)][_0x3f383f(0x552)]()?0x1:-0x1,_0x54d701=this[_0x3f383f(0x761)]-this['_homeX']+_0x290e5c*_0xa2370c[_0x3f383f(0x8d5)],_0x56fb69=this[_0x3f383f(0x46a)]-this[_0x3f383f(0x17a)]+_0x290e5c*_0xa2370c[_0x3f383f(0x789)],_0x182aeb=_0xa2370c[_0x3f383f(0x891)];this[_0x3f383f(0x660)](_0x54d701,_0x56fb69,_0x182aeb);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6cc)]=function(_0x18feea,_0x5a1ca1){const _0x11dcc2=_0x9c6fcf,_0x3a0fec=VisuMZ['BattleCore'][_0x11dcc2(0x19c)][_0x11dcc2(0x6e6)];this[_0x11dcc2(0x650)]=Math['ceil']((_0x3a0fec[_0x11dcc2(0x354)]??0x18)*_0x5a1ca1),this[_0x11dcc2(0x798)]=Math[_0x11dcc2(0x716)](this[_0x11dcc2(0x798)],_0x18feea);},Sprite_Battler[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1bf)]=function(){const _0x3b1ec0=_0x9c6fcf,_0x2f636b=VisuMZ[_0x3b1ec0(0x8f5)][_0x3b1ec0(0x19c)][_0x3b1ec0(0x6e6)];if(!(_0x2f636b[_0x3b1ec0(0x410)]??![]))return;if(this['_shakeFlinchDuration']>0x0){const _0x3847de=this[_0x3b1ec0(0x650)];this[_0x3b1ec0(0x798)]=this[_0x3b1ec0(0x798)]*(_0x3847de-0x1)/_0x3847de,this['_shakeFlinchDuration']--,this['_shakeFlinchDuration']<=0x0&&(this['_shakeFlinchPower']=0x0);}this['_shakeFlinchPower']>0x0?(this['_mainSprite']['x']=Math['randomInt'](this['_shakeFlinchPower'])*(Math['random']()<0.5?-0x1:0x1),this[_0x3b1ec0(0x46a)]!==this['y']&&(this[_0x3b1ec0(0x692)]['y']=this[_0x3b1ec0(0x202)]*0.5,this[_0x3b1ec0(0x692)]['y']+=Math[_0x3b1ec0(0x316)](this[_0x3b1ec0(0x798)])*(Math['random']()<0.5?-0x1:0x1))):(this[_0x3b1ec0(0x692)]['x']=0x0,this['_mainSprite']['y']=this[_0x3b1ec0(0x202)]*0.5);},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Actor_initMembers']=Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x875)],Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x875)]=function(){const _0x1168f4=_0x9c6fcf;VisuMZ[_0x1168f4(0x8f5)][_0x1168f4(0xacf)]['call'](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x9c6fcf(0x1ef)]['mainSprite']=function(){const _0x434cb5=_0x9c6fcf;return this[_0x434cb5(0x7ee)]||this[_0x434cb5(0x692)]||this;},VisuMZ['BattleCore'][_0x9c6fcf(0x1ae)]=Sprite_Actor[_0x9c6fcf(0x1ef)]['moveToStartPosition'],Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3ff)]=function(){},Sprite_Actor['prototype']['moveToStartPositionBattleCore']=function(_0x1a2e59){const _0x5a9092=_0x9c6fcf;if(SceneManager[_0x5a9092(0x678)]())return;if(!_0x1a2e59)return;if(!_0x1a2e59[_0x5a9092(0x933)]())return;VisuMZ[_0x5a9092(0x8f5)]['Sprite_Actor_moveToStartPosition'][_0x5a9092(0x7df)](this);},VisuMZ['BattleCore']['Sprite_Actor_setActorHome']=Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x96c)],Sprite_Actor[_0x9c6fcf(0x1ef)]['setActorHome']=function(_0x2d2330){const _0x3d9913=_0x9c6fcf;VisuMZ[_0x3d9913(0x8f5)][_0x3d9913(0x19c)][_0x3d9913(0x6e6)][_0x3d9913(0x648)]?VisuMZ[_0x3d9913(0x8f5)][_0x3d9913(0x19c)][_0x3d9913(0x6e6)]['HomePosJS']['call'](this,_0x2d2330):VisuMZ[_0x3d9913(0x8f5)][_0x3d9913(0x233)][_0x3d9913(0x7df)](this,_0x2d2330);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x8d0)]=Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7dc)],Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7dc)]=function(_0x41c30e){const _0x4ec6be=_0x9c6fcf;VisuMZ[_0x4ec6be(0x8f5)][_0x4ec6be(0x8d0)][_0x4ec6be(0x7df)](this,_0x41c30e),this[_0x4ec6be(0xaf2)](_0x41c30e);},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaf2)]=function(_0x2dedc1){const _0x452a85=_0x9c6fcf;if(!_0x2dedc1)return;if(!this[_0x452a85(0x692)])return;this[_0x452a85(0x692)]['anchor']['x']=this[_0x452a85(0x4fd)][_0x452a85(0x975)](),this['_mainSprite'][_0x452a85(0x62b)]['y']=this[_0x452a85(0x4fd)]['svBattlerAnchorY'](),this[_0x452a85(0x1eb)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x7a5)]=Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)],Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)]=function(){const _0x1a05b3=_0x9c6fcf;VisuMZ[_0x1a05b3(0x8f5)]['Sprite_Actor_update']['call'](this),this[_0x1a05b3(0x4fd)]&&(this[_0x1a05b3(0x664)](),this[_0x1a05b3(0xa0d)]());},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x9c6fcf(0x1ef)]['updateBitmap'],Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x243)]=function(){const _0x1b296d=_0x9c6fcf;VisuMZ['BattleCore'][_0x1b296d(0x58a)]['call'](this),this[_0x1b296d(0x692)]&&this[_0x1b296d(0x692)][_0x1b296d(0x96b)]&&this['_battler']&&(this[_0x1b296d(0x692)][_0x1b296d(0x96b)][_0x1b296d(0x682)]!==this[_0x1b296d(0x7f4)][_0x1b296d(0x757)]()&&(this['_mainSprite'][_0x1b296d(0x96b)][_0x1b296d(0x682)]=this['_battler'][_0x1b296d(0x757)]()));},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6b4)],Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6b4)]=function(){const _0x43ed1e=_0x9c6fcf;VisuMZ[_0x43ed1e(0x8f5)]['Sprite_Actor_updateShadow'][_0x43ed1e(0x7df)](this),this[_0x43ed1e(0x841)]();},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x841)]=function(){const _0x584dd8=_0x9c6fcf;if(!this[_0x584dd8(0x692)])return;if(!this[_0x584dd8(0x8a1)])return;this[_0x584dd8(0x1eb)](),this[_0x584dd8(0x86a)]();},Sprite_Actor[_0x9c6fcf(0x1ef)]['updateStateSprite']=function(){const _0x3d2738=_0x9c6fcf;{this['_stateSprite'][_0x3d2738(0x4bc)]['x']=0x1/(this[_0x3d2738(0x4bc)]['x']||0.001),this['_stateSprite'][_0x3d2738(0x4bc)]['y']=0x1/(this[_0x3d2738(0x4bc)]['y']||0.001);}{this[_0x3d2738(0xb05)]['x']=0x0,this[_0x3d2738(0xb05)]['y']=-this[_0x3d2738(0x202)]-0x20+0x60;const _0x3c78f2=VisuMZ['BattleCore']['Settings'][_0x3d2738(0x6e6)];this[_0x3d2738(0xb05)]['x']+=_0x3c78f2['StateOverlayOffsetX']??0x0,this['_stateSprite']['y']+=_0x3c78f2[_0x3d2738(0x6a9)]??0x0;}},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa0d)]=function(){const _0x25c495=_0x9c6fcf;if(!$gameSystem[_0x25c495(0x95c)]()&&this[_0x25c495(0x788)]===Sprite_Actor){const _0x2d246a=Scene_Battle[_0x25c495(0x1ef)]['battleLayoutStyle']();[_0x25c495(0x295),_0x25c495(0x61b),_0x25c495(0x7c0),'border'][_0x25c495(0x765)](_0x2d246a)&&(this[_0x25c495(0x888)]=0x0);}},Sprite_Actor['prototype'][_0x9c6fcf(0x24f)]=function(){const _0x113c15=_0x9c6fcf,_0xc4566a=this[_0x113c15(0x4fd)];if(_0xc4566a){if(_0xc4566a[_0x113c15(0x9d6)])return;const _0x1139fc=_0xc4566a['stateMotionIndex']();if(_0xc4566a[_0x113c15(0x227)]()||_0xc4566a[_0x113c15(0xae5)]())this[_0x113c15(0x84e)](_0x113c15(0x8bf));else{if(_0x1139fc===0x3)this[_0x113c15(0x84e)](_0x113c15(0x79d));else{if(_0x1139fc===0x2)this[_0x113c15(0x84e)](_0x113c15(0x340));else{if(this[_0x113c15(0x269)])this[_0x113c15(0x84e)](_0x113c15(0x965));else{if(_0xc4566a['isCharging']())this[_0x113c15(0x84e)]('wait');else{if(_0xc4566a[_0x113c15(0x987)]())this[_0x113c15(0x84e)]('chant');else{if(_0xc4566a[_0x113c15(0x53a)]()||_0xc4566a[_0x113c15(0x36b)]())this[_0x113c15(0x84e)](_0x113c15(0xa23));else{if(_0x1139fc===0x1)this[_0x113c15(0x84e)]('abnormal');else{if(_0xc4566a[_0x113c15(0x9bd)]())this['startMotion'](_0x113c15(0x22a));else{if(_0xc4566a['isUndecided']())this[_0x113c15(0x84e)](_0x113c15(0x8bf));else _0xc4566a['currentAction']()?this[_0x113c15(0x84e)](_0x113c15(0x396)):this[_0x113c15(0x84e)](_0x113c15(0x8bf));}}}}}}}}}}},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3f5)]=function(){const _0x44d1f5=_0x9c6fcf,_0x34347b=0xa,_0x3e10a8=0x12c*_0x34347b,_0x408813=0x1e*_0x34347b;this[_0x44d1f5(0x660)](_0x3e10a8,0x0,_0x408813);},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2ec)]=function(){const _0x5d67a8=_0x9c6fcf;Sprite_Battler['prototype'][_0x5d67a8(0x2ec)][_0x5d67a8(0x7df)](this);},Sprite_Actor['prototype'][_0x9c6fcf(0xaf3)]=function(){const _0x285046=_0x9c6fcf;return Sprite_Battler[_0x285046(0x5be)];},Sprite_Weapon['prototype'][_0x9c6fcf(0xac1)]=function(){const _0x5a051d=_0x9c6fcf;return Sprite_Battler[_0x5a051d(0x5be)];},Sprite_Actor['prototype'][_0x9c6fcf(0x56b)]=function(){},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3c9)]=function(){},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xae7)]=function(){const _0x558c65=_0x9c6fcf;if(this['_motion']&&++this[_0x558c65(0x790)]>=this['motionSpeed']()){if(this['_motion'][_0x558c65(0xaf7)])this['_pattern']=(this[_0x558c65(0x729)]+0x1)%0x4;else{if(this[_0x558c65(0x729)]<0x2)this[_0x558c65(0x729)]++;else{const _0x5f1232=this['_actor'];if(_0x5f1232)_0x5f1232['_performDamageMotion']=undefined;this[_0x558c65(0x24f)]();}}this[_0x558c65(0x790)]=0x0;}},Sprite_Actor['prototype'][_0x9c6fcf(0x355)]=function(_0xbcd86e){const _0x70aae0=_0x9c6fcf;if(this['_battler']&&this[_0x70aae0(0x7f4)][_0x70aae0(0xb27)]()){this['_motion']=Sprite_Actor[_0x70aae0(0x89a)]['dead'];return;}const _0x24ba44=Sprite_Actor[_0x70aae0(0x89a)][_0xbcd86e];this['_motion']=_0x24ba44,this[_0x70aae0(0x790)]=0x0,this[_0x70aae0(0x729)]=0x0;},Sprite_Actor['prototype'][_0x9c6fcf(0x7b9)]=function(_0x527dde){const _0x3449fc=_0x9c6fcf;if(this[_0x3449fc(0x394)]())return;this[_0x3449fc(0x98b)](),this[_0x3449fc(0xa99)][_0x3449fc(0xa66)](_0x527dde),this[_0x3449fc(0x4fd)][_0x3449fc(0x536)]();},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x98b)]=function(){const _0x1365b6=_0x9c6fcf;let _0x5ba4a1=-0x10,_0x5d9c36=this[_0x1365b6(0x202)]*0.5;const _0x19cca9=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x396219=this['_battler'][_0x1365b6(0x38b)]()[_0x1365b6(0x1f9)](_0x1baeb2=>_0x1baeb2&&_0x1baeb2['note']['match'](_0x19cca9)?Number(RegExp['$1']):0x0),_0xfdebd8=this[_0x1365b6(0x7f4)][_0x1365b6(0x38b)]()[_0x1365b6(0x1f9)](_0x37897b=>_0x37897b&&_0x37897b[_0x1365b6(0x468)]['match'](_0x19cca9)?Number(RegExp['$2']):0x0);_0x5ba4a1=_0x396219['reduce']((_0x245e2c,_0x5731d4)=>_0x245e2c+_0x5731d4,_0x5ba4a1),_0x5d9c36=_0xfdebd8[_0x1365b6(0x128)]((_0x4d9c9b,_0xd0a02a)=>_0x4d9c9b+_0xd0a02a,_0x5d9c36),this[_0x1365b6(0xa99)]['x']=_0x5ba4a1,this['_weaponSprite']['y']=_0x5d9c36,this[_0x1365b6(0xa99)][_0x1365b6(0x255)]();},Sprite_Weapon[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa66)]=function(_0x387c82){const _0x9c769a=_0x9c6fcf;this[_0x9c769a(0x9cd)]=_0x387c82,this[_0x9c769a(0x8fb)]=-0x1,this[_0x9c769a(0x729)]=0x0,this[_0x9c769a(0xa32)](),this[_0x9c769a(0x5ef)]();},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb38)]=function(){},Sprite_Actor['prototype']['stepForward']=function(){const _0x1f98af=_0x9c6fcf,_0x4dc8bf=VisuMZ[_0x1f98af(0x8f5)]['Settings'][_0x1f98af(0x7fe)],_0x53a6bb=_0x4dc8bf[_0x1f98af(0x5b6)],_0x21cbc8=_0x4dc8bf[_0x1f98af(0x7b0)],_0x47d645=_0x4dc8bf['StepDuration'];this['startMove'](-_0x53a6bb,-_0x21cbc8,_0x47d645);},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Actor_updateFrame']=Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ef)],Sprite_Actor[_0x9c6fcf(0x1ef)]['updateFrame']=function(){const _0x2a20ce=_0x9c6fcf;this[_0x2a20ce(0x394)]()?this[_0x2a20ce(0x409)]():(this[_0x2a20ce(0x881)](),VisuMZ[_0x2a20ce(0x8f5)][_0x2a20ce(0x529)][_0x2a20ce(0x7df)](this));},Sprite_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x881)]=function(){const _0x5d81b6=_0x9c6fcf;if(this[_0x5d81b6(0x7f4)]&&this[_0x5d81b6(0x7f4)][_0x5d81b6(0x98e)]){const _0x4e2e4e=this['_battler']['_freezeMotionData'];this[_0x5d81b6(0x3e2)]=Sprite_Actor['MOTIONS'][_0x4e2e4e[_0x5d81b6(0x3ee)]],this[_0x5d81b6(0x729)]=_0x4e2e4e[_0x5d81b6(0x70c)];const _0x52625f=this[_0x5d81b6(0xa99)];_0x52625f[_0x5d81b6(0x188)](_0x4e2e4e['weaponImageId'],_0x4e2e4e[_0x5d81b6(0x70c)]),this[_0x5d81b6(0x98b)]();}},Sprite_Weapon[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x188)]=function(_0x192bcd,_0xe2cacb){const _0x321477=_0x9c6fcf;this[_0x321477(0x9cd)]=_0x192bcd,this[_0x321477(0x8fb)]=-Infinity,this['_pattern']=_0xe2cacb,this[_0x321477(0xa32)](),this[_0x321477(0x5ef)]();},Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x875)]=function(){const _0x173460=_0x9c6fcf;Sprite_Battler['prototype'][_0x173460(0x875)][_0x173460(0x7df)](this),this[_0x173460(0x6c2)]=null,this[_0x173460(0x27b)]=![],this['_battlerName']='',this[_0x173460(0xa21)]=0x0,this[_0x173460(0x877)]=null,this[_0x173460(0x686)]=0x0,this['_shake']=0x0,this[_0x173460(0x9b6)](),this[_0x173460(0xace)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Enemy_update']=Sprite_Enemy[_0x9c6fcf(0x1ef)]['update'],Sprite_Enemy['prototype'][_0x9c6fcf(0x255)]=function(){const _0x5eb03b=_0x9c6fcf;VisuMZ[_0x5eb03b(0x8f5)][_0x5eb03b(0x4d5)][_0x5eb03b(0x7df)](this),this['updateShadowVisibility'](),this[_0x5eb03b(0x7b7)]();},Sprite_Enemy[_0x9c6fcf(0x1ef)]['createMainSprite']=function(){const _0x2df0bd=_0x9c6fcf;this[_0x2df0bd(0x692)]=new Sprite(),this['_mainSprite'][_0x2df0bd(0x62b)]['x']=0.5,this[_0x2df0bd(0x692)][_0x2df0bd(0x62b)]['y']=0x1,this[_0x2df0bd(0x210)](this['_mainSprite']),this[_0x2df0bd(0x4c1)]();},Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2db)]=function(){const _0x4642f9=_0x9c6fcf;return this[_0x4642f9(0x7ee)]||this[_0x4642f9(0x692)]||this;},Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa32)]=function(_0x13e634){const _0xa6ab2d=_0x9c6fcf;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0xa6ab2d(0xb41)]()){const _0x174673=this['_enemy'][_0xa6ab2d(0x2c1)]();this[_0xa6ab2d(0x96b)]=new Bitmap(_0x174673[_0xa6ab2d(0xac8)],_0x174673['height']),this[_0xa6ab2d(0x692)][_0xa6ab2d(0x96b)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0xa6ab2d(0x95c)]()){const _0x38cac7=ImageManager[_0xa6ab2d(0x85a)](_0x13e634);_0x38cac7[_0xa6ab2d(0x2f2)](this[_0xa6ab2d(0x49d)][_0xa6ab2d(0x43b)](this,_0x38cac7));}else{const _0x3d4cdc=ImageManager[_0xa6ab2d(0xa57)](_0x13e634);_0x3d4cdc['addLoadListener'](this[_0xa6ab2d(0x49d)][_0xa6ab2d(0x43b)](this,_0x3d4cdc));}}},Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x49d)]=function(_0x2f108a){const _0x4d1ac1=_0x9c6fcf;this['_mainSprite']['bitmap']=_0x2f108a,this[_0x4d1ac1(0x96b)]=new Bitmap(_0x2f108a[_0x4d1ac1(0xac8)],_0x2f108a[_0x4d1ac1(0x202)]);},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x43e)],Sprite_Enemy['prototype']['setHue']=function(_0x5e293e){const _0x13789c=_0x9c6fcf;this['_mainSprite']&&this[_0x13789c(0x692)][_0x13789c(0x43e)](_0x5e293e);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x13a)]=Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2d2)],Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2d2)]=function(){const _0x4f6c25=_0x9c6fcf;this[_0x4f6c25(0x6b0)]()?VisuMZ[_0x4f6c25(0x8f5)]['Sprite_Enemy_initVisibility'][_0x4f6c25(0x7df)](this):(this['_appeared']=!this['_enemy'][_0x4f6c25(0xb10)](),!this[_0x4f6c25(0x27b)]&&(this[_0x4f6c25(0x888)]=0x0));},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x890)],Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x890)]=function(){const _0x1d6c97=_0x9c6fcf;if(this['allowCollapse']())VisuMZ[_0x1d6c97(0x8f5)][_0x1d6c97(0xad0)][_0x1d6c97(0x7df)](this);},Sprite_Enemy['prototype'][_0x9c6fcf(0x5ef)]=function(){const _0x2648a4=_0x9c6fcf;Sprite_Battler[_0x2648a4(0x1ef)][_0x2648a4(0x5ef)][_0x2648a4(0x7df)](this);const _0x3c7604=this['mainSprite']()||this;if(!_0x3c7604)return;!_0x3c7604[_0x2648a4(0x96b)]&&(_0x3c7604[_0x2648a4(0x96b)]=new Bitmap(this[_0x2648a4(0xac8)]||0x1,this[_0x2648a4(0x202)]||0x1));if(this['_effectType']===_0x2648a4(0x7ad))this[_0x2648a4(0x692)][_0x2648a4(0x5fa)](0x0,0x0,this[_0x2648a4(0x692)][_0x2648a4(0xac8)]||0x1,this[_0x2648a4(0x686)]);else{let _0xe09cd3=0x1;if(_0x3c7604&&_0x3c7604[_0x2648a4(0x96b)])_0xe09cd3=_0x3c7604[_0x2648a4(0x96b)][_0x2648a4(0xac8)];let _0x1a6c88=0x1;if(this[_0x2648a4(0x96b)])_0x1a6c88=this[_0x2648a4(0x96b)][_0x2648a4(0x202)];_0x3c7604[_0x2648a4(0x5fa)](0x0,0x0,_0xe09cd3,_0x1a6c88);}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x246)]=Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa72)],Sprite_Enemy[_0x9c6fcf(0x1ef)]['updateBossCollapse']=function(){const _0x22ac05=_0x9c6fcf;if(this[_0x22ac05(0x6b0)]())VisuMZ['BattleCore'][_0x22ac05(0x246)][_0x22ac05(0x7df)](this);},Sprite_Enemy['prototype'][_0x9c6fcf(0x6ad)]=function(){const _0x59712c=_0x9c6fcf;return Sprite_Battler[_0x59712c(0x1ef)][_0x59712c(0x6ad)][_0x59712c(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x65a)]=Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x664)],Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x664)]=function(){const _0x36d815=_0x9c6fcf;VisuMZ[_0x36d815(0x8f5)][_0x36d815(0x65a)]['call'](this),this[_0x36d815(0x5fc)]();},Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5fc)]=function(){const _0x2c061c=_0x9c6fcf,_0x585ae5=VisuMZ[_0x2c061c(0x8f5)][_0x2c061c(0x19c)][_0x2c061c(0x7b3)];if(_0x585ae5[_0x2c061c(0x4cd)]&&!_0x585ae5[_0x2c061c(0x5bc)]){this[_0x2c061c(0x3bc)][_0x2c061c(0x888)]=0x0;return;}this[_0x2c061c(0x3bc)]['x']=0x0,this[_0x2c061c(0x3bc)]['x']+=this[_0x2c061c(0x7f4)][_0x2c061c(0x9b9)]();let _0x552f13=0x1;if(this['bitmap'])_0x552f13=this['bitmap'][_0x2c061c(0x202)];this[_0x2c061c(0x3bc)]['y']=-_0x552f13-this['_stateIconSprite'][_0x2c061c(0x202)]-0x4,this[_0x2c061c(0x3bc)]['y']+=this[_0x2c061c(0x7f4)]['battleUIOffsetY'](),this[_0x2c061c(0x3bc)]['scale']['x']=0x1/(this[_0x2c061c(0x4bc)]['x']||0.001),this[_0x2c061c(0x3bc)]['scale']['y']=0x1/(this[_0x2c061c(0x4bc)]['y']||0.001),this[_0x2c061c(0xb41)]()&&(this[_0x2c061c(0x651)]['_stateSprite']['scale']['x']=-0x1/(this[_0x2c061c(0x4bc)]['x']||0.001),this['_svBattlerSprite'][_0x2c061c(0xb05)]['scale']['y']=0x1/(this[_0x2c061c(0x4bc)]['y']||0.001));},Sprite_Enemy['prototype'][_0x9c6fcf(0x7b7)]=function(){const _0x41bbf4=_0x9c6fcf;this['_battler']&&this[_0x41bbf4(0x7f4)][_0x41bbf4(0x7b7)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Enemy_setBattler']=Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7dc)],Sprite_Enemy['prototype'][_0x9c6fcf(0x7dc)]=function(_0x5d0092){const _0x3cba65=_0x9c6fcf;VisuMZ[_0x3cba65(0x8f5)][_0x3cba65(0x4a4)]['call'](this,_0x5d0092),this[_0x3cba65(0x9fe)](_0x5d0092);},Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9fe)]=function(_0x591c00){const _0x4b1042=_0x9c6fcf;!this[_0x4b1042(0x651)]&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x591c00),this[_0x4b1042(0x4c1)]()),this[_0x4b1042(0x651)][_0x4b1042(0x7dc)](_0x591c00);},Sprite_Enemy[_0x9c6fcf(0x1ef)]['hasSvBattler']=function(){const _0x1c7aac=_0x9c6fcf;return this[_0x1c7aac(0x6c2)]&&this[_0x1c7aac(0x6c2)][_0x1c7aac(0xb41)]();},Sprite_Enemy['prototype'][_0x9c6fcf(0x6b0)]=function(){const _0x45f811=_0x9c6fcf;return this['hasSvBattler']()?this['_enemy'][_0x45f811(0x6b0)]():!![];},Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x24f)]=function(){const _0x3d6b9f=_0x9c6fcf;this[_0x3d6b9f(0xb41)]()&&this[_0x3d6b9f(0x651)][_0x3d6b9f(0x24f)]();},Sprite_Enemy['prototype'][_0x9c6fcf(0x355)]=function(_0x47ea6c){const _0x2bd749=_0x9c6fcf;if(this[_0x2bd749(0xb41)]())this[_0x2bd749(0x651)]['forceMotion'](_0x47ea6c);},Sprite_Enemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7b9)]=function(_0x52e449){const _0x411bc2=_0x9c6fcf;if(this[_0x411bc2(0xb41)]())this[_0x411bc2(0x651)][_0x411bc2(0x7b9)](_0x52e449);},Sprite_Enemy['prototype']['stepForward']=function(){const _0x6afd42=_0x9c6fcf,_0x4a97b7=VisuMZ[_0x6afd42(0x8f5)][_0x6afd42(0x19c)][_0x6afd42(0x7fe)],_0x1597a0=_0x4a97b7[_0x6afd42(0x5b6)],_0xe99e8b=_0x4a97b7[_0x6afd42(0x7b0)],_0x182c01=_0x4a97b7[_0x6afd42(0x1fb)];this[_0x6afd42(0x660)](_0x1597a0,_0xe99e8b,_0x182c01);};function Sprite_SvEnemy(){const _0xca5b35=_0x9c6fcf;this[_0xca5b35(0x32f)](...arguments);}Sprite_SvEnemy[_0x9c6fcf(0x1ef)]=Object[_0x9c6fcf(0x866)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x788)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x9c6fcf(0x1ef)]['initialize']=function(_0x41b495){const _0x352638=_0x9c6fcf;Sprite_Actor[_0x352638(0x1ef)]['initialize'][_0x352638(0x7df)](this,_0x41b495),this[_0x352638(0x4bc)]['x']=-0x1,this[_0x352638(0xb05)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9e6)]=function(){},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3ff)]=function(){},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x96c)]=function(_0x2c8760){},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6b4)]=function(){},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x86a)]=function(){},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x664)]=function(){this['_stateSprite']['visible']=![];},Sprite_SvEnemy['prototype'][_0x9c6fcf(0x243)]=function(){const _0x583b82=_0x9c6fcf;Sprite_Battler[_0x583b82(0x1ef)]['updateBitmap'][_0x583b82(0x7df)](this);const _0x1c7e8b=this['_actor'][_0x583b82(0x7db)]();this[_0x583b82(0x2e9)]!==_0x1c7e8b&&(this[_0x583b82(0x2e9)]=_0x1c7e8b,this[_0x583b82(0x692)][_0x583b82(0x96b)]=ImageManager[_0x583b82(0x4d4)](_0x1c7e8b)),this[_0x583b82(0x692)]&&this[_0x583b82(0x692)][_0x583b82(0x96b)]&&this[_0x583b82(0x7f4)]&&(this[_0x583b82(0x692)]['bitmap'][_0x583b82(0x682)]!==this['_battler']['battlerSmoothImage']()&&(this[_0x583b82(0x692)]['bitmap'][_0x583b82(0x682)]=this[_0x583b82(0x7f4)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3f5)]=function(){},Sprite_SvEnemy[_0x9c6fcf(0x1ef)]['startMove']=function(_0xac1228,_0x1ff1dd,_0x31e623){const _0x225d98=_0x9c6fcf;if(this[_0x225d98(0x7cc)])this[_0x225d98(0x7cc)]['startMove'](_0xac1228,_0x1ff1dd,_0x31e623);},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x24f)]=function(){const _0x4715b5=_0x9c6fcf,_0x227e88=this['_actor'];if(_0x227e88){const _0x2c21d6=_0x227e88[_0x4715b5(0x6dd)]();if(_0x227e88[_0x4715b5(0x227)]()||_0x227e88[_0x4715b5(0xae5)]())this['startMotion'](_0x4715b5(0x8bf));else{if(_0x2c21d6===0x3)this[_0x4715b5(0x84e)]('dead');else{if(_0x2c21d6===0x2)this[_0x4715b5(0x84e)](_0x4715b5(0x340));else{if(_0x227e88[_0x4715b5(0x987)]())this[_0x4715b5(0x84e)](_0x4715b5(0x33a));else{if(_0x227e88[_0x4715b5(0x53a)]()||_0x227e88['isGuardWaiting']())this[_0x4715b5(0x84e)](_0x4715b5(0xa23));else{if(_0x2c21d6===0x1)this[_0x4715b5(0x84e)](_0x4715b5(0x723));else{if(_0x227e88['isDying']())this['startMotion'](_0x4715b5(0x22a));else _0x227e88['isUndecided']()?this[_0x4715b5(0x84e)](_0x4715b5(0x8bf)):this['startMotion'](_0x227e88[_0x4715b5(0x2c1)]()['motionIdle']||_0x4715b5(0x8bf));}}}}}}}},Sprite_SvEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3a6)]=function(){const _0x2e04ab=_0x9c6fcf;return this[_0x2e04ab(0x7cc)]?this[_0x2e04ab(0x7cc)][_0x2e04ab(0x94f)]===0x0&&this[_0x2e04ab(0x7cc)][_0x2e04ab(0x201)]===0x0:!![];},Sprite_SvEnemy[_0x9c6fcf(0x1ef)]['updateFlip']=function(){},VisuMZ[_0x9c6fcf(0x8f5)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation['prototype'][_0x9c6fcf(0x6f2)],Sprite_Animation['prototype'][_0x9c6fcf(0x6f2)]=function(_0x38dde8){const _0x35ee57=_0x9c6fcf;return _0x38dde8[_0x35ee57(0x7ee)]?this['targetDistortionSpritePosition'](_0x38dde8):VisuMZ[_0x35ee57(0x8f5)][_0x35ee57(0x429)][_0x35ee57(0x7df)](this,_0x38dde8);},Sprite_Animation['prototype'][_0x9c6fcf(0x135)]=function(_0x59ec98){const _0x43a4c6=_0x9c6fcf;let _0x7a482d=_0x59ec98['x'],_0xcabb6b=_0x59ec98['y'],_0x2bed14=_0x59ec98[_0x43a4c6(0x202)],_0x18ce6c=_0x59ec98['_distortionSprite']['scale']['y'];_0x59ec98['x']=_0x59ec98[_0x43a4c6(0x761)]+_0x59ec98[_0x43a4c6(0x82a)](),_0x59ec98['y']=_0x59ec98[_0x43a4c6(0x46a)]+_0x59ec98[_0x43a4c6(0x401)](),_0x59ec98['height']*=_0x18ce6c;let _0x2cf638=VisuMZ[_0x43a4c6(0x8f5)][_0x43a4c6(0x429)]['call'](this,_0x59ec98);return _0x59ec98['x']=_0x7a482d,_0x59ec98['y']=_0xcabb6b,_0x59ec98[_0x43a4c6(0x202)]=_0x2bed14,_0x2cf638;},VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV['prototype']['updatePosition'],Sprite_AnimationMV[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x96f)]=function(){const _0x587197=_0x9c6fcf;VisuMZ[_0x587197(0x8f5)][_0x587197(0x589)][_0x587197(0x7df)](this);if(!SceneManager[_0x587197(0x319)]())return;if(this[_0x587197(0x2d5)][_0x587197(0x91a)]===0x3)this['x']=Math[_0x587197(0xb65)](Graphics['boxWidth']/0x2),this['y']=Math[_0x587197(0xb65)](Graphics[_0x587197(0x5bb)]/0x2);else{if(this[_0x587197(0x566)])return;}},Sprite_Damage[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x912)]=function(_0x2b1b9d){const _0x41b145=_0x9c6fcf,_0x1fe3c1=_0x2b1b9d['getNextDamagePopup']()||_0x2b1b9d[_0x41b145(0x4df)]();if(_0x1fe3c1['missed']||_0x1fe3c1[_0x41b145(0x61c)])this[_0x41b145(0x9be)]=0x0,this[_0x41b145(0x778)]();else{if(_0x1fe3c1['hpAffected'])this['_colorType']=_0x1fe3c1['hpDamage']>=0x0?0x0:0x1,this[_0x41b145(0x6a6)](_0x1fe3c1[_0x41b145(0x91b)]);else _0x2b1b9d[_0x41b145(0x69e)]()&&_0x1fe3c1[_0x41b145(0x339)]!==0x0&&(this[_0x41b145(0x9be)]=_0x1fe3c1[_0x41b145(0x339)]>=0x0?0x2:0x3,this[_0x41b145(0x6a6)](_0x1fe3c1[_0x41b145(0x339)]));}_0x1fe3c1['critical']&&this[_0x41b145(0x474)]();},Sprite_Damage[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa66)]=function(_0x5bf9db){},Sprite_Damage[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6a6)]=function(_0x512061){const _0x1bf0a3=_0x9c6fcf;let _0x30d9d4=this['createString'](_0x512061);const _0xf5760c=this[_0x1bf0a3(0x568)](),_0x400db3=Math['floor'](_0xf5760c*0.75);for(let _0x10e1b2=0x0;_0x10e1b2<_0x30d9d4[_0x1bf0a3(0x88e)];_0x10e1b2++){const _0x575f20=this[_0x1bf0a3(0x826)](_0x400db3,_0xf5760c);_0x575f20['bitmap'][_0x1bf0a3(0x211)](_0x30d9d4[_0x10e1b2],0x0,0x0,_0x400db3,_0xf5760c,_0x1bf0a3(0x328)),_0x575f20['x']=(_0x10e1b2-(_0x30d9d4[_0x1bf0a3(0x88e)]-0x1)/0x2)*_0x400db3,_0x575f20['dy']=-_0x10e1b2;}},Sprite_Damage[_0x9c6fcf(0x1ef)]['createString']=function(_0x146754){const _0x1678cc=_0x9c6fcf;let _0xd41ce0=Math[_0x1678cc(0x278)](_0x146754)[_0x1678cc(0x5c1)]();this[_0x1678cc(0x2e0)]()&&(_0xd41ce0=VisuMZ[_0x1678cc(0x6e7)](_0xd41ce0));const _0x51a01d=VisuMZ[_0x1678cc(0x8f5)][_0x1678cc(0x19c)][_0x1678cc(0x9a9)];let _0x362b2f='',_0x386f57='';switch(this[_0x1678cc(0x9be)]){case 0x0:_0x362b2f=_0x51a01d[_0x1678cc(0x71c)]||_0x1678cc(0x4dc),_0x386f57=TextManager['hp'];if(_0x146754===0x0)_0x362b2f='%1';break;case 0x1:_0x362b2f=_0x51a01d[_0x1678cc(0xa9d)]||_0x1678cc(0x999),_0x386f57=TextManager['hp'];break;case 0x2:_0x362b2f=_0x51a01d[_0x1678cc(0xa93)]||_0x1678cc(0xb2c),_0x386f57=TextManager['mp'];break;case 0x3:_0x362b2f=_0x51a01d[_0x1678cc(0x264)]||_0x1678cc(0x764),_0x386f57=TextManager['mp'];break;}return _0x362b2f[_0x1678cc(0x9da)](_0xd41ce0,_0x386f57)[_0x1678cc(0x4a5)]();},Sprite_Damage['prototype'][_0x9c6fcf(0x2e0)]=function(){const _0x3d2c00=_0x9c6fcf;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x3d2c00(0x342)][_0x3d2c00(0x19c)]['QoL']['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x474)]=function(){const _0x24c043=_0x9c6fcf,_0x366006=VisuMZ[_0x24c043(0x8f5)][_0x24c043(0x19c)][_0x24c043(0x9a9)];_0x366006['CriticalColor']=_0x366006[_0x24c043(0x861)]||[0x0,0x0,0x0,0x0],this[_0x24c043(0x662)]=_0x366006[_0x24c043(0x861)]['slice'](0x0),this[_0x24c043(0x976)]=_0x366006[_0x24c043(0x1ac)]||0x1;},Sprite_Damage['prototype'][_0x9c6fcf(0x64d)]=function(_0x2e1c8d,_0x38005a){const _0x21b4f3=_0x9c6fcf;this[_0x21b4f3(0x662)]=_0x38005a['flashColor']||[0x0,0x0,0x0,0x0],this[_0x21b4f3(0x662)]=JsonEx[_0x21b4f3(0x9ce)](this[_0x21b4f3(0x662)]),this[_0x21b4f3(0x976)]=_0x38005a['flashDuration']||0x0;const _0x3b6a99=this[_0x21b4f3(0x568)](),_0x433c40=Math[_0x21b4f3(0x52a)](_0x3b6a99*0x1e),_0x3ffee2=this[_0x21b4f3(0x826)](_0x433c40,_0x3b6a99);_0x3ffee2[_0x21b4f3(0x96b)][_0x21b4f3(0x3a1)]=ColorManager[_0x21b4f3(0x514)](_0x38005a['textColor']),_0x3ffee2[_0x21b4f3(0x96b)][_0x21b4f3(0x211)](_0x2e1c8d,0x0,0x0,_0x433c40,_0x3b6a99,_0x21b4f3(0x328)),_0x3ffee2['dy']=0x0;},Sprite_Damage[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2f9)]=function(_0x45752a,_0x187836,_0x476764){const _0x447834=_0x9c6fcf,_0xb35335=Math[_0x447834(0x716)](this[_0x447834(0x568)](),ImageManager[_0x447834(0xb3c)]),_0x11af5f=Math[_0x447834(0x52a)](_0xb35335*0x1e),_0x3071cf=this[_0x447834(0x826)](_0x11af5f,_0xb35335),_0x44cf03=ImageManager[_0x447834(0x12c)]/0x2,_0x48062e=_0x3071cf['bitmap'][_0x447834(0x9f0)](_0x187836+'\x20');_0x3071cf[_0x447834(0x96b)][_0x447834(0x3a1)]=ColorManager[_0x447834(0x514)](_0x476764[_0x447834(0x3a1)]),_0x3071cf[_0x447834(0x96b)][_0x447834(0x211)](_0x187836,_0x44cf03,0x0,_0x11af5f-_0x44cf03,_0xb35335,_0x447834(0x328));const _0x5ea322=Math[_0x447834(0xb65)]((_0xb35335-ImageManager[_0x447834(0xb3c)])/0x2),_0x370e05=_0x11af5f/0x2-ImageManager[_0x447834(0x12c)]-_0x48062e/0x2+_0x44cf03/0x2,_0x23ca6c=ImageManager[_0x447834(0x48e)]('IconSet'),_0x2ff23a=ImageManager['iconWidth'],_0x54a430=ImageManager[_0x447834(0xb3c)],_0x23dc8b=_0x45752a%0x10*_0x2ff23a,_0x3c5035=Math[_0x447834(0x52a)](_0x45752a/0x10)*_0x54a430;_0x3071cf['bitmap'][_0x447834(0x6f1)](_0x23ca6c,_0x23dc8b,_0x3c5035,_0x2ff23a,_0x54a430,_0x370e05,_0x5ea322),this[_0x447834(0x662)]=_0x476764[_0x447834(0x1b1)]||[0x0,0x0,0x0,0x0],this[_0x447834(0x662)]=JsonEx['makeDeepCopy'](this[_0x447834(0x662)]),this['_flashDuration']=_0x476764[_0x447834(0x665)]||0x0,_0x3071cf['dy']=0x0,_0x476764[_0x447834(0x6ff)]&&(_0x3071cf['x']+=_0x476764[_0x447834(0x6ff)]),_0x476764[_0x447834(0x184)]&&(_0x3071cf['dy']+=_0x476764[_0x447834(0x184)]);},VisuMZ['BattleCore'][_0x9c6fcf(0x1a4)]=Sprite_Damage[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x826)],Sprite_Damage['prototype'][_0x9c6fcf(0x826)]=function(_0x13a2a0,_0xb0ba85){const _0xcfc94c=_0x9c6fcf;return _0xb0ba85=Math[_0xcfc94c(0xb65)](_0xb0ba85*1.2),VisuMZ['BattleCore'][_0xcfc94c(0x1a4)][_0xcfc94c(0x7df)](this,_0x13a2a0,_0xb0ba85);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xa1a)]=Sprite_StateIcon[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ef)],Sprite_StateIcon[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ef)]=function(){const _0x366c57=_0x9c6fcf;VisuMZ[_0x366c57(0x8f5)][_0x366c57(0xa1a)][_0x366c57(0x7df)](this),this['opacity']=this[_0x366c57(0xa46)]>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x9c6fcf(0x1c4)]=Sprite_Weapon[_0x9c6fcf(0x1ef)]['loadBitmap'],Sprite_Weapon[_0x9c6fcf(0x1ef)]['loadBitmap']=function(){const _0x4519d1=_0x9c6fcf;VisuMZ[_0x4519d1(0x8f5)][_0x4519d1(0x1c4)][_0x4519d1(0x7df)](this),this[_0x4519d1(0x96b)]&&(this[_0x4519d1(0x96b)][_0x4519d1(0x682)]=VisuMZ['BattleCore'][_0x4519d1(0x19c)][_0x4519d1(0x6e6)][_0x4519d1(0xa13)]);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x3d8)]=Sprite_Gauge['prototype'][_0x9c6fcf(0x634)],Sprite_Gauge[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x634)]=function(){const _0x3d5f9b=_0x9c6fcf;return this[_0x3d5f9b(0x1ca)]!==_0x3d5f9b(0x796)?VisuMZ[_0x3d5f9b(0x8f5)][_0x3d5f9b(0x19c)]['HpGauge'][_0x3d5f9b(0x224)]??0x14:VisuMZ[_0x3d5f9b(0x8f5)][_0x3d5f9b(0x3d8)]['call'](this);};function Sprite_HpGauge(){const _0x270037=_0x9c6fcf;this[_0x270037(0x32f)](...arguments);}Sprite_HpGauge[_0x9c6fcf(0x1ef)]=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x788)]=Sprite_HpGauge,Sprite_HpGauge[_0x9c6fcf(0x1ef)]['initialize']=function(){const _0x548732=_0x9c6fcf;Sprite_Gauge['prototype'][_0x548732(0x32f)][_0x548732(0x7df)](this);},Sprite_HpGauge[_0x9c6fcf(0x1ef)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x9c6fcf(0x612)]=function(){const _0x1ab603=_0x9c6fcf;this[_0x1ab603(0x96b)][_0x1ab603(0x4ec)]();const _0x386437=this[_0x1ab603(0x887)]();!isNaN(_0x386437)&&this[_0x1ab603(0xacd)]();};function Sprite_EnemyName(){const _0x58c491=_0x9c6fcf;this[_0x58c491(0x32f)](...arguments);}Sprite_EnemyName[_0x9c6fcf(0x1ef)]=Object['create'](Sprite_Name['prototype']),Sprite_EnemyName[_0x9c6fcf(0x1ef)]['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(){const _0xf680d4=_0x9c6fcf;Sprite_Name[_0xf680d4(0x1ef)][_0xf680d4(0x32f)]['call'](this),this[_0xf680d4(0xa5d)]();},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x875)]=function(){const _0x2d8cc3=_0x9c6fcf;Sprite_Name[_0x2d8cc3(0x1ef)][_0x2d8cc3(0x875)][_0x2d8cc3(0x7df)](this),this[_0x2d8cc3(0x888)]=0x0,this[_0x2d8cc3(0x673)]=null,this[_0x2d8cc3(0x62b)]['x']=0.5,this[_0x2d8cc3(0x62b)]['y']=0x0;},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['createAttachedSprites']=function(){const _0x81aadb=_0x9c6fcf;VisuMZ[_0x81aadb(0x8f5)][_0x81aadb(0x19c)]['Enemy'][_0x81aadb(0x4cd)]&&(this[_0x81aadb(0x3bc)]=new Sprite_StateIcon(),this['addChild'](this['_stateIconSprite']));},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['bitmapWidth']=function(){const _0x52e953=_0x9c6fcf;return Graphics[_0x52e953(0x671)];},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x65d)]=function(){const _0x3be7d9=_0x9c6fcf;return this[_0x3be7d9(0x33b)]=this[_0x3be7d9(0x33b)]||Window_Base[_0x3be7d9(0x1ef)][_0x3be7d9(0x8ae)]()||0x24,this[_0x3be7d9(0x33b)]*0x4;},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x568)]=function(){const _0x9895e0=_0x9c6fcf;return VisuMZ[_0x9895e0(0x8f5)][_0x9895e0(0x19c)][_0x9895e0(0x7b3)][_0x9895e0(0xa0f)]||$gameSystem[_0x9895e0(0xb02)]();},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['linkSprite']=function(_0x1283ea){const _0x11d5c1=_0x9c6fcf;this[_0x11d5c1(0x673)]=_0x1283ea;},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['update']=function(){const _0x1bf058=_0x9c6fcf;Sprite_Name['prototype'][_0x1bf058(0x255)][_0x1bf058(0x7df)](this),this[_0x1bf058(0x45b)](),this['updatePosition'](),this[_0x1bf058(0x434)](),this['updateOpacity']();},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['redraw']=function(){const _0x4c746f=_0x9c6fcf;this[_0x4c746f(0x874)]=undefined;const _0x356cfb=this[_0x4c746f(0x613)](),_0x1affcb=this['bitmapWidth'](),_0x536da0=Window_Base[_0x4c746f(0x1ef)]['lineHeight']();this[_0x4c746f(0xb4e)](),this[_0x4c746f(0x96b)][_0x4c746f(0x4ec)](),this[_0x4c746f(0x96b)][_0x4c746f(0x211)](_0x356cfb,0x0,0x0,_0x1affcb,_0x536da0,'center');},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x45b)]=function(){const _0x1dccc8=_0x9c6fcf;if(!this[_0x1dccc8(0x673)])return;this[_0x1dccc8(0x7f4)]!==this[_0x1dccc8(0x673)]['_battler']&&this[_0x1dccc8(0xa66)](this['_linkedSprite']['_battler']);},Sprite_EnemyName['prototype']['updatePosition']=function(){const _0x3ce698=_0x9c6fcf;if(!this[_0x3ce698(0x673)])return;this[_0x3ce698(0x33b)]=this['_lineHeight']||Window_Base[_0x3ce698(0x1ef)][_0x3ce698(0x8ae)](),this['x']=Math['round'](this['_linkedSprite'][_0x3ce698(0x761)]),this['y']=Math['round'](this[_0x3ce698(0x673)][_0x3ce698(0x46a)]-this['_lineHeight']*0.5);const _0xac665b=VisuMZ[_0x3ce698(0x8f5)][_0x3ce698(0x19c)]['Enemy'];this['x']+=Math[_0x3ce698(0xb65)](_0xac665b[_0x3ce698(0x694)]||0x0),this['y']+=Math['round'](_0xac665b[_0x3ce698(0x330)]||0x0);},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['updateAttachedSprites']=function(){const _0x5ea75c=_0x9c6fcf;this[_0x5ea75c(0x206)]();},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x206)]=function(){const _0x58c7a7=_0x9c6fcf;if(!this[_0x58c7a7(0x3bc)])return;this[_0x58c7a7(0x7f4)]!==this[_0x58c7a7(0x3bc)][_0x58c7a7(0x7f4)]&&this[_0x58c7a7(0x3bc)]['setup'](this[_0x58c7a7(0x7f4)]);const _0x2373ea=this[_0x58c7a7(0xad3)]();this[_0x58c7a7(0x33b)]=this[_0x58c7a7(0x33b)]||Window_Base[_0x58c7a7(0x1ef)][_0x58c7a7(0x8ae)](),this['_stateIconSprite']['x']=Math['round']((_0x2373ea+ImageManager[_0x58c7a7(0x12c)])/0x2)+0x8,this[_0x58c7a7(0x3bc)]['y']=this['_lineHeight']/0x2;const _0x43be5f=VisuMZ['BattleCore'][_0x58c7a7(0x19c)]['Enemy'];this['_stateIconSprite']['x']+=_0x43be5f[_0x58c7a7(0x631)]||0x0,this[_0x58c7a7(0x3bc)]['y']+=_0x43be5f['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['updateOpacity']=function(){const _0x5dc6b9=_0x9c6fcf,_0x234337=this[_0x5dc6b9(0x2fc)]();if(_0x234337&&this[_0x5dc6b9(0x888)]<0xff)this[_0x5dc6b9(0x888)]+=0x10;else!_0x234337&&this[_0x5dc6b9(0x888)]>0x0&&(this[_0x5dc6b9(0x888)]-=0x10);},Sprite_EnemyName['prototype'][_0x9c6fcf(0x2fc)]=function(){const _0x208ed2=_0x9c6fcf;if(this[_0x208ed2(0x60a)]())return![];else{if(!this[_0x208ed2(0x7f4)])return![];else{if(!this[_0x208ed2(0x7f4)][_0x208ed2(0x6a0)]())return![];else{if(this[_0x208ed2(0x55a)]())return!![];else{if(this[_0x208ed2(0x7f4)]['isDead']())return![];else{if(this[_0x208ed2(0x7cf)]())return!![];else{if(this[_0x208ed2(0xb3e)]())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this[_0x208ed2(0xa43)]())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x55a)]=function(){const _0xe6ce07=_0x9c6fcf;return this[_0xe6ce07(0x7f4)]&&this['_battler'][_0xe6ce07(0x33f)]();},Sprite_EnemyName['prototype'][_0x9c6fcf(0x60a)]=function(){const _0x5efc50=_0x9c6fcf;return VisuMZ[_0x5efc50(0x8f5)][_0x5efc50(0x19c)][_0x5efc50(0x7b3)]['NameAlwaysHidden'];},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7cf)]=function(){const _0x1112d7=_0x9c6fcf;return this[_0x1112d7(0x7f4)]&&BattleManager[_0x1112d7(0x3d7)]&&BattleManager['_targets'][_0x1112d7(0x765)](this['_battler']);},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb3e)]=function(){return![];},Sprite_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3b1)]=function(){const _0x16b533=_0x9c6fcf;return VisuMZ['BattleCore'][_0x16b533(0x19c)][_0x16b533(0x7b3)][_0x16b533(0xa0b)];},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['isIncludedInEnemyWindow']=function(){const _0x450199=_0x9c6fcf;return VisuMZ['BattleCore'][_0x450199(0x19c)][_0x450199(0x7b3)]['NameAlwaysSelectOnly']?this[_0x450199(0x7f4)][_0x450199(0x822)]():SceneManager[_0x450199(0x90f)]['_enemyWindow']&&SceneManager[_0x450199(0x90f)][_0x450199(0x3ad)][_0x450199(0x313)]&&SceneManager[_0x450199(0x90f)][_0x450199(0x3ad)][_0x450199(0x9a1)][_0x450199(0x765)](this[_0x450199(0x7f4)]);},Sprite_EnemyName[_0x9c6fcf(0x1ef)]['textWidth']=function(){const _0x5e85f9=_0x9c6fcf;if(!this[_0x5e85f9(0x7f4)])return 0x0;if(this[_0x5e85f9(0x874)])return this['_cacheTextWidth'];const _0x104fbf=this[_0x5e85f9(0x613)]();return this[_0x5e85f9(0xb4e)](),this['_cacheTextWidth']=this[_0x5e85f9(0x96b)][_0x5e85f9(0x9f0)](_0x104fbf)||0x1,this[_0x5e85f9(0x874)];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x94b)]=Sprite_Battleback[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8f6)],Sprite_Battleback['prototype'][_0x9c6fcf(0x8f6)]=function(){const _0x36bd17=_0x9c6fcf,_0x54ebbc=VisuMZ[_0x36bd17(0x8f5)][_0x36bd17(0x19c)][_0x36bd17(0x5d9)];if(!_0x54ebbc)return VisuMZ[_0x36bd17(0x8f5)][_0x36bd17(0x94b)][_0x36bd17(0x7df)](this);const _0x6de142=String(_0x54ebbc['DefaultStyle'])||'MZ';switch(_0x6de142){case'MZ':VisuMZ[_0x36bd17(0x8f5)][_0x36bd17(0x94b)][_0x36bd17(0x7df)](this);break;case _0x36bd17(0x856):this[_0x36bd17(0x83a)]();break;case _0x36bd17(0x82f):this[_0x36bd17(0x1df)]();break;case'ScaleDown':this[_0x36bd17(0x240)]();break;case _0x36bd17(0x974):this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback[_0x9c6fcf(0x1ef)]['adjustPosition_1for1']=function(){const _0x567fdd=_0x9c6fcf,_0x342b07=VisuMZ[_0x567fdd(0x8f5)]['Settings'][_0x567fdd(0x5d9)];if(_0x342b07&&_0x342b07['jsOneForOne'])return _0x342b07[_0x567fdd(0x5fd)][_0x567fdd(0x7df)](this);this[_0x567fdd(0xac8)]=Graphics[_0x567fdd(0xac8)],this[_0x567fdd(0x202)]=Graphics[_0x567fdd(0x202)];const _0x4311c9=0x1;this[_0x567fdd(0x4bc)]['x']=_0x4311c9,this['scale']['y']=_0x4311c9,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype']['adjustPosition_ScaleToFit']=function(){const _0x51d083=_0x9c6fcf,_0x5e19de=VisuMZ[_0x51d083(0x8f5)][_0x51d083(0x19c)][_0x51d083(0x5d9)];if(_0x5e19de&&_0x5e19de[_0x51d083(0x500)])return _0x5e19de[_0x51d083(0x500)][_0x51d083(0x7df)](this);this['width']=Graphics[_0x51d083(0xac8)],this[_0x51d083(0x202)]=Graphics[_0x51d083(0x202)];const _0x24a4dd=this[_0x51d083(0xac8)]/this[_0x51d083(0x96b)][_0x51d083(0xac8)],_0x220731=this[_0x51d083(0x202)]/this[_0x51d083(0x96b)][_0x51d083(0x202)],_0x3fd712=Math[_0x51d083(0x716)](_0x24a4dd,_0x220731);this[_0x51d083(0x4bc)]['x']=_0x3fd712,this[_0x51d083(0x4bc)]['y']=_0x3fd712,this['x']=(Graphics[_0x51d083(0xac8)]-this[_0x51d083(0xac8)])/0x2,this['y']=Graphics[_0x51d083(0x202)]-this[_0x51d083(0x202)];},Sprite_Battleback['prototype'][_0x9c6fcf(0x240)]=function(){const _0x4f30c7=_0x9c6fcf,_0x8c5ea9=VisuMZ[_0x4f30c7(0x8f5)]['Settings'][_0x4f30c7(0x5d9)];if(_0x8c5ea9&&_0x8c5ea9[_0x4f30c7(0xa3a)])return _0x8c5ea9[_0x4f30c7(0xa3a)][_0x4f30c7(0x7df)](this);this[_0x4f30c7(0xac8)]=Graphics['width'],this[_0x4f30c7(0x202)]=Graphics[_0x4f30c7(0x202)];const _0x3f8ba5=Math[_0x4f30c7(0x878)](0x1,this['width']/this['bitmap'][_0x4f30c7(0xac8)]),_0x4e3104=Math['min'](0x1,this['height']/this[_0x4f30c7(0x96b)][_0x4f30c7(0x202)]),_0x3c5e24=Math[_0x4f30c7(0x716)](_0x3f8ba5,_0x4e3104);this[_0x4f30c7(0x4bc)]['x']=_0x3c5e24,this[_0x4f30c7(0x4bc)]['y']=_0x3c5e24,this['x']=(Graphics[_0x4f30c7(0xac8)]-this[_0x4f30c7(0xac8)])/0x2,this['y']=Graphics[_0x4f30c7(0x202)]-this[_0x4f30c7(0x202)];},Sprite_Battleback['prototype'][_0x9c6fcf(0x9dc)]=function(){const _0x137aa7=_0x9c6fcf,_0x602211=VisuMZ[_0x137aa7(0x8f5)][_0x137aa7(0x19c)]['BattlebackScale'];if(_0x602211&&_0x602211[_0x137aa7(0x9ed)])return _0x602211[_0x137aa7(0x9ed)][_0x137aa7(0x7df)](this);this['width']=Graphics[_0x137aa7(0xac8)],this[_0x137aa7(0x202)]=Graphics['height'];const _0x32f654=Math[_0x137aa7(0x716)](0x1,this[_0x137aa7(0xac8)]/this[_0x137aa7(0x96b)][_0x137aa7(0xac8)]),_0xf9a749=Math[_0x137aa7(0x716)](0x1,this[_0x137aa7(0x202)]/this[_0x137aa7(0x96b)][_0x137aa7(0x202)]),_0x2a4fcb=Math[_0x137aa7(0x716)](_0x32f654,_0xf9a749);this[_0x137aa7(0x4bc)]['x']=_0x2a4fcb,this[_0x137aa7(0x4bc)]['y']=_0x2a4fcb,this['x']=(Graphics[_0x137aa7(0xac8)]-this[_0x137aa7(0xac8)])/0x2,this['y']=Graphics[_0x137aa7(0x202)]-this[_0x137aa7(0x202)];},Spriteset_Battle[_0x9c6fcf(0x7d7)]=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0xb17)][_0x9c6fcf(0x93e)]??!![],Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7f6)]=function(){const _0x57144d=_0x9c6fcf;if(!$gameSystem[_0x57144d(0x95c)]())return![];return![];},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6e1)]=function(){return 0x0;},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x489)]=function(){return 0x0;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x8ca)]=Spriteset_Battle['prototype']['createLowerLayer'],Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb2a)]=function(){const _0x26f789=_0x9c6fcf;VisuMZ[_0x26f789(0x8f5)][_0x26f789(0x8ca)][_0x26f789(0x7df)](this),this[_0x26f789(0x8e0)](),this[_0x26f789(0x405)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x310)]=Spriteset_Battle['prototype'][_0x9c6fcf(0x255)],Spriteset_Battle['prototype'][_0x9c6fcf(0x255)]=function(){const _0x57fefc=_0x9c6fcf;VisuMZ[_0x57fefc(0x8f5)][_0x57fefc(0x310)][_0x57fefc(0x7df)](this),this['updateBattlerContainer'](),this['updateUiContainerPosition'](),this[_0x57fefc(0x2c2)](),this['updateBattleBalloons']();},Spriteset_Battle['prototype'][_0x9c6fcf(0x8e0)]=function(){const _0x21d218=_0x9c6fcf;this[_0x21d218(0x1f2)]=new Weather(),this[_0x21d218(0x49e)][_0x21d218(0x210)](this[_0x21d218(0x1f2)]);},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c2)]=function(){const _0x4fca1c=_0x9c6fcf;this['_weather']['type']=$gameScreen[_0x4fca1c(0x2cc)](),this[_0x4fca1c(0x1f2)]['power']=$gameScreen[_0x4fca1c(0x95a)]();},Game_Interpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2f1)]=function(_0x56a046){const _0x35c0eb=_0x9c6fcf;$gameScreen['changeWeather'](_0x56a046[0x0],_0x56a046[0x1],_0x56a046[0x2]);if(_0x56a046[0x3])this[_0x35c0eb(0x396)](_0x56a046[0x2]);return!![];},VisuMZ['BattleCore'][_0x9c6fcf(0x1d1)]=Game_Interpreter['prototype'][_0x9c6fcf(0x727)],Game_Interpreter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x727)]=function(_0xf9a7a3){const _0x41864c=_0x9c6fcf;return SceneManager[_0x41864c(0x319)]()?(SceneManager[_0x41864c(0x90f)][_0x41864c(0x21f)][_0x41864c(0x835)](_0xf9a7a3[0x0],_0xf9a7a3[0x1]),!![]):VisuMZ[_0x41864c(0x8f5)]['Game_Interpreter_command283'][_0x41864c(0x7df)](this,_0xf9a7a3);},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5e2)]=function(_0x531aae,_0x4c6cb5){const _0x3842a=_0x9c6fcf;_0x531aae[_0x3842a(0x96b)]=_0x4c6cb5;},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x835)]=function(_0x2e3b5f,_0x471db4){const _0x313f58=_0x9c6fcf;_0x2e3b5f=_0x2e3b5f||'',_0x471db4=_0x471db4||'';_0x2e3b5f===''&&_0x471db4===''&&(_0x2e3b5f=this[_0x313f58(0x395)][_0x313f58(0xa47)](),_0x471db4=this['_back2Sprite']['battleback2Name']());const _0x363860=ImageManager[_0x313f58(0x7c4)](_0x2e3b5f),_0x48d46a=ImageManager[_0x313f58(0x6ab)](_0x471db4);_0x363860[_0x313f58(0x2f2)](this[_0x313f58(0xa27)][_0x313f58(0x43b)](this,this[_0x313f58(0x395)],this[_0x313f58(0x138)],_0x363860,_0x48d46a));},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa27)]=function(_0x4e8b5d,_0x558c6e,_0x2184f4,_0x1d7644){const _0x207974=_0x9c6fcf;_0x1d7644[_0x207974(0x2f2)](this[_0x207974(0xa58)][_0x207974(0x43b)](this,_0x4e8b5d,_0x558c6e,_0x2184f4,_0x1d7644));},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa58)]=function(_0x49c127,_0x2174e9,_0x2f0af9,_0x1a2089){const _0x20cb96=_0x9c6fcf;_0x49c127['bitmap']=_0x2f0af9,_0x2174e9[_0x20cb96(0x96b)]=_0x1a2089,_0x49c127[_0x20cb96(0x8f6)](),_0x2174e9[_0x20cb96(0x8f6)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa7d)],Spriteset_Battle['prototype'][_0x9c6fcf(0xa7d)]=function(){const _0x143b23=_0x9c6fcf;VisuMZ[_0x143b23(0x8f5)]['Spriteset_Battle_createBattleField'][_0x143b23(0x7df)](this),this[_0x143b23(0x72d)]();},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x72d)]=function(){const _0x2157cd=_0x9c6fcf;this[_0x2157cd(0x80c)](),this['createUIContainer'](),this['createAnimationContainer'](),this['createDamageContainer'](),this[_0x2157cd(0x61f)]();},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x80c)]=function(){const _0x593413=_0x9c6fcf;this[_0x593413(0x3db)]=new Sprite(),this[_0x593413(0x49e)]['addChild'](this[_0x593413(0x3db)]);},Spriteset_Battle[_0x9c6fcf(0x1ef)]['createAnimationContainer']=function(){const _0x5ab590=_0x9c6fcf;this[_0x5ab590(0xaa0)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this['addChild'](this[_0x5ab590(0xaa0)]):this[_0x5ab590(0x49e)]['addChild'](this[_0x5ab590(0xaa0)]);},Spriteset_Battle[_0x9c6fcf(0x1ef)]['createDamageContainer']=function(){const _0x2f9ae7=_0x9c6fcf;this[_0x2f9ae7(0x64b)]=new Sprite(),this['_damageContainer']['x']=this['_battleField']['x'],this['_damageContainer']['y']=this['_battleField']['y'],this['addChild'](this[_0x2f9ae7(0x64b)]);},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x61f)]=function(){const _0x47cb21=_0x9c6fcf;if(!this[_0x47cb21(0x7f6)]())return;this[_0x47cb21(0x3db)][_0x47cb21(0x4bc)]['x']=-0x1,this['_battlerContainer']['x']=this[_0x47cb21(0x49e)]['width'],this[_0x47cb21(0x23b)][_0x47cb21(0x4bc)]['x']=-0x1,this[_0x47cb21(0x23b)]['x']=this[_0x47cb21(0x49e)][_0x47cb21(0xac8)],this[_0x47cb21(0xaa0)]['scale']['x']=-0x1,this['_animationContainer']['x']=this[_0x47cb21(0x49e)][_0x47cb21(0xac8)],this[_0x47cb21(0x64b)][_0x47cb21(0x4bc)]['x']=-0x1,this['_damageContainer']['x']=this[_0x47cb21(0x49e)]['x']+this[_0x47cb21(0x49e)][_0x47cb21(0xac8)];},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x590)]=function(){const _0x292b17=_0x9c6fcf;Imported[_0x292b17(0xb00)]&&this[_0x292b17(0x333)]()&&this[_0x292b17(0x6bb)]();const _0x4f5ac3=$gameTroop[_0x292b17(0x90e)](),_0x329a31=[];for(const _0x324b5f of _0x4f5ac3){_0x329a31[_0x292b17(0x4c6)](new Sprite_Enemy(_0x324b5f));}_0x329a31['sort'](this[_0x292b17(0x572)][_0x292b17(0x43b)](this));for(const _0x2c9ec3 of _0x329a31){this['_battlerContainer'][_0x292b17(0x210)](_0x2c9ec3);}this[_0x292b17(0x493)]=_0x329a31;},Spriteset_Battle[_0x9c6fcf(0x1ef)]['createActors']=function(){const _0x1d5ac5=_0x9c6fcf;this[_0x1d5ac5(0x1d6)]=[];for(let _0x58eaad=0x0;_0x58eaad<$gameParty[_0x1d5ac5(0x168)]();_0x58eaad++){const _0x4d79ed=$gameParty[_0x1d5ac5(0x14b)]()[_0x58eaad],_0x3c5b1c=new Sprite_Actor();_0x3c5b1c['moveToStartPositionBattleCore'](_0x4d79ed),_0x3c5b1c[_0x1d5ac5(0x7dc)](_0x4d79ed),_0x3c5b1c[_0x1d5ac5(0x255)](),this['_actorSprites']['push'](_0x3c5b1c),this[_0x1d5ac5(0x3db)]['addChild'](_0x3c5b1c);}},Spriteset_Battle[_0x9c6fcf(0x1ef)]['createAnimationSprite']=function(_0x2ab45d,_0x2a51a7,_0x457b8a,_0x2db456){const _0x13a914=_0x9c6fcf,_0x3559cb=this['isMVAnimation'](_0x2a51a7),_0x500f82=new(_0x3559cb?Sprite_AnimationMV:Sprite_Animation)(),_0x2ba3c9=this[_0x13a914(0xad6)](_0x2ab45d);this['animationShouldMirror'](_0x2ab45d[0x0])&&(_0x457b8a=!_0x457b8a),_0x500f82[_0x13a914(0xa3e)]=_0x2ab45d,_0x500f82[_0x13a914(0xa66)](_0x2ba3c9,_0x2a51a7,_0x457b8a,_0x2db456),this[_0x13a914(0x9e8)](_0x500f82);},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9e8)]=function(_0x1c5f3f){const _0x57286a=_0x9c6fcf;this[_0x57286a(0x654)](_0x1c5f3f)?(this[_0x57286a(0x824)]()[_0x57286a(0x210)](_0x1c5f3f),_0x1c5f3f[_0x57286a(0x566)]=!![]):(this[_0x57286a(0xaa0)][_0x57286a(0x210)](_0x1c5f3f),Spriteset_Battle[_0x57286a(0x7d7)]&&(this['_animationContainer']['x']=this[_0x57286a(0x846)]['x'],this[_0x57286a(0xaa0)]['y']=this[_0x57286a(0x846)]['y'])),this[_0x57286a(0x4d6)]['push'](_0x1c5f3f);},Spriteset_Battle['prototype']['isAnimationShownOnBattlePortrait']=function(_0x3309f2){const _0x38a1e7=_0x9c6fcf;if(!_0x3309f2)return![];if(!_0x3309f2[_0x38a1e7(0x2d5)])return![];if(!_0x3309f2[_0x38a1e7(0xa3e)][0x0])return![];if(_0x3309f2['targetObjects'][0x0]['isActor']&&!_0x3309f2['targetObjects'][0x0][_0x38a1e7(0x552)]())return![];if($gameSystem[_0x38a1e7(0x95c)]())return![];if(!this[_0x38a1e7(0x824)]())return![];if(_0x3309f2[_0x38a1e7(0x788)]===Sprite_Animation){if(_0x3309f2[_0x38a1e7(0x2d5)][_0x38a1e7(0x5d2)]!==0x0)return![];}else{if(_0x3309f2[_0x38a1e7(0x788)]===Sprite_AnimationMV){if(_0x3309f2['_animation'][_0x38a1e7(0x91a)]===0x3)return![];}}return!![];const _0x10561a=Window_BattleStatus['prototype'][_0x38a1e7(0xa3f)]();return['xp','portrait']['contains'](_0x10561a);},Spriteset_Battle['prototype']['battleStatusWindowAnimationContainer']=function(){const _0x129514=_0x9c6fcf;if(!SceneManager[_0x129514(0x90f)])return null;if(!SceneManager['_scene'][_0x129514(0x197)])return null;if(!SceneManager[_0x129514(0x90f)][_0x129514(0x197)][_0x129514(0x846)])return null;return SceneManager[_0x129514(0x90f)]['_statusWindow'][_0x129514(0x846)];},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x25c)]=function(_0x1be3fa){const _0x5a8a2e=_0x9c6fcf;this[_0x5a8a2e(0x799)](_0x1be3fa);for(const _0x30d104 of _0x1be3fa['targetObjects']){_0x30d104[_0x5a8a2e(0x4ad)]&&_0x30d104[_0x5a8a2e(0x4ad)]();}_0x1be3fa['destroy']();},Spriteset_Battle['prototype'][_0x9c6fcf(0x799)]=function(_0x1af80e){const _0x269d6a=_0x9c6fcf;this[_0x269d6a(0x654)](_0x1af80e)?this[_0x269d6a(0x824)]()[_0x269d6a(0x68d)](_0x1af80e):this[_0x269d6a(0xaa0)][_0x269d6a(0x68d)](_0x1af80e);this[_0x269d6a(0x846)][_0x269d6a(0x68d)](_0x1af80e),this['_animationContainer'][_0x269d6a(0x68d)](_0x1af80e),this[_0x269d6a(0x4d6)][_0x269d6a(0x7e5)](_0x1af80e);if(this[_0x269d6a(0x6f3)])this[_0x269d6a(0x6f3)][_0x269d6a(0x7e5)](_0x1af80e);},VisuMZ['BattleCore'][_0x9c6fcf(0x944)]=Spriteset_Battle[_0x9c6fcf(0x1ef)]['updateActors'],Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x494)]=function(){const _0x1a2911=_0x9c6fcf;VisuMZ[_0x1a2911(0x8f5)]['Spriteset_Battle_updateActors']['call'](this),this[_0x1a2911(0x163)]();},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x163)]=function(){const _0x1c2c9a=_0x9c6fcf;this[_0x1c2c9a(0x3db)][_0x1c2c9a(0x621)][_0x1c2c9a(0xa79)](this[_0x1c2c9a(0x760)]['bind'](this)),this[_0x1c2c9a(0x9f8)]();if(!this[_0x1c2c9a(0x3db)])return;this[_0x1c2c9a(0x3db)][_0x1c2c9a(0x888)]=this[_0x1c2c9a(0x2b0)]();},Spriteset_Battle[_0x9c6fcf(0x1ef)]['compareBattlerSprites']=function(_0xf80463,_0x324689){const _0x2c5d10=_0x9c6fcf;if(VisuMZ[_0x2c5d10(0x8f5)][_0x2c5d10(0x19c)][_0x2c5d10(0x6e6)][_0x2c5d10(0x83c)]){if(_0xf80463[_0x2c5d10(0x7f4)]&&_0x324689[_0x2c5d10(0x7f4)]){if(_0xf80463['_battler']['isActor']()&&_0x324689[_0x2c5d10(0x7f4)][_0x2c5d10(0x3fd)]())return 0x1;else{if(_0x324689[_0x2c5d10(0x7f4)][_0x2c5d10(0x552)]()&&_0xf80463[_0x2c5d10(0x7f4)][_0x2c5d10(0x3fd)]())return-0x1;}}}return _0xf80463[_0x2c5d10(0x46a)]!==_0x324689[_0x2c5d10(0x46a)]?_0xf80463[_0x2c5d10(0x46a)]-_0x324689[_0x2c5d10(0x46a)]:_0x324689[_0x2c5d10(0x728)]-_0xf80463[_0x2c5d10(0x728)];},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9f8)]=function(){const _0x3f3947=_0x9c6fcf;if(!VisuMZ['BattleCore'][_0x3f3947(0x19c)][_0x3f3947(0x6e6)]['PrioritySortActive'])return;const _0x2ceb4c=BattleManager[_0x3f3947(0x3d7)];if(_0x2ceb4c){if(_0x2ceb4c[_0x3f3947(0x552)]()&&!$gameSystem[_0x3f3947(0x95c)]())return;if(_0x2ceb4c===BattleManager['actor']())return;const _0x263069=_0x2ceb4c[_0x3f3947(0x338)]();if(_0x263069&&_0x2ceb4c[_0x3f3947(0x552)]())this['_battlerContainer'][_0x3f3947(0x210)](_0x263069);}},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x289)]=function(){const _0x10f04d=_0x9c6fcf;for(const _0x3ecd62 of $gameParty[_0x10f04d(0x3b8)]()){if(!_0x3ecd62)continue;if(!_0x3ecd62['battler']())continue;_0x3ecd62[_0x10f04d(0x338)]()[_0x10f04d(0x269)]=!![],_0x3ecd62['battler']()['retreat']();}},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb19)]=function(){const _0x527b11=_0x9c6fcf;this['_uiContainer']=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x527b11(0x210)](this['_uiContainer']):this[_0x527b11(0x49e)]['addChild'](this[_0x527b11(0x23b)]),SceneManager[_0x527b11(0x90f)][_0x527b11(0x23b)]=this['_uiContainer'];},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x405)]=function(){const _0x5e71d1=_0x9c6fcf;if(VisuMZ[_0x5e71d1(0x8f5)][_0x5e71d1(0x19c)]['Enemy'][_0x5e71d1(0x5bc)])return;this[_0x5e71d1(0x770)]=new Sprite(),BattleManager[_0x5e71d1(0x9c9)](this[_0x5e71d1(0x770)]);for(const _0x247397 of this[_0x5e71d1(0x493)]){const _0xb57235=new Sprite_EnemyName();this[_0x5e71d1(0x770)][_0x5e71d1(0x210)](_0xb57235),_0xb57235['linkSprite'](_0x247397);}},Spriteset_Battle[_0x9c6fcf(0x1ef)]['updateUiContainerPosition']=function(){const _0x23667e=_0x9c6fcf;if(!this['_damageContainer'])return;if(!this['_uiContainer'])return;const _0x3bf03c=Spriteset_Battle[_0x23667e(0x7d7)]?this['_damageContainer']['x']:0x0,_0x52d1b2=Spriteset_Battle[_0x23667e(0x7d7)]?this[_0x23667e(0x64b)]['y']:0x0,_0x2adf62=Imported[_0x23667e(0x87b)]?this[_0x23667e(0x49e)]['x']:0x0,_0x275a19=Imported[_0x23667e(0x87b)]?this[_0x23667e(0x49e)]['y']:0x0;this['_uiContainer']['x']=_0x3bf03c+_0x2adf62,this['_uiContainer']['y']=_0x52d1b2+_0x275a19;},BattleManager['addChildToUiContainer']=function(_0x3226b0){const _0x45ac15=_0x9c6fcf;if(!SceneManager[_0x45ac15(0x90f)]['_uiContainer'])return;SceneManager[_0x45ac15(0x90f)][_0x45ac15(0x23b)][_0x45ac15(0x210)](_0x3226b0);},BattleManager[_0x9c6fcf(0x750)]=function(_0x1e36a3){const _0x3bef25=_0x9c6fcf;if(!SceneManager[_0x3bef25(0x90f)][_0x3bef25(0x23b)])return;SceneManager['_scene']['_uiContainer'][_0x3bef25(0x68d)](_0x1e36a3);},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2b0)]=function(){return 0xff;},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x441)]=function(){return![];},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x87e)]=function(){const _0x2e663a=_0x9c6fcf;return this[_0x2e663a(0x55b)]()['some'](_0x5ec533=>_0x5ec533[_0x2e663a(0x92a)]());},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x9fb)]=function(){const _0x406427=_0x9c6fcf;return this['battlerSprites']()[_0x406427(0x40c)](_0x373aa1=>_0x373aa1[_0x406427(0x532)]());},Spriteset_Battle[_0x9c6fcf(0x1ef)]['isAnyoneGrowing']=function(){const _0x3eab28=_0x9c6fcf;return this[_0x3eab28(0x55b)]()[_0x3eab28(0x40c)](_0x13726e=>_0x13726e[_0x3eab28(0x15e)]());},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x81a)]=function(){const _0x39214d=_0x9c6fcf;return this[_0x39214d(0x55b)]()[_0x39214d(0x40c)](_0x389144=>_0x389144['isSkewing']());},Spriteset_Battle['prototype'][_0x9c6fcf(0x2d4)]=function(){const _0x3ee5fa=_0x9c6fcf;return this[_0x3ee5fa(0x55b)]()[_0x3ee5fa(0x40c)](_0x4b10cf=>_0x4b10cf[_0x3ee5fa(0x967)]());},Spriteset_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2a5)]=function(){const _0x389188=_0x9c6fcf;return this[_0x389188(0x55b)]()['some'](_0x1e99d5=>_0x1e99d5[_0x389188(0x27c)]());},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xb15)]=Window_ItemList[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x480)],Window_ItemList['prototype'][_0x9c6fcf(0x480)]=function(){const _0xe85cda=_0x9c6fcf;return SceneManager[_0xe85cda(0x319)]()?SceneManager['_scene'][_0xe85cda(0xa3f)]()===_0xe85cda(0x75f)?VisuMZ[_0xe85cda(0x8f5)][_0xe85cda(0x19c)][_0xe85cda(0xb17)][_0xe85cda(0x6d2)]:VisuMZ['BattleCore'][_0xe85cda(0x19c)]['BattleLayout'][_0xe85cda(0x6fd)]:VisuMZ[_0xe85cda(0x8f5)][_0xe85cda(0xb15)][_0xe85cda(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x6bd)]=Window_SkillList['prototype'][_0x9c6fcf(0x480)],Window_SkillList['prototype']['maxCols']=function(){const _0x5e2ea3=_0x9c6fcf;return SceneManager[_0x5e2ea3(0x319)]()?SceneManager[_0x5e2ea3(0x90f)][_0x5e2ea3(0xa3f)]()===_0x5e2ea3(0x75f)?VisuMZ[_0x5e2ea3(0x8f5)][_0x5e2ea3(0x19c)][_0x5e2ea3(0xb17)][_0x5e2ea3(0x6d2)]:VisuMZ[_0x5e2ea3(0x8f5)][_0x5e2ea3(0x19c)][_0x5e2ea3(0xb17)][_0x5e2ea3(0x6fd)]:VisuMZ['BattleCore'][_0x5e2ea3(0x6bd)][_0x5e2ea3(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x781)]=Window_Options[_0x9c6fcf(0x1ef)]['addGeneralOptions'],Window_Options[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3e6)]=function(){const _0x1e1f69=_0x9c6fcf;VisuMZ[_0x1e1f69(0x8f5)]['Window_Options_addGeneralOptions'][_0x1e1f69(0x7df)](this),this['addAutoBattleCommands'](),this[_0x1e1f69(0xa84)]();},Window_Options[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7bb)]=function(){const _0x21e66b=_0x9c6fcf;VisuMZ['BattleCore'][_0x21e66b(0x19c)]['AutoBattle'][_0x21e66b(0x98a)]&&(this[_0x21e66b(0xa7e)](),this[_0x21e66b(0x6f9)]());},Window_Options[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa84)]=function(){const _0x1dadff=_0x9c6fcf;if(!VisuMZ['BattleCore'][_0x1dadff(0x19c)]['HpGauge'][_0x1dadff(0xa0c)])return;const _0x39e04c=TextManager[_0x1dadff(0x6e8)],_0x595683='visualHpGauge';this[_0x1dadff(0x218)](_0x39e04c,_0x595683);},Window_Options[_0x9c6fcf(0x1ef)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x9a6938=_0x9c6fcf,_0x4da079=TextManager[_0x9a6938(0x13c)],_0x40ecae=_0x9a6938(0x95e);this[_0x9a6938(0x218)](_0x4da079,_0x40ecae);},Window_Options[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6f9)]=function(){const _0x2e53e0=_0x9c6fcf,_0x4d3fae=TextManager[_0x2e53e0(0x8ea)],_0x3227eb=_0x2e53e0(0x46b);this[_0x2e53e0(0x218)](_0x4d3fae,_0x3227eb);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x16a)]=Window_Options[_0x9c6fcf(0x1ef)]['statusText'],Window_Options[_0x9c6fcf(0x1ef)]['statusText']=function(_0x4b8b62){const _0x4d6490=_0x9c6fcf,_0x133633=this[_0x4d6490(0x20d)](_0x4b8b62);return _0x133633===_0x4d6490(0x46b)?this[_0x4d6490(0x308)]():VisuMZ[_0x4d6490(0x8f5)]['Window_Options_statusText'][_0x4d6490(0x7df)](this,_0x4b8b62);},Window_Options[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x308)]=function(){const _0x5db3ea=_0x9c6fcf,_0x54bbab=VisuMZ[_0x5db3ea(0x8f5)][_0x5db3ea(0x19c)][_0x5db3ea(0x36a)],_0x29e059=this[_0x5db3ea(0xa2a)](_0x5db3ea(0x46b));return _0x29e059?_0x54bbab[_0x5db3ea(0x92e)]:_0x54bbab[_0x5db3ea(0x768)];},Window_ShopStatus['prototype']['getItemDamageAmountLabelBattleCore']=function(){const _0x29be4b=_0x9c6fcf,_0x584880=DataManager['getDamageStyle'](this['_item']),_0x3596b4=VisuMZ[_0x29be4b(0x7c5)][_0x584880];if(!_0x3596b4)return this[_0x29be4b(0x7d5)]();const _0x1d6965=_0x29be4b(0x5cf)[_0x29be4b(0x9da)](this[_0x29be4b(0x45f)][_0x29be4b(0x6ea)][_0x29be4b(0x930)]),_0x522154=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x29be4b(0x6ea)][_0x29be4b(0x930)]];return _0x3596b4[_0x1d6965][_0x29be4b(0x9da)](_0x522154);},Window_ShopStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xafd)]=function(){const _0x4e1374=_0x9c6fcf,_0x2adde6=DataManager[_0x4e1374(0x5e9)](this[_0x4e1374(0x45f)]),_0x50a7c1=VisuMZ[_0x4e1374(0x7c5)][_0x2adde6];if(!_0x50a7c1)return this[_0x4e1374(0x710)]();return _0x50a7c1[_0x4e1374(0x448)][_0x4e1374(0x7df)](this);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x467)]=Window_PartyCommand['prototype'][_0x9c6fcf(0x32f)],Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(_0x337dc0){const _0x82ba46=_0x9c6fcf;VisuMZ['BattleCore'][_0x82ba46(0x467)][_0x82ba46(0x7df)](this,_0x337dc0),this[_0x82ba46(0x129)](_0x337dc0);},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x129)]=function(_0x5bffb0){const _0x5e6bfc=_0x9c6fcf,_0x589a59=new Rectangle(0x0,0x0,_0x5bffb0[_0x5e6bfc(0xac8)],_0x5bffb0[_0x5e6bfc(0x202)]);this[_0x5e6bfc(0x959)]=new Window_Base(_0x589a59),this['_commandNameWindow'][_0x5e6bfc(0x888)]=0x0,this[_0x5e6bfc(0x210)](this[_0x5e6bfc(0x959)]),this[_0x5e6bfc(0x600)]();},Window_PartyCommand['prototype'][_0x9c6fcf(0x5d7)]=function(){const _0x5f25e7=_0x9c6fcf;Window_Command[_0x5f25e7(0x1ef)]['callUpdateHelp']['call'](this);if(this[_0x5f25e7(0x959)])this[_0x5f25e7(0x600)]();},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x600)]=function(){const _0x4dc122=_0x9c6fcf,_0x274094=this[_0x4dc122(0x959)];_0x274094[_0x4dc122(0x80f)][_0x4dc122(0x4ec)]();const _0x5009d2=this[_0x4dc122(0x142)](this[_0x4dc122(0x241)]());if(_0x5009d2===_0x4dc122(0xaec)&&this[_0x4dc122(0x229)]()>0x0){const _0x3c93d4=this[_0x4dc122(0x738)](this[_0x4dc122(0x241)]());let _0x52f5fb=this[_0x4dc122(0x174)](this['index']());_0x52f5fb=_0x52f5fb[_0x4dc122(0xb09)](/\\I\[(\d+)\]/gi,''),_0x274094['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x52f5fb,_0x3c93d4),this['commandNameWindowDrawText'](_0x52f5fb,_0x3c93d4),this['commandNameWindowCenter'](_0x52f5fb,_0x3c93d4);}},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa87)]=function(_0x6a01e1,_0x19182e){},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7b2)]=function(_0x52c75d,_0xfd40fb){const _0x425276=_0x9c6fcf,_0x37968d=this[_0x425276(0x959)];_0x37968d[_0x425276(0x211)](_0x52c75d,0x0,_0xfd40fb['y'],_0x37968d['innerWidth'],_0x425276(0x328));},Window_PartyCommand['prototype']['commandNameWindowCenter']=function(_0x59f8dc,_0x5a73d5){const _0x513be0=_0x9c6fcf,_0x6014b7=this['_commandNameWindow'],_0x5d1c35=$gameSystem[_0x513be0(0x36c)](),_0x58eebe=_0x5a73d5['x']+Math[_0x513be0(0x52a)](_0x5a73d5['width']/0x2)+_0x5d1c35;_0x6014b7['x']=_0x6014b7['width']/-0x2+_0x58eebe,_0x6014b7['y']=Math[_0x513be0(0x52a)](_0x5a73d5[_0x513be0(0x202)]/0x2);},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xabe)]=function(){const _0x33911f=_0x9c6fcf;this[_0x33911f(0xa5c)](),this['addAutoBattleCommand'](),this[_0x33911f(0x279)](),this[_0x33911f(0x1ff)](),this[_0x33911f(0x696)]();},Window_PartyCommand[_0x9c6fcf(0x1ef)]['addFightCommand']=function(){const _0x22fc0a=_0x9c6fcf,_0x2211d3=this[_0x22fc0a(0x565)](),_0x2f5dbd=VisuMZ[_0x22fc0a(0x8f5)][_0x22fc0a(0x19c)][_0x22fc0a(0x3c0)][_0x22fc0a(0x595)],_0x1cfe01=_0x2211d3===_0x22fc0a(0xa11)?TextManager[_0x22fc0a(0x79e)]:_0x22fc0a(0x375)[_0x22fc0a(0x9da)](_0x2f5dbd,TextManager[_0x22fc0a(0x79e)]),_0x28aa8e=this['isFightCommandEnabled']();this[_0x22fc0a(0x218)](_0x1cfe01,_0x22fc0a(0x79e),_0x28aa8e);},Window_PartyCommand['prototype'][_0x9c6fcf(0x15b)]=function(){return!![];},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x520)]=function(){const _0x598483=_0x9c6fcf;if(!this[_0x598483(0x25a)]())return;const _0x19742c=this[_0x598483(0x565)](),_0x4fe1db=VisuMZ[_0x598483(0x8f5)][_0x598483(0x19c)][_0x598483(0x3c0)][_0x598483(0xafb)],_0x47cd97=_0x19742c===_0x598483(0xa11)?TextManager[_0x598483(0x57a)]:_0x598483(0x375)[_0x598483(0x9da)](_0x4fe1db,TextManager['autoBattle']),_0x5ef4d4=this[_0x598483(0x504)]();this['addCommand'](_0x47cd97,'autoBattle',_0x5ef4d4);},Window_PartyCommand['prototype'][_0x9c6fcf(0x25a)]=function(){const _0x3e5d9b=_0x9c6fcf;return VisuMZ[_0x3e5d9b(0x8f5)][_0x3e5d9b(0x19c)][_0x3e5d9b(0x3c0)][_0x3e5d9b(0xa2e)];},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x504)]=function(){return!![];},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x279)]=function(){},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1ff)]=function(){const _0x409cea=_0x9c6fcf;if(!this[_0x409cea(0x972)]())return;const _0x44a514=this[_0x409cea(0x565)](),_0x4de27e=VisuMZ[_0x409cea(0x8f5)][_0x409cea(0x19c)][_0x409cea(0x3c0)][_0x409cea(0x2c4)],_0x236ad3=_0x44a514===_0x409cea(0xa11)?TextManager[_0x409cea(0x6e9)]:_0x409cea(0x375)[_0x409cea(0x9da)](_0x4de27e,TextManager[_0x409cea(0x6e9)]),_0x18716b=this['isOptionsCommandEnabled']();this['addCommand'](_0x236ad3,_0x409cea(0x6e9),_0x18716b);},Window_PartyCommand['prototype'][_0x9c6fcf(0x972)]=function(){const _0x4bad97=_0x9c6fcf;return VisuMZ['BattleCore'][_0x4bad97(0x19c)][_0x4bad97(0x3c0)][_0x4bad97(0x528)];},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x413)]=function(){return!![];},Window_PartyCommand['prototype'][_0x9c6fcf(0x696)]=function(){const _0x367d81=_0x9c6fcf,_0x413557=this[_0x367d81(0x565)](),_0x594f5d=VisuMZ[_0x367d81(0x8f5)][_0x367d81(0x19c)][_0x367d81(0x3c0)][_0x367d81(0x2e4)],_0x25474e=_0x413557===_0x367d81(0xa11)?TextManager[_0x367d81(0x965)]:_0x367d81(0x375)[_0x367d81(0x9da)](_0x594f5d,TextManager[_0x367d81(0x965)]),_0x365cd1=this['isEscapeCommandEnabled']();this['addCommand'](_0x25474e,_0x367d81(0x965),_0x365cd1);},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3c2)]=function(){const _0xe1c51b=_0x9c6fcf;return BattleManager[_0xe1c51b(0x416)]();},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb16)]=function(){const _0x189dab=_0x9c6fcf;return VisuMZ[_0x189dab(0x8f5)][_0x189dab(0x19c)][_0x189dab(0x3c0)]['CmdTextAlign'];},Window_PartyCommand[_0x9c6fcf(0x1ef)]['drawItem']=function(_0x13102c){const _0x27517e=_0x9c6fcf,_0xb50db2=this[_0x27517e(0x142)](_0x13102c);if(_0xb50db2===_0x27517e(0x456))this['drawItemStyleIconText'](_0x13102c);else _0xb50db2==='icon'?this[_0x27517e(0xa26)](_0x13102c):Window_Command['prototype'][_0x27517e(0x898)][_0x27517e(0x7df)](this,_0x13102c);},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x565)]=function(){const _0x3d430d=_0x9c6fcf;return VisuMZ[_0x3d430d(0x8f5)][_0x3d430d(0x19c)]['PartyCmd'][_0x3d430d(0x4b9)];},Window_PartyCommand['prototype'][_0x9c6fcf(0x142)]=function(_0x4739ee){const _0x509d74=_0x9c6fcf;if(_0x4739ee<0x0)return _0x509d74(0xa11);const _0x159fe6=this['commandStyle']();if(_0x159fe6!==_0x509d74(0x1fc))return _0x159fe6;else{if(this[_0x509d74(0x229)]()>0x0){const _0x132eda=this[_0x509d74(0x174)](_0x4739ee);if(_0x132eda[_0x509d74(0x3c6)](/\\I\[(\d+)\]/i)){const _0x5f0fe7=this[_0x509d74(0x738)](_0x4739ee),_0x179424=this[_0x509d74(0xae4)](_0x132eda)[_0x509d74(0xac8)];return _0x179424<=_0x5f0fe7[_0x509d74(0xac8)]?_0x509d74(0x456):'icon';}}}return _0x509d74(0xa11);},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8a5)]=function(_0xf92226){const _0x5b1d29=_0x9c6fcf,_0x59b77c=this[_0x5b1d29(0x738)](_0xf92226),_0x1b1138=this[_0x5b1d29(0x174)](_0xf92226),_0xfd1d63=this[_0x5b1d29(0xae4)](_0x1b1138)[_0x5b1d29(0xac8)];this[_0x5b1d29(0x3fe)](this[_0x5b1d29(0xab0)](_0xf92226));const _0x375f8c=this['itemTextAlign']();if(_0x375f8c===_0x5b1d29(0x144))this['drawTextEx'](_0x1b1138,_0x59b77c['x']+_0x59b77c[_0x5b1d29(0xac8)]-_0xfd1d63,_0x59b77c['y'],_0xfd1d63);else{if(_0x375f8c===_0x5b1d29(0x328)){const _0x253bc2=_0x59b77c['x']+Math[_0x5b1d29(0x52a)]((_0x59b77c[_0x5b1d29(0xac8)]-_0xfd1d63)/0x2);this[_0x5b1d29(0x97e)](_0x1b1138,_0x253bc2,_0x59b77c['y'],_0xfd1d63);}else this[_0x5b1d29(0x97e)](_0x1b1138,_0x59b77c['x'],_0x59b77c['y'],_0xfd1d63);}},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa26)]=function(_0x33a537){const _0x466628=_0x9c6fcf;this['commandName'](_0x33a537)['match'](/\\I\[(\d+)\]/i);const _0x950fb9=Number(RegExp['$1'])||0x0,_0x4f37e2=this[_0x466628(0x738)](_0x33a537),_0x1abd5f=_0x4f37e2['x']+Math[_0x466628(0x52a)]((_0x4f37e2[_0x466628(0xac8)]-ImageManager[_0x466628(0x12c)])/0x2),_0x2ab248=_0x4f37e2['y']+(_0x4f37e2[_0x466628(0x202)]-ImageManager[_0x466628(0xb3c)])/0x2;this[_0x466628(0x4cb)](_0x950fb9,_0x1abd5f,_0x2ab248);},Window_PartyCommand['prototype'][_0x9c6fcf(0x837)]=function(){},Window_PartyCommand['prototype']['activate']=function(){const _0x30607a=_0x9c6fcf;Window_Command[_0x30607a(0x1ef)][_0x30607a(0xaf6)]['call'](this);const _0xe8cf39=this[_0x30607a(0xa3f)]();_0xe8cf39===_0x30607a(0x75f)&&this['showHelpWindow']();},Window_PartyCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa3f)]=function(){const _0x5b8e92=_0x9c6fcf;if(this['_battleLayoutStyle'])return this[_0x5b8e92(0x991)];return this['_battleLayoutStyle']=SceneManager[_0x5b8e92(0x90f)][_0x5b8e92(0xa3f)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x9c6fcf(0x1ef)]['updateHelp']=function(){const _0xbd0d0d=_0x9c6fcf,_0x2e59bd=VisuMZ['BattleCore'][_0xbd0d0d(0x19c)][_0xbd0d0d(0x3c0)],_0x4699d7=this[_0xbd0d0d(0x3f1)]();switch(_0x4699d7){case'fight':this[_0xbd0d0d(0x82d)][_0xbd0d0d(0x47d)](_0x2e59bd['HelpFight']);break;case _0xbd0d0d(0x57a):this['_helpWindow'][_0xbd0d0d(0x47d)](_0x2e59bd['HelpAutoBattle']);break;case _0xbd0d0d(0x6e9):this[_0xbd0d0d(0x82d)][_0xbd0d0d(0x47d)](_0x2e59bd[_0xbd0d0d(0x331)]);break;case _0xbd0d0d(0x965):this[_0xbd0d0d(0x82d)][_0xbd0d0d(0x47d)](_0x2e59bd[_0xbd0d0d(0x6a2)]);break;default:this[_0xbd0d0d(0x82d)]['setText']('');break;}},VisuMZ['BattleCore'][_0x9c6fcf(0x629)]=Window_ActorCommand[_0x9c6fcf(0x1ef)]['initialize'],Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(_0x4d3f16){const _0x2a005d=_0x9c6fcf;VisuMZ[_0x2a005d(0x8f5)][_0x2a005d(0x629)]['call'](this,_0x4d3f16),this[_0x2a005d(0x129)](_0x4d3f16);},Window_ActorCommand[_0x9c6fcf(0x1ef)]['createCommandNameWindow']=function(_0x41905c){const _0x42c75d=_0x9c6fcf,_0x385ab0=new Rectangle(0x0,0x0,_0x41905c[_0x42c75d(0xac8)],_0x41905c[_0x42c75d(0x202)]);this['_commandNameWindow']=new Window_Base(_0x385ab0),this[_0x42c75d(0x959)][_0x42c75d(0x888)]=0x0,this[_0x42c75d(0x210)](this[_0x42c75d(0x959)]),this[_0x42c75d(0x600)]();},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5d7)]=function(){const _0x513f68=_0x9c6fcf;Window_Command[_0x513f68(0x1ef)][_0x513f68(0x5d7)]['call'](this);if(this[_0x513f68(0x959)])this[_0x513f68(0x600)]();},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x600)]=function(){const _0x56c449=_0x9c6fcf,_0x339c93=this['_commandNameWindow'];_0x339c93['contents']['clear']();const _0x4e1855=this['commandStyleCheck'](this[_0x56c449(0x241)]());if(_0x4e1855===_0x56c449(0xaec)&&this[_0x56c449(0x229)]()>0x0){const _0x189da2=this[_0x56c449(0x738)](this[_0x56c449(0x241)]());let _0x423b29=this['commandName'](this[_0x56c449(0x241)]());_0x423b29=_0x423b29[_0x56c449(0xb09)](/\\I\[(\d+)\]/gi,''),_0x339c93['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x423b29,_0x189da2),this['commandNameWindowDrawText'](_0x423b29,_0x189da2),this[_0x56c449(0x58f)](_0x423b29,_0x189da2);}},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa87)]=function(_0x1f8ced,_0x1505cd){},Window_ActorCommand[_0x9c6fcf(0x1ef)]['commandNameWindowDrawText']=function(_0x22d9cd,_0x49b995){const _0x18c38e=_0x9c6fcf,_0x3d6c66=this[_0x18c38e(0x959)];_0x3d6c66[_0x18c38e(0x211)](_0x22d9cd,0x0,_0x49b995['y'],_0x3d6c66[_0x18c38e(0xac9)],'center');},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x58f)]=function(_0xc46174,_0x375678){const _0x4fd4ab=_0x9c6fcf,_0x3f3d63=this['_commandNameWindow'],_0x11d8d5=$gameSystem[_0x4fd4ab(0x36c)](),_0x5ecfbc=_0x375678['x']+Math[_0x4fd4ab(0x52a)](_0x375678[_0x4fd4ab(0xac8)]/0x2)+_0x11d8d5;_0x3f3d63['x']=_0x3f3d63[_0x4fd4ab(0xac8)]/-0x2+_0x5ecfbc,_0x3f3d63['y']=Math[_0x4fd4ab(0x52a)](_0x375678[_0x4fd4ab(0x202)]/0x2);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xabe)]=function(){const _0x339b64=_0x9c6fcf;if(!this[_0x339b64(0x4fd)])return;const _0x33bdbf=this['_actor'][_0x339b64(0x32c)]();for(const _0x1f1d4a of _0x33bdbf){this[_0x339b64(0x28b)](_0x1f1d4a[_0x339b64(0x5ed)]()[_0x339b64(0x4a5)]());}},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x28b)]=function(_0x544c75){const _0x115ad4=_0x9c6fcf;_0x544c75===_0x115ad4(0xb1a)&&this['addAttackCommand']();[_0x115ad4(0x67e),_0x115ad4(0x957)][_0x115ad4(0x765)](_0x544c75)&&this[_0x115ad4(0xb1c)]();_0x544c75===_0x115ad4(0x92c)&&this[_0x115ad4(0xae3)]();_0x544c75===_0x115ad4(0x326)&&this[_0x115ad4(0x4a9)]();_0x544c75==='ESCAPE'&&this['addEscapeCommand']();_0x544c75===_0x115ad4(0x8cd)&&this[_0x115ad4(0x520)]();if(_0x544c75[_0x115ad4(0x3c6)](/STYPE: (\d+)/i)){const _0x2dfa1e=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x2dfa1e);}else{if(_0x544c75[_0x115ad4(0x3c6)](/STYPE: (.*)/i)){const _0x35a7fa=DataManager[_0x115ad4(0x7d1)](RegExp['$1']);this[_0x115ad4(0xb1b)](_0x35a7fa);}}_0x544c75===_0x115ad4(0x5ba)&&this[_0x115ad4(0x7b5)]();if(_0x544c75[_0x115ad4(0x3c6)](/SKILL: (\d+)/i)){const _0x2cd970=Number(RegExp['$1']);this[_0x115ad4(0xb3a)]($dataSkills[_0x2cd970]);}else{if(_0x544c75[_0x115ad4(0x3c6)](/SKILL: (.*)/i)){const _0x20a27f=DataManager[_0x115ad4(0x5ea)](RegExp['$1']);this[_0x115ad4(0xb3a)]($dataSkills[_0x20a27f]);}}_0x544c75===_0x115ad4(0x730)&&Imported[_0x115ad4(0x825)]&&this[_0x115ad4(0x691)](),[_0x115ad4(0x31c),_0x115ad4(0x37e)][_0x115ad4(0x765)](_0x544c75)&&Imported['VisuMZ_4_CombatLog']&&this[_0x115ad4(0xa8b)](),_0x544c75===_0x115ad4(0x521)&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x115ad4(0x936)](!![]),_0x544c75===_0x115ad4(0x99c)&&Imported[_0x115ad4(0x132)]&&this['addBattleGridMoveCommand']();},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ce)]=function(){const _0x29eebc=_0x9c6fcf,_0x38f3af=$dataSkills[this['_actor'][_0x29eebc(0x809)]()];if(!_0x38f3af)return;if(!this[_0x29eebc(0x287)](_0x38f3af))return;const _0x4d9499=this[_0x29eebc(0x565)](),_0x2a202e=DataManager[_0x29eebc(0x366)](_0x38f3af),_0x29d618=DataManager[_0x29eebc(0x9b2)](_0x38f3af),_0x14a7e3=_0x4d9499==='text'?_0x2a202e:_0x29eebc(0x375)['format'](_0x29d618,_0x2a202e);this[_0x29eebc(0x218)](_0x14a7e3,_0x29eebc(0x254),this[_0x29eebc(0x4fd)][_0x29eebc(0x683)]());},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xae3)]=function(){const _0x5fef6=_0x9c6fcf,_0x5b23dd=$dataSkills[this['_actor'][_0x5fef6(0x5d4)]()];if(!_0x5b23dd)return;if(!this[_0x5fef6(0x287)](_0x5b23dd))return;const _0x508ffc=this['commandStyle'](),_0x1872ae=DataManager[_0x5fef6(0x366)](_0x5b23dd),_0x511a2d=DataManager[_0x5fef6(0x9b2)](_0x5b23dd),_0x699260=_0x508ffc===_0x5fef6(0xa11)?_0x1872ae:_0x5fef6(0x375)['format'](_0x511a2d,_0x1872ae);this[_0x5fef6(0x218)](_0x699260,_0x5fef6(0xa23),this[_0x5fef6(0x4fd)][_0x5fef6(0x324)]());},Window_ActorCommand['prototype'][_0x9c6fcf(0x4a9)]=function(){const _0x8d839c=_0x9c6fcf,_0x478e85=this['commandStyle'](),_0x479df9=VisuMZ['BattleCore']['Settings'][_0x8d839c(0xac0)][_0x8d839c(0xa44)],_0x5072bf=_0x478e85===_0x8d839c(0xa11)?TextManager[_0x8d839c(0x9d3)]:_0x8d839c(0x375)[_0x8d839c(0x9da)](_0x479df9,TextManager['item']),_0x5da8b7=this[_0x8d839c(0x2e5)]();this['addCommand'](_0x5072bf,'item',_0x5da8b7);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2e5)]=function(){const _0x1f3eae=_0x9c6fcf;return this[_0x1f3eae(0x4fd)]&&this[_0x1f3eae(0x4fd)][_0x1f3eae(0x464)]();},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb1c)]=function(){const _0x2456a1=_0x9c6fcf,_0x1910c7=this[_0x2456a1(0x4fd)]['skillTypes']();for(const _0x27bb77 of _0x1910c7){this['addSkillTypeCommand'](_0x27bb77);}},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb1b)]=function(_0x3072da){const _0x26e3ed=_0x9c6fcf;let _0x578145=$dataSystem[_0x26e3ed(0x1b5)][_0x3072da];if(!_0x578145)return;let _0x539a0c=_0x578145;const _0x1e31a2=this['commandStyle']();if(_0x1e31a2===_0x26e3ed(0xa11))_0x539a0c=_0x539a0c[_0x26e3ed(0xb09)](/\x1I\[(\d+)\]/gi,''),_0x539a0c=_0x539a0c[_0x26e3ed(0xb09)](/\\I\[(\d+)\]/gi,'');else{if(!_0x578145[_0x26e3ed(0x3c6)](/\\I\[(\d+)\]/i)){const _0x2b3b2d=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x26e3ed(0x450)][_0x26e3ed(0x19c)][_0x26e3ed(0x2bc)]:VisuMZ[_0x26e3ed(0x8f5)][_0x26e3ed(0x19c)]['ActorCmd'],_0x1a0d76=$dataSystem[_0x26e3ed(0x204)][_0x26e3ed(0x765)](_0x3072da),_0x38c5a4=_0x1a0d76?_0x2b3b2d[_0x26e3ed(0x5db)]:_0x2b3b2d['IconStypeNorm'];_0x539a0c=_0x26e3ed(0x375)['format'](_0x38c5a4,_0x578145);}}this[_0x26e3ed(0x218)](_0x539a0c,_0x26e3ed(0x3c5),!![],_0x3072da);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7b5)]=function(){const _0x4b210b=_0x9c6fcf,_0x33a41f=this[_0x4b210b(0x4fd)]['skillTypes'](),_0xc44d78=this['_actor']['skills']();for(const _0x1cf383 of _0xc44d78){if(!_0x1cf383)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this['noSimilarSTypes'](_0x1cf383))continue;if(this[_0x4b210b(0x250)](_0x1cf383))continue;}else{if(!_0x33a41f[_0x4b210b(0x765)](_0x1cf383[_0x4b210b(0x954)]))continue;}this[_0x4b210b(0xb3a)](_0x1cf383);}},Window_ActorCommand[_0x9c6fcf(0x1ef)]['noSimilarSTypes']=function(_0x264e7d){const _0x565a3b=_0x9c6fcf,_0x4ec8a9=this[_0x565a3b(0x4fd)][_0x565a3b(0x1b5)](),_0x335694=_0x4ec8a9[_0x565a3b(0x4e3)](_0x2361b0=>DataManager['getSkillTypes'](_0x264e7d)[_0x565a3b(0x765)](_0x2361b0));return _0x335694['length']<=0x0;},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x250)]=function(_0x33b7f5){const _0x561dbf=_0x9c6fcf;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ[_0x561dbf(0x450)][_0x561dbf(0x14c)]>=1.24){if(this[_0x561dbf(0x4fd)]){if(!VisuMZ[_0x561dbf(0x450)][_0x561dbf(0xa6b)](this['_actor'],_0x33b7f5))return!![];if(!VisuMZ[_0x561dbf(0x450)][_0x561dbf(0x483)](this[_0x561dbf(0x4fd)],_0x33b7f5))return!![];if(!VisuMZ[_0x561dbf(0x450)][_0x561dbf(0x41c)](this[_0x561dbf(0x4fd)],_0x33b7f5))return!![];}}else{if(!Window_SkillList[_0x561dbf(0x1ef)][_0x561dbf(0x150)]['call'](this,_0x33b7f5))return!![];if(!Window_SkillList[_0x561dbf(0x1ef)][_0x561dbf(0x6d6)]['call'](this,_0x33b7f5))return!![];if(!Window_SkillList['prototype'][_0x561dbf(0x17b)][_0x561dbf(0x7df)](this,_0x33b7f5))return!![];}}return![];},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb3a)]=function(_0x599cb9){const _0x5729df=_0x9c6fcf;if(!_0x599cb9)return;if(!this[_0x5729df(0x287)](_0x599cb9))return;const _0x1d142d=this[_0x5729df(0x565)](),_0x237a2b=DataManager[_0x5729df(0x366)](_0x599cb9),_0x407d5b=DataManager[_0x5729df(0x9b2)](_0x599cb9),_0x19b996=_0x1d142d===_0x5729df(0xa11)?_0x237a2b:'\x5cI[%1]%2'['format'](_0x407d5b,_0x237a2b),_0x953421=this[_0x5729df(0x4fd)][_0x5729df(0xa3d)](_0x599cb9);this['addCommand'](_0x19b996,_0x5729df(0x7d6),_0x953421,_0x599cb9['id']);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x287)]=function(_0x882818){const _0x275a29=_0x9c6fcf,_0x2c84e5=_0x882818[_0x275a29(0x468)];if(_0x2c84e5[_0x275a29(0x3c6)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x275a29(0x4fd)]['isLearnedSkill'](_0x882818['id']))return![];}if(_0x2c84e5[_0x275a29(0x3c6)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x275a29(0x4fd)]['hasSkill'](_0x882818['id']))return![];}const _0x33c420=VisuMZ[_0x275a29(0x8f5)][_0x275a29(0x6a3)](_0x882818,_0x275a29(0x3ed));if(VisuMZ[_0x275a29(0x8f5)]['JS'][_0x33c420]){if(!VisuMZ[_0x275a29(0x8f5)]['JS'][_0x33c420][_0x275a29(0x7df)](this,this[_0x275a29(0x4fd)],_0x882818))return![];}return VisuMZ['BattleCore']['CheckSkillCommandShowSwitches'](_0x882818);},VisuMZ[_0x9c6fcf(0x8f5)]['CheckSkillCommandShowSwitches']=function(_0x12f605){const _0x57bd79=_0x9c6fcf,_0x2cf308=_0x12f605['note'];if(_0x2cf308[_0x57bd79(0x3c6)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4548c6=JSON[_0x57bd79(0xb61)]('['+RegExp['$1'][_0x57bd79(0x3c6)](/\d+/g)+']');for(const _0x2fb9a2 of _0x4548c6){if(!$gameSwitches['value'](_0x2fb9a2))return![];}return!![];}if(_0x2cf308[_0x57bd79(0x3c6)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3160d9=JSON[_0x57bd79(0xb61)]('['+RegExp['$1'][_0x57bd79(0x3c6)](/\d+/g)+']');for(const _0x417ce4 of _0x3160d9){if(!$gameSwitches['value'](_0x417ce4))return![];}return!![];}if(_0x2cf308[_0x57bd79(0x3c6)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x236556=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x1d45fa of _0x236556){if($gameSwitches[_0x57bd79(0x99d)](_0x1d45fa))return!![];}return![];}if(_0x2cf308[_0x57bd79(0x3c6)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2a458a=JSON[_0x57bd79(0xb61)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x1e3e01 of _0x2a458a){if(!$gameSwitches[_0x57bd79(0x99d)](_0x1e3e01))return!![];}return![];}if(_0x2cf308['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1abde7=JSON[_0x57bd79(0xb61)]('['+RegExp['$1'][_0x57bd79(0x3c6)](/\d+/g)+']');for(const _0x3b717a of _0x1abde7){if(!$gameSwitches[_0x57bd79(0x99d)](_0x3b717a))return!![];}return![];}if(_0x2cf308[_0x57bd79(0x3c6)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x91ff=JSON[_0x57bd79(0xb61)]('['+RegExp['$1'][_0x57bd79(0x3c6)](/\d+/g)+']');for(const _0x1d7643 of _0x91ff){if($gameSwitches['value'](_0x1d7643))return![];}return!![];}return!![];},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x696)]=function(){const _0xa458c=_0x9c6fcf,_0x2016da=this['commandStyle'](),_0x5eb4c0=VisuMZ[_0xa458c(0x8f5)][_0xa458c(0x19c)][_0xa458c(0x3c0)][_0xa458c(0x2e4)],_0x5e36fd=_0x2016da==='text'?TextManager[_0xa458c(0x965)]:_0xa458c(0x375)['format'](_0x5eb4c0,TextManager[_0xa458c(0x965)]),_0x29257e=this[_0xa458c(0x3c2)]();this[_0xa458c(0x218)](_0x5e36fd,_0xa458c(0x965),_0x29257e);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3c2)]=function(){const _0x34f693=_0x9c6fcf;return BattleManager[_0x34f693(0x416)]();},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x520)]=function(){const _0x5140fe=_0x9c6fcf,_0x3d4e62=this[_0x5140fe(0x565)](),_0x3e4285=VisuMZ[_0x5140fe(0x8f5)][_0x5140fe(0x19c)][_0x5140fe(0x3c0)][_0x5140fe(0xafb)],_0x28247b=_0x3d4e62===_0x5140fe(0xa11)?TextManager[_0x5140fe(0x57a)]:'\x5cI[%1]%2'[_0x5140fe(0x9da)](_0x3e4285,TextManager[_0x5140fe(0x57a)]),_0x1be54a=this[_0x5140fe(0x504)]();this[_0x5140fe(0x218)](_0x28247b,_0x5140fe(0x57a),_0x1be54a);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x504)]=function(){return!![];},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb16)]=function(){const _0x7a31ba=_0x9c6fcf;return VisuMZ[_0x7a31ba(0x8f5)][_0x7a31ba(0x19c)]['ActorCmd']['CmdTextAlign'];},Window_ActorCommand['prototype'][_0x9c6fcf(0x898)]=function(_0xaca5eb){const _0x326bb3=_0x9c6fcf,_0x3de316=this[_0x326bb3(0x142)](_0xaca5eb);if(_0x3de316===_0x326bb3(0x456))this['drawItemStyleIconText'](_0xaca5eb);else _0x3de316===_0x326bb3(0xaec)?this['drawItemStyleIcon'](_0xaca5eb):Window_Command[_0x326bb3(0x1ef)][_0x326bb3(0x898)][_0x326bb3(0x7df)](this,_0xaca5eb);this[_0x326bb3(0x3fc)](_0xaca5eb);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x565)]=function(){const _0x3acd1e=_0x9c6fcf;return VisuMZ[_0x3acd1e(0x8f5)][_0x3acd1e(0x19c)][_0x3acd1e(0xac0)][_0x3acd1e(0x4b9)];},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x142)]=function(_0x5d5160){const _0x2b9944=_0x9c6fcf;if(_0x5d5160<0x0)return _0x2b9944(0xa11);const _0xbb9696=this[_0x2b9944(0x565)]();if(_0xbb9696!==_0x2b9944(0x1fc))return _0xbb9696;else{if(this[_0x2b9944(0x229)]()>0x0){const _0x1bae15=this[_0x2b9944(0x174)](_0x5d5160);if(_0x1bae15['match'](/\\I\[(\d+)\]/i)){const _0x4dfa3b=this[_0x2b9944(0x738)](_0x5d5160),_0x57ef05=this['textSizeEx'](_0x1bae15)['width'];return _0x57ef05<=_0x4dfa3b['width']?_0x2b9944(0x456):_0x2b9944(0xaec);}}}return _0x2b9944(0xa11);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8a5)]=function(_0x114fc0){const _0x375385=_0x9c6fcf,_0x4c2664=this['itemLineRect'](_0x114fc0),_0x393b94=this[_0x375385(0x174)](_0x114fc0),_0xb813f2=this[_0x375385(0xae4)](_0x393b94)[_0x375385(0xac8)];this[_0x375385(0x3fe)](this[_0x375385(0xab0)](_0x114fc0));const _0x1dd8ae=this[_0x375385(0xb16)]();if(_0x1dd8ae===_0x375385(0x144))this[_0x375385(0x97e)](_0x393b94,_0x4c2664['x']+_0x4c2664[_0x375385(0xac8)]-_0xb813f2,_0x4c2664['y'],_0xb813f2);else{if(_0x1dd8ae===_0x375385(0x328)){const _0x3d9bb2=_0x4c2664['x']+Math['floor']((_0x4c2664['width']-_0xb813f2)/0x2);this['drawTextEx'](_0x393b94,_0x3d9bb2,_0x4c2664['y'],_0xb813f2);}else this[_0x375385(0x97e)](_0x393b94,_0x4c2664['x'],_0x4c2664['y'],_0xb813f2);}},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa26)]=function(_0x4038ec){const _0x5ab21b=_0x9c6fcf;this['commandName'](_0x4038ec)[_0x5ab21b(0x3c6)](/\\I\[(\d+)\]/i);const _0x6cf721=Number(RegExp['$1'])||0x0,_0x2da492=this[_0x5ab21b(0x738)](_0x4038ec),_0x1555fb=_0x2da492['x']+Math['floor']((_0x2da492[_0x5ab21b(0xac8)]-ImageManager[_0x5ab21b(0x12c)])/0x2),_0x27402e=_0x2da492['y']+(_0x2da492[_0x5ab21b(0x202)]-ImageManager[_0x5ab21b(0xb3c)])/0x2;this[_0x5ab21b(0x4cb)](_0x6cf721,_0x1555fb,_0x27402e);},Window_ActorCommand[_0x9c6fcf(0x1ef)]['drawSingleSkillCost']=function(_0x1fdd7f){const _0x191e31=_0x9c6fcf;if(!(VisuMZ[_0x191e31(0x8f5)][_0x191e31(0x19c)]['ActorCmd'][_0x191e31(0x3a0)]??!![]))return;const _0x5d660f=this[_0x191e31(0x20d)](_0x1fdd7f);if(!['attack',_0x191e31(0xa23),_0x191e31(0x7d6)]['includes'](_0x5d660f))return;const _0x13182e=this[_0x191e31(0x738)](_0x1fdd7f);let _0x391e51=null;if(_0x5d660f===_0x191e31(0x254))_0x391e51=$dataSkills[this['_actor'][_0x191e31(0x809)]()];else _0x5d660f===_0x191e31(0xa23)?_0x391e51=$dataSkills[this[_0x191e31(0x4fd)][_0x191e31(0x5d4)]()]:_0x391e51=$dataSkills[this[_0x191e31(0x9fc)][_0x1fdd7f][_0x191e31(0xa97)]];this['drawSkillCost'](this['_actor'],_0x391e51,_0x13182e['x'],_0x13182e['y'],_0x13182e[_0x191e31(0xac8)]);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x704)]=function(_0xbd5284,_0x3dc8f2,_0x689087,_0x466602,_0x49b223){const _0x2e6563=_0x9c6fcf;if(!_0x3dc8f2)return;Imported[_0x2e6563(0x180)]?Window_Command['prototype'][_0x2e6563(0x704)][_0x2e6563(0x7df)](this,_0xbd5284,_0x3dc8f2,_0x689087,_0x466602,_0x49b223):Window_SkillList[_0x2e6563(0x1ef)][_0x2e6563(0x704)][_0x2e6563(0x7df)](this,_0x3dc8f2,_0x689087,_0x466602,_0x49b223);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x837)]=function(){},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaf6)]=function(){const _0x1466d2=_0x9c6fcf;Window_Command[_0x1466d2(0x1ef)][_0x1466d2(0xaf6)][_0x1466d2(0x7df)](this);const _0x3e2ef8=this[_0x1466d2(0xa3f)]();_0x3e2ef8===_0x1466d2(0x75f)&&this[_0x1466d2(0x690)]();},Window_ActorCommand['prototype']['battleLayoutStyle']=function(){const _0x4afd25=_0x9c6fcf;if(this[_0x4afd25(0x991)])return this[_0x4afd25(0x991)];return this[_0x4afd25(0x991)]=SceneManager[_0x4afd25(0x90f)]['battleLayoutStyle'](),this[_0x4afd25(0x991)];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x885)]=Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa66)],Window_ActorCommand[_0x9c6fcf(0x1ef)]['setup']=function(_0x92a461){const _0x2fb90e=_0x9c6fcf,_0x5c76cb=this[_0x2fb90e(0xa3f)]();if(_0x92a461&&['xp',_0x2fb90e(0x7c0)][_0x2fb90e(0x765)](_0x5c76cb))this[_0x2fb90e(0x47a)](_0x92a461);else _0x92a461&&[_0x2fb90e(0x75f)][_0x2fb90e(0x765)](_0x5c76cb)&&(this[_0x2fb90e(0x294)](_0x92a461),this['showHelpWindow']());VisuMZ[_0x2fb90e(0x8f5)][_0x2fb90e(0x885)]['call'](this,_0x92a461),_0x92a461&&$gameTroop[_0x2fb90e(0x3b8)]()[_0x2fb90e(0x88e)]>0x0&&_0x92a461['battler']()&&_0x92a461[_0x2fb90e(0x338)]()[_0x2fb90e(0x635)]();},Window_ActorCommand['prototype'][_0x9c6fcf(0x47a)]=function(_0x3ca086){const _0x3d22bc=_0x9c6fcf,_0x196433=VisuMZ[_0x3d22bc(0x8f5)][_0x3d22bc(0x19c)][_0x3d22bc(0xb17)][_0x3d22bc(0x66b)],_0x3057d5=Math[_0x3d22bc(0xb65)](Graphics[_0x3d22bc(0x671)]/0x3),_0x27e69a=Math[_0x3d22bc(0xb65)](Graphics[_0x3d22bc(0x671)]/$gameParty[_0x3d22bc(0x14b)]()[_0x3d22bc(0x88e)]),_0x1eb014=Math[_0x3d22bc(0x716)](Math[_0x3d22bc(0x878)](_0x3057d5,_0x27e69a),_0x196433),_0x5bbf68=this['fittingHeight'](VisuMZ[_0x3d22bc(0x8f5)][_0x3d22bc(0x19c)]['BattleLayout'][_0x3d22bc(0x27d)]),_0x175baa=Math['floor']((Graphics[_0x3d22bc(0x671)]-Graphics['width'])/0x2),_0x3e8594=Graphics[_0x3d22bc(0x671)]-_0x175baa,_0xf61f3b=(Math[_0x3d22bc(0xb65)](_0x27e69a*_0x3ca086[_0x3d22bc(0x241)]())+Math['round']((_0x27e69a-_0x1eb014)/0x2))['clamp'](_0x175baa,_0x3e8594-_0x1eb014),_0x1c86de=Math[_0x3d22bc(0xb65)](SceneManager['_scene'][_0x3d22bc(0x197)]['y']-_0x5bbf68);this[_0x3d22bc(0x9d1)](_0xf61f3b,_0x1c86de,_0x1eb014,_0x5bbf68),this[_0x3d22bc(0x821)](),this[_0x3d22bc(0x136)](0x1);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x294)]=function(_0x302af6){const _0x4a3d92=_0x9c6fcf,_0x15d416=SceneManager[_0x4a3d92(0x90f)]['partyCommandWindowRectBorderStyle']();this[_0x4a3d92(0x9d1)](_0x15d416['x'],_0x15d416['y'],_0x15d416[_0x4a3d92(0xac8)],_0x15d416[_0x4a3d92(0x202)]),this[_0x4a3d92(0x821)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x722)]=function(){const _0x272822=_0x9c6fcf;if(this[_0x272822(0x94e)]){const _0x57e4a2=this[_0x272822(0x94e)]['bitmap'],_0x37c18a=this[_0x272822(0xac8)]-0x8,_0x2bb2d6=this['height'],_0x2d4fbd=this['padding'],_0x5786c0=ColorManager[_0x272822(0x486)](),_0x3d17da=ColorManager[_0x272822(0xa03)]();this[_0x272822(0x94e)]['x']=0x4,_0x57e4a2[_0x272822(0xb0f)](_0x37c18a,_0x2bb2d6),_0x57e4a2[_0x272822(0x9e2)](0x0,0x0,_0x37c18a,_0x2d4fbd,_0x3d17da,_0x5786c0,!![]),_0x57e4a2[_0x272822(0x44b)](0x0,_0x2d4fbd,_0x37c18a,_0x2bb2d6-_0x2d4fbd*0x2,_0x5786c0),_0x57e4a2[_0x272822(0x9e2)](0x0,_0x2bb2d6-_0x2d4fbd,_0x37c18a,_0x2d4fbd,_0x5786c0,_0x3d17da,!![]),this['_dimmerSprite'][_0x272822(0x5fa)](0x0,0x0,_0x37c18a,_0x2bb2d6);}},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x31b)]=function(){const _0x19ff56=_0x9c6fcf;if(!this[_0x19ff56(0x4fd)])return;const _0x715134=VisuMZ[_0x19ff56(0x8f5)]['Settings']['ActorCmd'],_0x50ffe5=this[_0x19ff56(0x3f1)]();switch(_0x50ffe5){case'attack':this[_0x19ff56(0x5d0)]($dataSkills[this[_0x19ff56(0x4fd)][_0x19ff56(0x809)]()]);break;case _0x19ff56(0xa23):this[_0x19ff56(0x5d0)]($dataSkills[this[_0x19ff56(0x4fd)][_0x19ff56(0x5d4)]()]);break;case _0x19ff56(0x3c5):const _0x1b768b=_0x715134[_0x19ff56(0xa4e)],_0x3b690a=_0x1b768b['format']($dataSystem[_0x19ff56(0x1b5)][this[_0x19ff56(0x543)]()]);this['_helpWindow']['setText'](_0x3b690a);break;case _0x19ff56(0x7d6):this[_0x19ff56(0x5d0)]($dataSkills[this[_0x19ff56(0x543)]()]);break;case _0x19ff56(0x9d3):this['_helpWindow'][_0x19ff56(0x47d)](_0x715134['HelpItem']);break;case _0x19ff56(0x965):this[_0x19ff56(0x82d)][_0x19ff56(0x47d)](_0x715134[_0x19ff56(0x6a2)]);break;case _0x19ff56(0x57a):this['_helpWindow'][_0x19ff56(0x47d)](_0x715134[_0x19ff56(0x232)]);break;default:this[_0x19ff56(0x82d)][_0x19ff56(0x47d)]('');break;}},Window_ActorCommand[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x96d)]=function(){const _0x272082=_0x9c6fcf;this[_0x272082(0x272)](0x0);if(this[_0x272082(0x4fd)]&&ConfigManager['commandRemember']){const _0x418931=this[_0x272082(0x4fd)]['lastCommandSymbol']();this[_0x272082(0x50b)](_0x418931);if(_0x418931===_0x272082(0x3c5)){const _0xd0e640=this[_0x272082(0x4fd)]['lastBattleSkill']();if(_0xd0e640){const _0xbbb786=this['findSymbolExt'](_0x272082(0x3c5),_0xd0e640['stypeId']);this['select'](_0xbbb786||0x0);}}else{if(_0x418931===_0x272082(0x7d6)){const _0x50d390=this[_0x272082(0x4fd)]['lastBattleSkill']();if(_0x50d390){const _0x320ed6=this[_0x272082(0x67c)](_0x272082(0x7d6),_0x50d390['id']);this[_0x272082(0x830)](_0x320ed6||0x0);}}}}},Window_ActorCommand['prototype'][_0x9c6fcf(0x67c)]=function(_0x51cecb,_0x244d3f){const _0x53c34f=_0x9c6fcf;return this[_0x53c34f(0x9fc)]['findIndex'](_0x561f65=>_0x561f65[_0x53c34f(0x244)]===_0x51cecb&&_0x561f65[_0x53c34f(0xa97)]===_0x244d3f);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x1da)]=Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)],Window_BattleStatus[_0x9c6fcf(0x1ef)]['initialize']=function(_0x51dedc){const _0x132a46=_0x9c6fcf;VisuMZ[_0x132a46(0x8f5)]['Window_BattleStatus_initialize'][_0x132a46(0x7df)](this,_0x51dedc),this[_0x132a46(0x5b0)](),this[_0x132a46(0x6c4)]();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa3f)]=function(){const _0x3d24d1=_0x9c6fcf;if(this[_0x3d24d1(0x991)])return this[_0x3d24d1(0x991)];return this[_0x3d24d1(0x991)]=SceneManager['_scene']['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x9c6fcf(0x1ef)]['initBattleCore']=function(){const _0x315f35=_0x9c6fcf;this[_0x315f35(0x80b)]=this['isFrameVisible']();const _0x4094fa=VisuMZ['BattleCore'][_0x315f35(0x19c)][_0x315f35(0xb17)];_0x4094fa[_0x315f35(0x9de)]&&(this['opacity']=0x0);},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x96a)]=function(){const _0x250e91=_0x9c6fcf,_0x3125a9=VisuMZ[_0x250e91(0x8f5)][_0x250e91(0x19c)][_0x250e91(0xb17)];if(_0x3125a9[_0x250e91(0xab2)])return!![];const _0x268cfd=this[_0x250e91(0xa3f)]();switch(_0x268cfd){case _0x250e91(0x61b):case'border':return!![];break;case _0x250e91(0x295):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus['prototype'][_0x9c6fcf(0x9ec)]=function(){const _0x4b93b4=_0x9c6fcf;return this[_0x4b93b4(0x96a)]()?0x0:0xa;},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x480)]=function(){const _0x536303=_0x9c6fcf,_0x35e646=this[_0x536303(0xa3f)]();switch(_0x35e646){case'list':return 0x1;break;case'xp':case _0x536303(0x7c0):return $gameParty[_0x536303(0x14b)]()[_0x536303(0x88e)];break;case _0x536303(0x295):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x815)]=function(){const _0x3e0923=_0x9c6fcf,_0x1d38ec=this[_0x3e0923(0xa3f)]();switch(_0x1d38ec){case _0x3e0923(0x61b):return Window_StatusBase[_0x3e0923(0x1ef)][_0x3e0923(0x815)][_0x3e0923(0x7df)](this);break;case'default':case'xp':case _0x3e0923(0x7c0):default:return this['innerHeight'];break;}},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7f2)]=function(){const _0x172197=_0x9c6fcf,_0x29fd5a=this[_0x172197(0xa3f)]();switch(_0x29fd5a){case _0x172197(0x61b):return Window_StatusBase[_0x172197(0x1ef)][_0x172197(0x7f2)][_0x172197(0x7df)](this);break;case'default':case'xp':case _0x172197(0x7c0):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x9c6fcf(0x1f8)]=function(){const _0x22e187=_0x9c6fcf;this[_0x22e187(0x96a)]()?Window_StatusBase['prototype'][_0x22e187(0x1f8)][_0x22e187(0x7df)](this):this[_0x22e187(0xa4f)]=0x8;},Window_BattleStatus['prototype'][_0x9c6fcf(0x5f2)]=function(){const _0x1f312e=_0x9c6fcf,_0x363ec2=VisuMZ[_0x1f312e(0x8f5)][_0x1f312e(0x19c)][_0x1f312e(0xb17)];_0x363ec2['StatusWindowSkinFilename']?this['windowskin']=ImageManager[_0x1f312e(0x48e)](_0x363ec2[_0x1f312e(0xab2)]):Window_StatusBase['prototype'][_0x1f312e(0x5f2)][_0x1f312e(0x7df)](this);},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7e2)]=function(_0x5216b0){const _0x4c2d2e=_0x9c6fcf,_0x231268=VisuMZ[_0x4c2d2e(0x8f5)][_0x4c2d2e(0x19c)][_0x4c2d2e(0xb17)];if(_0x231268[_0x4c2d2e(0x74b)])return;Window_StatusBase[_0x4c2d2e(0x1ef)]['drawItemBackground'][_0x4c2d2e(0x7df)](this,_0x5216b0);},Window_BattleStatus[_0x9c6fcf(0x1ef)]['requestRefresh']=function(){const _0x1b4870=_0x9c6fcf;this[_0x1b4870(0x70e)]=!![];},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)]=function(){const _0x597078=_0x9c6fcf;Window_StatusBase[_0x597078(0x1ef)][_0x597078(0x255)][_0x597078(0x7df)](this),this[_0x597078(0x8e1)](),this[_0x597078(0x58e)]();if(this['battleLayoutStyle']()==='border')this['updateBorderStyle']();},Window_BattleStatus['prototype'][_0x9c6fcf(0x8e1)]=function(){const _0x2ffc13=_0x9c6fcf;if($gameTemp[_0x2ffc13(0x9ba)]())this[_0x2ffc13(0x52c)](),this['_requestRefresh']=![],$gameTemp[_0x2ffc13(0x282)]();else this[_0x2ffc13(0x70e)]&&(this['_requestRefresh']=![],this[_0x2ffc13(0x2c7)](),this[_0x2ffc13(0x1dc)]());},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x277)]=function(){const _0x35bdf7=_0x9c6fcf;Window_StatusBase[_0x35bdf7(0x1ef)]['show']['call'](this);if(!$gameSystem[_0x35bdf7(0x95c)]())this[_0x35bdf7(0x2c7)]();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x837)]=function(){const _0x2b670d=_0x9c6fcf;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase[_0x2b670d(0x1ef)][_0x2b670d(0x837)][_0x2b670d(0x7df)](this);},Window_BattleStatus[_0x9c6fcf(0x1ef)]['drawBackgroundRect']=function(_0x4ab8d7){const _0x3410b5=_0x9c6fcf,_0x1bc930=this[_0x3410b5(0xa3f)]();switch(_0x1bc930){case'xp':case _0x3410b5(0x7c0):break;case _0x3410b5(0x295):case'list':case _0x3410b5(0x75f):default:return Window_StatusBase[_0x3410b5(0x1ef)]['drawBackgroundRect']['call'](this,_0x4ab8d7);break;}},VisuMZ['BattleCore'][_0x9c6fcf(0x1c0)]=Window_BattleStatus['prototype'][_0x9c6fcf(0x5cc)],Window_BattleStatus['prototype'][_0x9c6fcf(0x5cc)]=function(_0x344ef9){const _0x1074db=_0x9c6fcf,_0x559225=this[_0x1074db(0xa3f)]();switch(_0x559225){case _0x1074db(0x61b):this[_0x1074db(0x554)](_0x344ef9);break;case'xp':this['drawItemImageXPStyle'](_0x344ef9);break;case _0x1074db(0x7c0):this['drawItemImagePortraitStyle'](_0x344ef9);break;case _0x1074db(0x295):case _0x1074db(0x75f):default:VisuMZ['BattleCore'][_0x1074db(0x1c0)]['call'](this,_0x344ef9);break;}},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x39a)]=function(_0x44686e){const _0x1aabf6=_0x9c6fcf,_0x368070=this[_0x1aabf6(0xa3f)]();if(!$gameSystem[_0x1aabf6(0x95c)]())this[_0x1aabf6(0x7ff)](_0x44686e);switch(_0x368070){case _0x1aabf6(0x61b):this['drawItemStatusListStyle'](_0x44686e);break;case'xp':case'portrait':case _0x1aabf6(0x295):case _0x1aabf6(0x75f):default:this[_0x1aabf6(0x5c5)](_0x44686e);break;}},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x561)]=function(){const _0x5125c0=_0x9c6fcf,_0x1bca40=this['battleLayoutStyle']();if(['xp'][_0x5125c0(0x765)](_0x1bca40)&&!$gameSystem[_0x5125c0(0x95c)]()){this[_0x5125c0(0x9a4)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x5125c0(0x1ef)]['refreshCursor'][_0x5125c0(0x7df)](this);},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7ff)]=function(_0x255859){const _0x319ec9=_0x9c6fcf,_0x33ff2d=this[_0x319ec9(0x23a)](_0x255859)[_0x319ec9(0x338)]();if(!_0x33ff2d)return;const _0x1a2ecd=this[_0x319ec9(0xa3f)](),_0x5339a0=this[_0x319ec9(0x65e)](_0x255859);let _0x513d4d=Math[_0x319ec9(0xb65)](_0x5339a0['x']+_0x5339a0[_0x319ec9(0xac8)]/0x2)+this[_0x319ec9(0xa4f)];[_0x319ec9(0x61b)]['includes'](_0x1a2ecd)&&(_0x513d4d=_0x5339a0['width']/$gameParty[_0x319ec9(0x14b)]()[_0x319ec9(0x88e)],_0x513d4d*=_0x255859,_0x513d4d+=_0x5339a0[_0x319ec9(0xac8)]/$gameParty[_0x319ec9(0x14b)]()[_0x319ec9(0x88e)]/0x2);let _0x1b71c1=Math[_0x319ec9(0xb65)](this[_0x319ec9(0x83f)](_0x255859,_0x33ff2d,_0x5339a0));_0x33ff2d[_0x319ec9(0x7e8)](_0x513d4d,_0x1b71c1),this[_0x319ec9(0x63c)](_0x33ff2d,0x1),_0x33ff2d[_0x319ec9(0x277)](),this[_0x319ec9(0xb59)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x83f)]=function(_0x1bc654,_0x420a50,_0xeb152e){const _0x4a8043=_0x9c6fcf,_0x37ca57=VisuMZ[_0x4a8043(0x8f5)][_0x4a8043(0x19c)][_0x4a8043(0xb17)],_0x5bcb6e=this[_0x4a8043(0xa3f)]();if(_0x5bcb6e==='xp'){const _0x4170e2=_0x37ca57[_0x4a8043(0x28c)];switch(_0x4170e2[_0x4a8043(0x3b9)]()[_0x4a8043(0x4a5)]()){case _0x4a8043(0x3a3):return _0xeb152e[_0x4a8043(0x202)]-_0x420a50[_0x4a8043(0x8a1)]['height']/0x4;break;case _0x4a8043(0x328):const _0x1c7bb5=_0x37ca57['XPActorDefaultHeight'];return(_0xeb152e[_0x4a8043(0x202)]+(_0x420a50[_0x4a8043(0x202)]||_0x1c7bb5))/0x2;break;case _0x4a8043(0x7e1):return 0x0;case _0x4a8043(0x613):default:return this['nameY'](_0xeb152e);break;}}else{if(_0x5bcb6e==='portrait'){}}return _0x420a50[_0x4a8043(0x202)];},Sprite_Name[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x65d)]=function(){return 0x24;},Sprite_Name[_0x9c6fcf(0x1ef)]['redraw']=function(){const _0x44dad8=_0x9c6fcf,_0x2f76d3=this[_0x44dad8(0x613)](),_0x451d96=this['bitmapWidth'](),_0x22e955=this[_0x44dad8(0x65d)]();this[_0x44dad8(0xb4e)](),this[_0x44dad8(0x96b)][_0x44dad8(0x4ec)](),this[_0x44dad8(0x96b)][_0x44dad8(0x76b)](_0x2f76d3,0x4,0x0,_0x451d96,_0x22e955,_0x44dad8(0x852));},Bitmap[_0x9c6fcf(0x1ef)]['drawTextTopAligned']=function(_0xd01434,_0x5e75a9,_0x4778fe,_0x59602e,_0x12a53b,_0x5d1210){const _0x361962=_0x9c6fcf;TextManager['parseLocalizedText']&&(_0xd01434=TextManager[_0x361962(0x8a3)](_0xd01434));const _0x10b688=this[_0x361962(0xa5a)],_0x47622c=_0x10b688[_0x361962(0xb47)];_0x59602e=_0x59602e||0xffffffff;let _0x5e2717=_0x5e75a9,_0x4b95b3=Math[_0x361962(0xb65)](_0x4778fe+0x18/0x2+this['fontSize']*0.35);_0x5d1210==='center'&&(_0x5e2717+=_0x59602e/0x2),_0x5d1210===_0x361962(0x144)&&(_0x5e2717+=_0x59602e),_0x10b688[_0x361962(0x8a8)](),_0x10b688[_0x361962(0x389)]=this['_makeFontNameText'](),_0x10b688[_0x361962(0x192)]=_0x5d1210,_0x10b688[_0x361962(0x9a6)]=_0x361962(0xa81),_0x10b688[_0x361962(0xb47)]=0x1,this[_0x361962(0x20f)](_0xd01434,_0x5e2717,_0x4b95b3,_0x59602e),_0x10b688[_0x361962(0xb47)]=_0x47622c,this[_0x361962(0x4ba)](_0xd01434,_0x5e2717,_0x4b95b3,_0x59602e),_0x10b688[_0x361962(0x97c)](),this[_0x361962(0x868)][_0x361962(0x255)]();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8f2)]=function(_0xf1ecb8){const _0x5cb1e4=_0x9c6fcf;return this[_0x5cb1e4(0x9f7)](_0xf1ecb8)-this[_0x5cb1e4(0x38e)]();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x554)]=function(_0xc9169b){const _0x198b1a=_0x9c6fcf;if(!VisuMZ['BattleCore']['Settings'][_0x198b1a(0xb17)][_0x198b1a(0x569)])return;const _0x116a83=this['actor'](_0xc9169b),_0x43a881=this['itemRect'](_0xc9169b);_0x43a881['width']=ImageManager['faceWidth'],_0x43a881[_0x198b1a(0x202)]-=0x2,this[_0x198b1a(0x9dd)](_0x116a83,_0x43a881['x']+0x1,_0x43a881['y']+0x1,_0x43a881[_0x198b1a(0xac8)],_0x43a881[_0x198b1a(0x202)]);},Window_BattleStatus['prototype'][_0x9c6fcf(0xb11)]=function(_0x50e46e){const _0x1401d3=_0x9c6fcf,_0x1cbb7b=VisuMZ[_0x1401d3(0x8f5)]['Settings'][_0x1401d3(0xb17)],_0xaa93c4=$dataSystem[_0x1401d3(0xab9)]?0x4:0x3,_0x9fadee=_0xaa93c4*0x80+(_0xaa93c4-0x1)*0x8+0x4,_0x40b3a9=this['actor'](_0x50e46e),_0x484764=this[_0x1401d3(0x65e)](_0x50e46e);let _0x2dbe13=_0x484764['x']+this[_0x1401d3(0xa4f)];_0x1cbb7b[_0x1401d3(0x569)]?_0x2dbe13=_0x484764['x']+ImageManager[_0x1401d3(0x638)]+0x8:_0x2dbe13+=ImageManager[_0x1401d3(0x12c)];const _0x1972a8=Math[_0x1401d3(0xb65)](Math[_0x1401d3(0x878)](_0x484764['x']+_0x484764['width']-_0x9fadee,_0x2dbe13)),_0x3af821=Math[_0x1401d3(0xb65)](_0x484764['y']+(_0x484764[_0x1401d3(0x202)]-Sprite_Name[_0x1401d3(0x1ef)][_0x1401d3(0x65d)]())/0x2),_0x1d21e2=Math[_0x1401d3(0xb65)](_0x1972a8-ImageManager[_0x1401d3(0x12c)]/0x2-0x4),_0x714819=Math['round'](_0x484764['y']+(_0x484764[_0x1401d3(0x202)]-ImageManager[_0x1401d3(0xb3c)])/0x2+ImageManager[_0x1401d3(0xb3c)]/0x2);let _0x3d1909=_0x1972a8+0x88;const _0x1f9e7e=_0x3af821;this[_0x1401d3(0x6df)](_0x40b3a9,_0x1972a8-0x4+(_0x1cbb7b[_0x1401d3(0x68c)]||0x0),_0x3af821+(_0x1cbb7b[_0x1401d3(0x422)]||0x0)),this['placeActorName'](_0x40b3a9,_0x1972a8+(_0x1cbb7b[_0x1401d3(0x694)]||0x0),_0x3af821+(_0x1cbb7b['NameOffsetY']||0x0)),this[_0x1401d3(0x390)](_0x40b3a9,_0x1d21e2+(_0x1cbb7b[_0x1401d3(0x34e)]||0x0),_0x714819+(_0x1cbb7b[_0x1401d3(0x4de)]||0x0)),this[_0x1401d3(0x1d4)](_0x40b3a9,'hp',_0x3d1909+0x88*0x0+(_0x1cbb7b['HpGaugeOffsetX']||0x0),_0x1f9e7e+(_0x1cbb7b[_0x1401d3(0xa86)]||0x0)),this[_0x1401d3(0x1d4)](_0x40b3a9,'mp',_0x3d1909+0x88*0x1+(_0x1cbb7b[_0x1401d3(0x346)]||0x0),_0x1f9e7e+(_0x1cbb7b[_0x1401d3(0x57e)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x1401d3(0x1d4)](_0x40b3a9,'tp',_0x3d1909+0x88*0x2+(_0x1cbb7b[_0x1401d3(0xa1d)]||0x0),_0x1f9e7e+(_0x1cbb7b[_0x1401d3(0xa74)]||0x0));},Window_BattleStatus[_0x9c6fcf(0x1ef)]['drawItemImageXPStyle']=function(_0x4bcf72){const _0x52415f=_0x9c6fcf;if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore'][_0x52415f(0x1c0)][_0x52415f(0x7df)](this,_0x4bcf72);},Window_BattleStatus['prototype'][_0x9c6fcf(0x5c5)]=function(_0x3c4c2f){const _0x3b8a3d=_0x9c6fcf,_0x19d50e=VisuMZ[_0x3b8a3d(0x8f5)]['Settings'][_0x3b8a3d(0xb17)],_0x29a1df=this['actor'](_0x3c4c2f),_0x66ced6=this[_0x3b8a3d(0x65e)](_0x3c4c2f),_0x19330b=Math['round'](_0x66ced6['x']+(_0x66ced6['width']-0x80)/0x2),_0x278ae9=this[_0x3b8a3d(0x8f2)](_0x66ced6);let _0x2cad39=_0x19330b-ImageManager['iconWidth']/0x2-0x4,_0x100b41=_0x278ae9+ImageManager[_0x3b8a3d(0xb3c)]/0x2;_0x2cad39-ImageManager[_0x3b8a3d(0x12c)]/0x2<_0x66ced6['x']&&(_0x2cad39=_0x19330b+ImageManager[_0x3b8a3d(0x12c)]/0x2-0x4,_0x100b41=_0x278ae9-ImageManager[_0x3b8a3d(0xb3c)]/0x2);const _0x321a90=_0x19330b,_0x5aaf5c=this['basicGaugesY'](_0x66ced6);this['placeTimeGauge'](_0x29a1df,_0x19330b+(_0x19d50e['TpbGaugeOffsetX']||0x0),_0x278ae9+(_0x19d50e[_0x3b8a3d(0x422)]||0x0)),this[_0x3b8a3d(0xb1e)](_0x29a1df,_0x19330b+(_0x19d50e[_0x3b8a3d(0x694)]||0x0),_0x278ae9+(_0x19d50e[_0x3b8a3d(0x330)]||0x0)),this[_0x3b8a3d(0x390)](_0x29a1df,_0x2cad39+(_0x19d50e[_0x3b8a3d(0x34e)]||0x0),_0x100b41+(_0x19d50e[_0x3b8a3d(0x4de)]||0x0)),this[_0x3b8a3d(0x1d4)](_0x29a1df,'hp',_0x321a90+(_0x19d50e['HpGaugeOffsetX']||0x0),_0x5aaf5c+(_0x19d50e[_0x3b8a3d(0xa86)]||0x0)),this['placeGauge'](_0x29a1df,'mp',_0x321a90+(_0x19d50e['MpGaugeOffsetX']||0x0),_0x5aaf5c+this[_0x3b8a3d(0x38e)]()+(_0x19d50e[_0x3b8a3d(0x57e)]||0x0)),$dataSystem[_0x3b8a3d(0xab9)]&&this[_0x3b8a3d(0x1d4)](_0x29a1df,'tp',_0x321a90+(_0x19d50e['TpGaugeOffsetX']||0x0),_0x5aaf5c+this[_0x3b8a3d(0x38e)]()*0x2+(_0x19d50e['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x478)]=function(_0x148369){const _0x41bfe7=_0x9c6fcf;if(!VisuMZ[_0x41bfe7(0x8f5)]['Settings'][_0x41bfe7(0xb17)][_0x41bfe7(0x29d)])return![];if(_0x148369[_0x41bfe7(0x763)]())return!![];return Imported[_0x41bfe7(0x9f2)]&&_0x148369[_0x41bfe7(0x34c)]();},Game_Actor[_0x9c6fcf(0x1ef)]['getBattlePortraitOffsetX']=function(){const _0x18e231=_0x9c6fcf;if(this[_0x18e231(0x23a)]()[_0x18e231(0x468)][_0x18e231(0x3c6)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x18e231(0x23a)]()[_0x18e231(0x468)][_0x18e231(0x3c6)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5ca)]=function(){const _0x3df155=_0x9c6fcf;if(this[_0x3df155(0x23a)]()[_0x3df155(0x468)][_0x3df155(0x3c6)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3df155(0x23a)]()[_0x3df155(0x468)][_0x3df155(0x3c6)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x9c6fcf(0x1ef)]['drawItemImagePortraitStyle']=function(_0x364ca3){const _0x4e7f98=_0x9c6fcf,_0x2640b9=this[_0x4e7f98(0x23a)](_0x364ca3);if(this['showPortraits'](_0x2640b9)){const _0x47b25b=_0x4e7f98(0x436)[_0x4e7f98(0x9da)](_0x2640b9[_0x4e7f98(0x42f)]()),_0x5ab2a0=this['createInnerPortrait'](_0x47b25b,Sprite),_0x328015=_0x2640b9[_0x4e7f98(0x953)]();_0x328015!==''?_0x5ab2a0['bitmap']=ImageManager[_0x4e7f98(0x1e0)](_0x328015):_0x5ab2a0[_0x4e7f98(0x96b)]=ImageManager['_emptyBitmap'];const _0x4f098a=this[_0x4e7f98(0x65e)](_0x364ca3);_0x5ab2a0['anchor']['x']=0.5,_0x5ab2a0[_0x4e7f98(0x62b)]['y']=0x1;let _0x995010=Math['round'](_0x4f098a['x']+_0x4f098a['width']/0x2)+this[_0x4e7f98(0xa4f)];_0x995010+=_0x2640b9[_0x4e7f98(0x9af)]();let _0x5458f0=Math[_0x4e7f98(0xb65)](this[_0x4e7f98(0x202)]);_0x5458f0+=_0x2640b9['getBattlePortraitOffsetY'](),_0x5ab2a0[_0x4e7f98(0x9d1)](_0x995010,_0x5458f0);const _0xe2a696=VisuMZ[_0x4e7f98(0x8f5)][_0x4e7f98(0x19c)][_0x4e7f98(0xb17)][_0x4e7f98(0x637)];_0x5ab2a0[_0x4e7f98(0x4bc)]['x']=_0xe2a696,_0x5ab2a0[_0x4e7f98(0x4bc)]['y']=_0xe2a696,_0x5ab2a0[_0x4e7f98(0x277)]();}else{const _0x3c9d07=this[_0x4e7f98(0x518)](_0x364ca3);this[_0x4e7f98(0x9dd)](_0x2640b9,_0x3c9d07['x'],_0x3c9d07['y'],_0x3c9d07[_0x4e7f98(0xac8)],_0x3c9d07[_0x4e7f98(0x202)]);}},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5b3)]=function(_0x532489,_0x2b36b2){const _0x3dd50c=_0x9c6fcf,_0x100d76=this[_0x3dd50c(0x6be)];if(_0x100d76[_0x532489])return _0x100d76[_0x532489];else{const _0x134e35=new _0x2b36b2();return _0x100d76[_0x532489]=_0x134e35,this[_0x3dd50c(0x604)](_0x134e35),this['addChildToBack'](this[_0x3dd50c(0x391)]),_0x134e35;}},Window_BattleStatus['prototype'][_0x9c6fcf(0x54a)]=function(){const _0x564f8a=_0x9c6fcf;this[_0x564f8a(0x3cc)](),this[_0x564f8a(0x86b)](),Window_StatusBase[_0x564f8a(0x1ef)][_0x564f8a(0x54a)][_0x564f8a(0x7df)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3cc)]=function(){const _0x1f991a=_0x9c6fcf;this[_0x1f991a(0x391)]=new Sprite(),this[_0x1f991a(0x391)][_0x1f991a(0x714)]=[new PIXI['filters'][(_0x1f991a(0xb39))]()],this[_0x1f991a(0x391)]['filterArea']=new Rectangle(),this[_0x1f991a(0x391)][_0x1f991a(0x9d1)](this[_0x1f991a(0x60f)],this[_0x1f991a(0x60f)]),this[_0x1f991a(0x210)](this[_0x1f991a(0x391)]);},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x86b)]=function(){const _0xe2f664=_0x9c6fcf;this[_0xe2f664(0x846)]=new Sprite(),this[_0xe2f664(0x210)](this['_effectsContainer']);},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb59)]=function(){const _0x59a1c8=_0x9c6fcf;this[_0x59a1c8(0x846)]&&this[_0x59a1c8(0x210)](this['_effectsContainer']);},Window_BattleStatus[_0x9c6fcf(0x1ef)]['_createDamageContainer']=function(){const _0x5b1b7b=_0x9c6fcf;this['_damageContainer']=new Sprite(),this[_0x5b1b7b(0x210)](this[_0x5b1b7b(0x64b)]);},Window_BattleStatus['prototype'][_0x9c6fcf(0x842)]=function(){const _0xe9900a=_0x9c6fcf;this[_0xe9900a(0x97a)]=new Sprite();for(let _0x4930b4=0x0;_0x4930b4<0x9;_0x4930b4++){this[_0xe9900a(0x97a)][_0xe9900a(0x210)](new Sprite());}this[_0xe9900a(0x391)]['addChild'](this[_0xe9900a(0x97a)]);},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x311)]=function(){const _0x30bc6d=_0x9c6fcf;Window_StatusBase['prototype'][_0x30bc6d(0x311)][_0x30bc6d(0x7df)](this),this[_0x30bc6d(0x2f8)]();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2f8)]=function(){const _0xae9ded=_0x9c6fcf,_0x12ef19=this[_0xae9ded(0x60f)];this[_0xae9ded(0x391)][_0xae9ded(0x9d1)](_0x12ef19,_0x12ef19),this['_cursorArea']['x']=_0x12ef19-this[_0xae9ded(0x25e)]['x'],this[_0xae9ded(0x391)]['y']=_0x12ef19-this[_0xae9ded(0x25e)]['y'],this['innerWidth']>0x0&&this[_0xae9ded(0x546)]>0x0?this[_0xae9ded(0x391)][_0xae9ded(0x9cb)]=this['isOpen']():this[_0xae9ded(0x391)][_0xae9ded(0x9cb)]=![];},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x476)]=function(){const _0x39ff93=_0x9c6fcf;Window_StatusBase['prototype'][_0x39ff93(0x476)]['call'](this),this[_0x39ff93(0x159)]();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x159)]=function(){const _0x21df2d=_0x9c6fcf,_0x1321e8=this[_0x21df2d(0x391)][_0x21df2d(0x509)]['apply'](new Point(0x0,0x0)),_0x47afbc=this[_0x21df2d(0x391)]['filterArea'];_0x47afbc['x']=_0x1321e8['x']+this['origin']['x'],_0x47afbc['y']=_0x1321e8['y']+this['origin']['y'],_0x47afbc[_0x21df2d(0xac8)]=this[_0x21df2d(0xac9)],_0x47afbc[_0x21df2d(0x202)]=this[_0x21df2d(0x546)];},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1c9)]=function(_0x276320){const _0x43a408=_0x9c6fcf;if(this[_0x43a408(0xa3f)]()!==_0x43a408(0x7c0))return;this['drawItemImagePortraitStyle'](_0x276320[_0x43a408(0x241)]());},Window_BattleStatus['prototype']['addDamageSprite']=function(_0x4ef18e,_0x4440e7){const _0x5bec13=_0x9c6fcf;if(!this[_0x5bec13(0x64b)])return;if(!_0x4ef18e)return;if(!_0x4440e7)return;const _0x2dad23=this[_0x5bec13(0x65e)](_0x4440e7['index']());_0x2dad23['x']+=_0x2dad23[_0x5bec13(0xac8)]/0x2+this[_0x5bec13(0xa4f)],_0x4ef18e['x']=_0x2dad23['x'],_0x4ef18e['y']=_0x2dad23['y'],this[_0x5bec13(0x64b)][_0x5bec13(0x210)](_0x4ef18e);},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8a6)]=function(_0x57fa57){const _0xd80dc9=_0x9c6fcf;if(!this[_0xd80dc9(0x64b)])return;if(!_0x57fa57)return;this[_0xd80dc9(0x64b)][_0xd80dc9(0x68d)](_0x57fa57);},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3ca)]=function(){const _0x14ec33=_0x9c6fcf;if(!this[_0x14ec33(0x248)]())return;if(!this[_0x14ec33(0x430)])this[_0x14ec33(0x55e)]();this[_0x14ec33(0xb3d)](),this[_0x14ec33(0x26f)]();},Window_BattleStatus[_0x9c6fcf(0x1ef)]['isBorderStylePortraitShown']=function(){const _0x811927=_0x9c6fcf;if(this[_0x811927(0x788)]!==Window_BattleStatus)return![];if(!SceneManager[_0x811927(0x319)]())return![];return VisuMZ[_0x811927(0x8f5)][_0x811927(0x19c)][_0x811927(0xb17)][_0x811927(0x855)];},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x55e)]=function(){const _0xc8c0ef=_0x9c6fcf;this[_0xc8c0ef(0x430)]=new Sprite();const _0xa7c2e0=SceneManager[_0xc8c0ef(0x90f)],_0x5f5b9d=_0xa7c2e0[_0xc8c0ef(0x621)][_0xc8c0ef(0x9c4)](_0xa7c2e0[_0xc8c0ef(0x185)]);_0xa7c2e0[_0xc8c0ef(0x63c)](this[_0xc8c0ef(0x430)],_0x5f5b9d),this[_0xc8c0ef(0x430)][_0xc8c0ef(0x62b)]['x']=0.5,this[_0xc8c0ef(0x430)][_0xc8c0ef(0x62b)]['y']=0x1;const _0x3a15d6=VisuMZ[_0xc8c0ef(0x8f5)][_0xc8c0ef(0x19c)][_0xc8c0ef(0xb17)][_0xc8c0ef(0x8bc)];this[_0xc8c0ef(0x430)]['scale']['x']=_0x3a15d6,this['_borderPortraitSprite']['scale']['y']=_0x3a15d6,this['_borderPortraitSprite']['y']=this['y']+this[_0xc8c0ef(0x202)],this[_0xc8c0ef(0x63f)]=0x0;},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x35e)]=function(){const _0x1511b6=_0x9c6fcf;return BattleManager[_0x1511b6(0x227)]();},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb3d)]=function(){const _0x6c8af0=_0x9c6fcf;this[_0x6c8af0(0x430)][_0x6c8af0(0x9cb)]=this['isBorderPortraitSpriteVisible']();const _0x510e9f=BattleManager['actor'](),_0x5f512a=_0x510e9f?_0x510e9f[_0x6c8af0(0x953)]()||'':'';if(_0x510e9f===this['_borderPortraitSprite'][_0x6c8af0(0x23a)]&&_0x5f512a===this[_0x6c8af0(0x430)][_0x6c8af0(0x8b1)])return;this[_0x6c8af0(0x430)]['actor']=_0x510e9f||this[_0x6c8af0(0x430)][_0x6c8af0(0x23a)],this[_0x6c8af0(0x430)][_0x6c8af0(0x8b1)]=_0x5f512a;if(!_0x510e9f)return;else{if(_0x5f512a===''){this[_0x6c8af0(0x430)]['bitmap']=ImageManager[_0x6c8af0(0x68e)],this[_0x6c8af0(0x430)][_0x6c8af0(0x8b1)]='';return;}else{const _0x4fca7d=ImageManager[_0x6c8af0(0x1e0)](_0x5f512a);this['_borderPortraitSprite'][_0x6c8af0(0x888)]=0x0,_0x4fca7d[_0x6c8af0(0x2f2)](this[_0x6c8af0(0x29a)][_0x6c8af0(0x43b)](this,_0x4fca7d));}}},Window_BattleStatus[_0x9c6fcf(0x1ef)]['processBorderActor']=function(_0x1dc0c1){const _0x472302=_0x9c6fcf;this['_borderPortraitDuration']=0x14,this[_0x472302(0x430)]['bitmap']=_0x1dc0c1;SceneManager[_0x472302(0x90f)][_0x472302(0x9b1)]()?(this[_0x472302(0x430)]['x']=0x0,this['_borderPortraitTargetX']=Math['ceil'](_0x1dc0c1[_0x472302(0xac8)]/0x2)):(this[_0x472302(0x430)]['x']=this[_0x472302(0xac8)],this['_borderPortraitTargetX']=this[_0x472302(0xac8)]*0x3/0x4);this['_borderPortraitSprite']['opacity']=0x0,this[_0x472302(0x430)]['y']=this['y']+this[_0x472302(0x202)];const _0x162518=BattleManager[_0x472302(0x23a)]();_0x162518&&(this[_0x472302(0x2d8)]+=_0x162518[_0x472302(0x9af)](),this['_borderPortraitSprite']['y']+=_0x162518[_0x472302(0x5ca)]());},Window_BattleStatus['prototype'][_0x9c6fcf(0x26f)]=function(){const _0x11646d=_0x9c6fcf;if(this[_0x11646d(0x63f)]>0x0){const _0x381def=this['_borderPortraitDuration'],_0x33a54e=this[_0x11646d(0x430)];_0x33a54e['x']=(_0x33a54e['x']*(_0x381def-0x1)+this[_0x11646d(0x2d8)])/_0x381def,_0x33a54e[_0x11646d(0x888)]=(_0x33a54e[_0x11646d(0x888)]*(_0x381def-0x1)+0xff)/_0x381def,this['_borderPortraitDuration']--;}},Window_BattleStatus['prototype']['updateEffectContainers']=function(){const _0x338b18=_0x9c6fcf;return;this[_0x338b18(0x846)]&&(this[_0x338b18(0x846)]['x']=this['x'],this[_0x338b18(0x846)]['y']=this['y']),this[_0x338b18(0x64b)]&&(this[_0x338b18(0x64b)]['x']=this['x'],this[_0x338b18(0x64b)]['y']=this['y']);},Window_BattleStatus['prototype']['createAttachmentSprites']=function(){const _0x1a5157=_0x9c6fcf,_0x5025e1=VisuMZ[_0x1a5157(0x8f5)][_0x1a5157(0x19c)][_0x1a5157(0xb17)];if(_0x5025e1['StatusWindowAttachmentBack']){const _0xa60f7b=new Sprite();_0xa60f7b[_0x1a5157(0x96b)]=ImageManager['loadSystem'](_0x5025e1[_0x1a5157(0xb48)]),_0xa60f7b['x']=_0x5025e1['StatusWindowAttachmentBackOffsetX']||0x0,_0xa60f7b['y']=_0x5025e1['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x1a5157(0x604)](_0xa60f7b),this[_0x1a5157(0x85e)]=_0xa60f7b;}if(_0x5025e1[_0x1a5157(0x3e5)]){const _0x1296b6=new Sprite();_0x1296b6[_0x1a5157(0x96b)]=ImageManager[_0x1a5157(0x48e)](_0x5025e1[_0x1a5157(0x3e5)]),_0x1296b6['x']=_0x5025e1[_0x1a5157(0x7e0)]||0x0,_0x1296b6['y']=_0x5025e1[_0x1a5157(0x9ea)]||0x0,this[_0x1a5157(0x210)](_0x1296b6),this[_0x1a5157(0x18c)]=_0x1296b6;}},Window_BattleStatus[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1dc)]=function(){const _0x252450=_0x9c6fcf;this[_0x252450(0x18c)]&&this[_0x252450(0x210)](this[_0x252450(0x18c)]),this[_0x252450(0x85e)]&&this[_0x252450(0x604)](this[_0x252450(0x85e)]);},Window_BattleActor[_0x9c6fcf(0x1ef)]['isCurrentItemEnabled']=function(){const _0x2dc19d=_0x9c6fcf;return this[_0x2dc19d(0x73c)]();},Window_BattleActor['prototype'][_0x9c6fcf(0x73c)]=function(){const _0x2f6a80=_0x9c6fcf,_0x5ceb6f=BattleManager['inputtingAction']();if(!_0x5ceb6f)return!![];if(!_0x5ceb6f[_0x2f6a80(0x9d3)]())return!![];const _0x2cb572=this[_0x2f6a80(0x23a)](this[_0x2f6a80(0x241)]()),_0x3cd37b=_0x5ceb6f[_0x2f6a80(0x9d3)]()['note'];if(_0x5ceb6f['isForNotUser']()){if(_0x2cb572===BattleManager[_0x2f6a80(0x23a)]())return![];}if(_0x5ceb6f[_0x2f6a80(0xa5b)]()){if(!_0x2cb572['isDead']())return![];}if(_0x5ceb6f[_0x2f6a80(0x858)]()){if(!_0x2cb572[_0x2f6a80(0x69e)]())return![];}return!![];},Window_BattleActor['prototype'][_0x9c6fcf(0xae8)]=function(_0x4bae2e){const _0x219bea=_0x9c6fcf;this[_0x219bea(0x8fc)]=_0x4bae2e;},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleActor_processTouch']=Window_BattleActor['prototype']['processTouch'],Window_BattleActor['prototype'][_0x9c6fcf(0x7d0)]=function(){const _0x4d94e7=_0x9c6fcf;Window_BattleStatus[_0x4d94e7(0x1ef)][_0x4d94e7(0x7d0)][_0x4d94e7(0x7df)](this),this['_enemyWindowMode']?this['processEnemyModeTouchBattleCore']():VisuMZ['BattleCore']['Window_BattleActor_processTouch'][_0x4d94e7(0x7df)](this);},Window_BattleActor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x21d)]=function(){const _0x2854b8=_0x9c6fcf,_0x1a31bf=SceneManager[_0x2854b8(0x90f)]['_enemyWindow'];if(!_0x1a31bf)return;this['_doubleTouch']=![];const _0x65e82b=this[_0x2854b8(0x22b)]();if(_0x65e82b>=0x0){this[_0x2854b8(0x830)](_0x65e82b);if(TouchInput[_0x2854b8(0x867)]()){const _0x25d5a2=$gameParty[_0x2854b8(0x90e)]()[_0x65e82b],_0x37118b=_0x1a31bf['_enemies'][_0x2854b8(0x9c4)](_0x25d5a2);_0x37118b>=0x0&&(_0x1a31bf[_0x2854b8(0x830)](_0x37118b),_0x1a31bf['processOk']());}}},Window_BattleActor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1b7)]=function(){const _0x5108d3=_0x9c6fcf;this['_enemyWindowMode']&&(this[_0x5108d3(0x8fb)]++,this[_0x5108d3(0x313)]=!![]);const _0x1e924d=Window_BattleStatus[_0x5108d3(0x1ef)]['_makeCursorAlpha'][_0x5108d3(0x7df)](this);return this[_0x5108d3(0x8fc)]&&(this[_0x5108d3(0x313)]=![]),_0x1e924d;},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x60b)]=Window_BattleActor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x277)],Window_BattleActor['prototype'][_0x9c6fcf(0x277)]=function(){const _0x193e1d=_0x9c6fcf;VisuMZ[_0x193e1d(0x8f5)][_0x193e1d(0x60b)][_0x193e1d(0x7df)](this);const _0x42d79f=BattleManager[_0x193e1d(0x356)]();if(_0x42d79f){const _0x5877a3=$gameParty[_0x193e1d(0x3b8)]();_0x42d79f['canSingleOrMultipleSelect']()&&_0x5877a3[_0x193e1d(0x88e)]>0x1&&this['setHandler']('pagedown',this['selectAllActors'][_0x193e1d(0x43b)](this));}},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xb54)]=Window_BattleActor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x837)],Window_BattleActor[_0x9c6fcf(0x1ef)]['hide']=function(){const _0x47df11=_0x9c6fcf;VisuMZ['BattleCore']['Window_BattleActor_hide']['call'](this),delete this['_handlers']['pageup'],delete this[_0x47df11(0x63e)]['pagedown'];},Window_BattleActor[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa19)]=function(){const _0x13737f=_0x9c6fcf,_0xe28936=BattleManager[_0x13737f(0x356)]();if(_0xe28936)_0xe28936[_0x13737f(0x767)](_0x13737f(0xab4));this['processOk']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x782)]=Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)],Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(_0x4d30ce){const _0x526812=_0x9c6fcf;this['_lastEnemy']=null,VisuMZ[_0x526812(0x8f5)][_0x526812(0x782)][_0x526812(0x7df)](this,_0x4d30ce);if(Imported[_0x526812(0x3a8)]){if(VisuMZ['AggroControlSystem'][_0x526812(0x14c)]<1.12){let _0x327913='';_0x327913+=_0x526812(0xac4),_0x327913+=_0x526812(0x1bd),_0x327913+=_0x526812(0x5d3),alert(_0x327913),SceneManager[_0x526812(0x2ee)]();}}},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x480)]=function(){return this['maxItems']();},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x277)],Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x277)]=function(){const _0x18ae61=_0x9c6fcf;VisuMZ[_0x18ae61(0x8f5)][_0x18ae61(0x5e8)]['call'](this),this['y']=Graphics['height']*0xa,this['meetsSelectFrontviewActorConditions']()&&this[_0x18ae61(0x3e1)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x7fb)]=Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x837)],Window_BattleEnemy['prototype']['hide']=function(){const _0x148ea2=_0x9c6fcf;VisuMZ[_0x148ea2(0x8f5)][_0x148ea2(0x7fb)][_0x148ea2(0x7df)](this),$gameParty[_0x148ea2(0x830)](null),delete this[_0x148ea2(0x63e)][_0x148ea2(0xb58)],delete this[_0x148ea2(0x63e)][_0x148ea2(0x16c)];},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa02)]=function(){const _0x5efbcc=_0x9c6fcf;let _0x2e63f6=$gameTroop[_0x5efbcc(0x3b8)]();const _0x131ae5=BattleManager[_0x5efbcc(0x356)]();if(_0x131ae5){_0x131ae5['canSingleOrMultipleSelect']()&&_0x2e63f6[_0x5efbcc(0x88e)]>0x1&&this[_0x5efbcc(0x1b6)](_0x5efbcc(0xb58),this[_0x5efbcc(0x5b8)]['bind'](this));if(_0x131ae5['isForAnyone']()){const _0x5257ed=$gameParty[_0x5efbcc(0x3b8)]();_0x2e63f6=_0x2e63f6[_0x5efbcc(0x312)](_0x5257ed),_0x131ae5['canSingleOrMultipleSelect']()&&_0x5257ed['length']>0x1&&this[_0x5efbcc(0x1b6)](_0x5efbcc(0x16c),this[_0x5efbcc(0xa19)]['bind'](this));}}return _0x2e63f6;},Window_BattleEnemy['prototype'][_0x9c6fcf(0x2c7)]=function(){const _0x2970b2=_0x9c6fcf;this[_0x2970b2(0x9a1)]=this[_0x2970b2(0xa02)](),this[_0x2970b2(0xad7)](),Window_Selectable['prototype'][_0x2970b2(0x2c7)][_0x2970b2(0x7df)](this);},Window_BattleEnemy['prototype'][_0x9c6fcf(0xad7)]=function(){const _0x4ba9fd=_0x9c6fcf;this['_enemies'][_0x4ba9fd(0xa79)]((_0x3ff61e,_0x5c026f)=>{const _0x4aab9e=_0x4ba9fd;if(_0x3ff61e['isActor']()!==_0x5c026f[_0x4aab9e(0x552)]()){if(_0x3ff61e['isEnemy']())return-0x1;if(_0x5c026f[_0x4aab9e(0x3fd)]())return 0x1;}if(_0x3ff61e[_0x4aab9e(0x552)]()&&_0x5c026f['isActor']())return _0x3ff61e[_0x4aab9e(0x241)]()-_0x5c026f[_0x4aab9e(0x241)]();return _0x3ff61e[_0x4aab9e(0x338)]()[_0x4aab9e(0x761)]===_0x5c026f['battler']()[_0x4aab9e(0x761)]?_0x3ff61e['battler']()[_0x4aab9e(0x46a)]-_0x5c026f[_0x4aab9e(0x338)]()['_baseY']:_0x3ff61e[_0x4aab9e(0x338)]()[_0x4aab9e(0x761)]-_0x5c026f[_0x4aab9e(0x338)]()[_0x4aab9e(0x761)];}),SceneManager[_0x4ba9fd(0x980)]()&&this['_enemies'][_0x4ba9fd(0x477)]();},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x596)]=function(){const _0x4dda75=_0x9c6fcf,_0x130ea9=VisuMZ[_0x4dda75(0x8f5)][_0x4dda75(0x19c)]['Enemy'];_0x130ea9['LastSelected']?this[_0x4dda75(0x75c)]():this['autoSelectPriority']();},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x75c)]=function(){const _0x59c082=_0x9c6fcf,_0xdbd464=BattleManager[_0x59c082(0x356)]();if(_0xdbd464&&_0xdbd464[_0x59c082(0xb2e)]()){if(_0xdbd464[_0x59c082(0x231)]()){if(this[_0x59c082(0x5cb)]&&this[_0x59c082(0x9a1)][_0x59c082(0x765)](this[_0x59c082(0x5cb)])){const _0x4a9228=this[_0x59c082(0x9a1)][_0x59c082(0x9c4)](this['_lastActor']);return this['forceSelect'](_0x4a9228);}else return this[_0x59c082(0x33c)]();}}if(this[_0x59c082(0x270)]&&this['_enemies'][_0x59c082(0x765)](this['_lastEnemy'])){const _0x1883fb=this[_0x59c082(0x9a1)][_0x59c082(0x9c4)](this[_0x59c082(0x270)]);this['forceSelect'](_0x1883fb);}else this[_0x59c082(0x33c)]();},Window_BattleEnemy[_0x9c6fcf(0x1ef)]['autoSelectPriority']=function(){const _0x37ce80=_0x9c6fcf,_0x2e5839=BattleManager['inputtingAction']();if(_0x2e5839&&_0x2e5839[_0x37ce80(0xb2e)]()){const _0x5caf85=$gameParty[_0x37ce80(0x3b8)]()[0x0];let _0x27ba15=this[_0x37ce80(0x9a1)]['indexOf'](_0x5caf85);const _0x2b27eb=_0x2e5839['item']()[_0x37ce80(0x5b7)];if(_0x2b27eb[_0x37ce80(0x3c6)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x37ce80(0x272)](_0x27ba15);return;}else{if(_0x2b27eb[_0x37ce80(0x3c6)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this['forceSelect'](_0x27ba15-0x1);return;}}}const _0x42d8bf=VisuMZ[_0x37ce80(0x8f5)][_0x37ce80(0x19c)][_0x37ce80(0x7b3)];let _0x331a39=![];$gameSystem['isSideView']()?_0x331a39=_0x42d8bf['SideviewSelect']:_0x331a39=_0x42d8bf[_0x37ce80(0x481)],this[_0x37ce80(0x272)](_0x331a39?this[_0x37ce80(0x229)]()-0x1:0x0);},Window_BattleEnemy['prototype'][_0x9c6fcf(0x2ef)]=function(){const _0x58a572=_0x9c6fcf;Window_Selectable[_0x58a572(0x1ef)][_0x58a572(0x2ef)][_0x58a572(0x7df)](this);if(!this['enemy']())return;if(this['enemy']()[_0x58a572(0x3fd)]())this[_0x58a572(0x270)]=this[_0x58a572(0x2c9)]();if(this[_0x58a572(0x2c9)]()[_0x58a572(0x552)]())this[_0x58a572(0x5cb)]=this[_0x58a572(0x2c9)]();},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x830)]=function(_0x1fa029){const _0x40369d=_0x9c6fcf;Window_Selectable[_0x40369d(0x1ef)][_0x40369d(0x830)][_0x40369d(0x7df)](this,_0x1fa029),$gameTroop[_0x40369d(0x830)](this[_0x40369d(0x2c9)]()),$gameParty[_0x40369d(0x830)](this[_0x40369d(0x2c9)]());if(!this[_0x40369d(0x2c9)]())return;if(this[_0x40369d(0x952)]()){const _0x5b3850=SceneManager[_0x40369d(0x90f)]['_actorWindow'];this[_0x40369d(0x2c9)]()[_0x40369d(0x552)]()?_0x5b3850[_0x40369d(0x830)](this[_0x40369d(0x2c9)]()[_0x40369d(0x241)]()):_0x5b3850[_0x40369d(0xb13)]();}},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x952)]=function(){const _0x13da35=_0x9c6fcf;if(!this[_0x13da35(0x9cb)])return![];if($gameSystem['isSideView']())return![];const _0x133731=SceneManager[_0x13da35(0x90f)][_0x13da35(0xa3f)](),_0x284b62=[_0x13da35(0x295),_0x13da35(0x61b),'xp',_0x13da35(0x7c0),_0x13da35(0x75f)];return _0x284b62[_0x13da35(0x765)](_0x133731);},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3e1)]=function(){const _0x3e8aad=_0x9c6fcf,_0x4b73fe=SceneManager['_scene'][_0x3e8aad(0x6d3)];_0x4b73fe['show'](),_0x4b73fe[_0x3e8aad(0xae8)](!![]),_0x4b73fe[_0x3e8aad(0x2c7)](),_0x4b73fe['deselect']();const _0x2e6381=SceneManager['_scene'][_0x3e8aad(0xa3f)](),_0x514917=['xp','portrait','border'];if(_0x514917[_0x3e8aad(0x765)](_0x2e6381)){const _0x5ce9b8=SceneManager[_0x3e8aad(0x90f)][_0x3e8aad(0x197)];_0x5ce9b8['scale']['y']=0x0;}},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x48f)]=function(){const _0x454522=_0x9c6fcf,_0x23ced9=SceneManager[_0x454522(0x90f)][_0x454522(0x6d3)];_0x23ced9[_0x454522(0x837)](),_0x23ced9[_0x454522(0xae8)](![]),_0x23ced9['deselect']();const _0x944994=SceneManager['_scene'][_0x454522(0x197)];_0x944994[_0x454522(0x4bc)]['y']=0x1;},Window_BattleEnemy['prototype'][_0x9c6fcf(0x5b8)]=function(){const _0xd81b90=_0x9c6fcf,_0x34dace=BattleManager[_0xd81b90(0x356)]();if(_0x34dace)_0x34dace[_0xd81b90(0x767)]('all\x20enemies');this['processOk']();},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa19)]=function(){const _0x1ea63e=_0x9c6fcf,_0x5a575d=BattleManager['inputtingAction']();if(_0x5a575d)_0x5a575d[_0x1ea63e(0x767)]('all\x20actors');this[_0x1ea63e(0x3fb)]();},Window_BattleEnemy[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x754)]=function(){const _0x4afe46=_0x9c6fcf;return this[_0x4afe46(0x73c)]();},Window_BattleEnemy[_0x9c6fcf(0x1ef)]['isActionSelectionValid']=function(){const _0x22f7c8=_0x9c6fcf,_0x20c6e9=BattleManager['inputtingAction']();if(!_0x20c6e9)return!![];if(!_0x20c6e9[_0x22f7c8(0x9d3)]())return!![];const _0x5af56a=this[_0x22f7c8(0x2c9)](),_0x398275=_0x20c6e9[_0x22f7c8(0x9d3)]()[_0x22f7c8(0x468)];if(_0x20c6e9['isForNotUser']()){if(_0x5af56a===BattleManager[_0x22f7c8(0x23a)]())return![];}return!![];},Window_BattleItem[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x765)]=function(_0x18e556){const _0x2d8138=_0x9c6fcf;if(!_0x18e556)return![];return _0x18e556['occasion']===0x0||_0x18e556[_0x2d8138(0x94a)]===0x1;};function Window_AutoBattleCancel(){const _0xbbb7=_0x9c6fcf;this[_0xbbb7(0x32f)](...arguments);}Window_AutoBattleCancel[_0x9c6fcf(0x1ef)]=Object[_0x9c6fcf(0x866)](Window_Base[_0x9c6fcf(0x1ef)]),Window_AutoBattleCancel[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x788)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(_0x54f0d5){const _0x164660=_0x9c6fcf;Window_Base[_0x164660(0x1ef)][_0x164660(0x32f)][_0x164660(0x7df)](this,_0x54f0d5),this['setBackgroundType'](this[_0x164660(0x622)]()),this[_0x164660(0x2c7)]();},Window_AutoBattleCancel[_0x9c6fcf(0x1ef)]['bgType']=function(){const _0x3a89c3=_0x9c6fcf;return VisuMZ['BattleCore']['Settings'][_0x3a89c3(0x36a)][_0x3a89c3(0x9ca)];},Window_AutoBattleCancel['prototype'][_0x9c6fcf(0x2c7)]=function(){const _0x3213d6=_0x9c6fcf;this[_0x3213d6(0x80f)][_0x3213d6(0x4ec)]();const _0x4cea26=VisuMZ['BattleCore'][_0x3213d6(0x19c)][_0x3213d6(0x36a)][_0x3213d6(0x5de)],_0x5b3e3f=_0x4cea26[_0x3213d6(0x9da)](this['okButtonText'](),this['cancelButtonText']()),_0x3143d2=this[_0x3213d6(0xae4)](_0x5b3e3f)[_0x3213d6(0xac8)],_0xb0cf43=Math['floor']((this[_0x3213d6(0xac9)]-_0x3143d2)/0x2);this['drawTextEx'](_0x5b3e3f,_0xb0cf43,0x0,_0x3143d2);},Window_AutoBattleCancel[_0x9c6fcf(0x1ef)]['okButtonText']=function(){const _0x4ae664=_0x9c6fcf;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x4ae664(0x643)]('ok'):VisuMZ[_0x4ae664(0x8f5)][_0x4ae664(0x19c)]['AutoBattle'][_0x4ae664(0x5e6)];},Window_AutoBattleCancel['prototype']['cancelButtonText']=function(){const _0x1a2ad4=_0x9c6fcf;return Imported['VisuMZ_0_CoreEngine']?TextManager['getInputButtonString'](_0x1a2ad4(0xa6f)):VisuMZ[_0x1a2ad4(0x8f5)][_0x1a2ad4(0x19c)][_0x1a2ad4(0x36a)][_0x1a2ad4(0x5c9)];},Window_AutoBattleCancel[_0x9c6fcf(0x1ef)]['update']=function(){const _0x3e6509=_0x9c6fcf;Window_Base['prototype'][_0x3e6509(0x255)][_0x3e6509(0x7df)](this),this[_0x3e6509(0x88f)](),this[_0x3e6509(0x42e)]();},Window_AutoBattleCancel[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x88f)]=function(){const _0x2c2600=_0x9c6fcf;this[_0x2c2600(0x9cb)]=BattleManager[_0x2c2600(0x6d5)];},Window_AutoBattleCancel[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x42e)]=function(){const _0x48292d=_0x9c6fcf;if(!BattleManager[_0x48292d(0x6d5)])return;(Input[_0x48292d(0x981)]('ok')||Input[_0x48292d(0x981)](_0x48292d(0xa6f))||TouchInput['isClicked']()||TouchInput[_0x48292d(0x1db)]())&&(SoundManager[_0x48292d(0x78d)](),BattleManager['_autoBattle']=![],Input[_0x48292d(0x4ec)](),TouchInput[_0x48292d(0x4ec)]());};function Window_EnemyName(){const _0x53df59=_0x9c6fcf;this[_0x53df59(0x32f)](...arguments);}Window_EnemyName[_0x9c6fcf(0x1ef)]=Object['create'](Window_StatusBase['prototype']),Window_EnemyName[_0x9c6fcf(0x1ef)]['constructor']=Window_EnemyName,Window_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(_0x7a8a5e){const _0x12a9e5=_0x9c6fcf;this['_enemyID']=_0x7a8a5e,this[_0x12a9e5(0x41b)]='';const _0x4598d9=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x12a9e5(0x8ae)]()*0x4);Window_StatusBase['prototype'][_0x12a9e5(0x32f)][_0x12a9e5(0x7df)](this,_0x4598d9),this[_0x12a9e5(0x136)](0x2),this[_0x12a9e5(0x906)]=0x0;},Window_EnemyName['prototype'][_0x9c6fcf(0x1f8)]=function(){const _0x536a19=_0x9c6fcf;this[_0x536a19(0xa4f)]=0x0;},Window_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c9)]=function(){const _0x49224d=_0x9c6fcf;return $gameTroop['members']()[this[_0x49224d(0x8b2)]];},Window_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)]=function(){const _0x17fe6a=_0x9c6fcf;Window_StatusBase[_0x17fe6a(0x1ef)]['update'][_0x17fe6a(0x7df)](this),this[_0x17fe6a(0x2c9)]()&&this['enemy']()[_0x17fe6a(0x613)]()!==this[_0x17fe6a(0x41b)]&&(this[_0x17fe6a(0x41b)]=this[_0x17fe6a(0x2c9)]()[_0x17fe6a(0x613)](),this[_0x17fe6a(0x2c7)]()),this[_0x17fe6a(0x3ba)](),this[_0x17fe6a(0x96f)]();},Window_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3ba)]=function(){const _0x1378d0=_0x9c6fcf;if(!this['enemy']()){if(this[_0x1378d0(0x906)]>0x0)this[_0x1378d0(0x906)]-=0x10;}else{if(this[_0x1378d0(0x2c9)]()[_0x1378d0(0xb27)]()){if(this[_0x1378d0(0x906)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager['_scene'][_0x1378d0(0x3ad)]&&SceneManager[_0x1378d0(0x90f)][_0x1378d0(0x3ad)][_0x1378d0(0x313)]&&SceneManager[_0x1378d0(0x90f)][_0x1378d0(0x3ad)][_0x1378d0(0x9a1)]['includes'](this[_0x1378d0(0x2c9)]())){if(this[_0x1378d0(0x906)]<0xff)this[_0x1378d0(0x906)]+=0x10;}else this[_0x1378d0(0x906)]>0x0&&(this[_0x1378d0(0x906)]-=0x10);}}},Window_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x96f)]=function(){const _0x4b9357=_0x9c6fcf;if(!this[_0x4b9357(0x2c9)]())return;SceneManager[_0x4b9357(0x980)]()?this['x']=Graphics[_0x4b9357(0x671)]-this[_0x4b9357(0x2c9)]()[_0x4b9357(0x338)]()['_baseX']:this['x']=this[_0x4b9357(0x2c9)]()[_0x4b9357(0x338)]()['_baseX'];this['x']-=Math['round'](this[_0x4b9357(0xac8)]/0x2),this['y']=this['enemy']()[_0x4b9357(0x338)]()['_baseY']-Math[_0x4b9357(0xb65)](this[_0x4b9357(0x8ae)]()*1.5);const _0x1b9409=VisuMZ[_0x4b9357(0x8f5)][_0x4b9357(0x19c)][_0x4b9357(0x7b3)];this['x']+=_0x1b9409[_0x4b9357(0x694)]||0x0,this['y']+=_0x1b9409[_0x4b9357(0x330)]||0x0;},Window_EnemyName[_0x9c6fcf(0x1ef)]['resetFontSettings']=function(){const _0x40d6bc=_0x9c6fcf;Window_Base[_0x40d6bc(0x1ef)][_0x40d6bc(0x329)][_0x40d6bc(0x7df)](this),this[_0x40d6bc(0x80f)][_0x40d6bc(0x568)]=VisuMZ[_0x40d6bc(0x8f5)]['Settings'][_0x40d6bc(0x7b3)][_0x40d6bc(0xa0f)];},Window_EnemyName[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c7)]=function(){const _0x3e1388=_0x9c6fcf;Window_StatusBase[_0x3e1388(0x1ef)][_0x3e1388(0x2c7)][_0x3e1388(0x7df)](this),this['contents'][_0x3e1388(0x4ec)]();if(!this[_0x3e1388(0x2c9)]())return;this[_0x3e1388(0x943)]();},Window_EnemyName['prototype'][_0x9c6fcf(0x943)]=function(){const _0x5c6b79=_0x9c6fcf;this[_0x5c6b79(0x41b)]=this[_0x5c6b79(0x2c9)]()[_0x5c6b79(0x613)]();const _0x45c23c=this[_0x5c6b79(0xae4)](this['_text'])[_0x5c6b79(0xac8)],_0x40e5c8=Math[_0x5c6b79(0xb65)]((this['innerWidth']-_0x45c23c)/0x2);this[_0x5c6b79(0x97e)](this[_0x5c6b79(0x41b)],_0x40e5c8,0x0,_0x45c23c+0x8);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x41f)]=function(){const _0x9ca191=_0x9c6fcf;return VisuMZ[_0x9ca191(0x8f5)]['Settings'][_0x9ca191(0x769)][_0x9ca191(0x517)];},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x89d)]=function(){const _0xc411ac=_0x9c6fcf;return VisuMZ[_0xc411ac(0x8f5)][_0xc411ac(0x19c)]['BattleLog'][_0xc411ac(0x6ce)];},Window_BattleLog['prototype'][_0x9c6fcf(0x1b0)]=function(){const _0x6970ed=_0x9c6fcf;return VisuMZ[_0x6970ed(0x8f5)][_0x6970ed(0x19c)]['BattleLog'][_0x6970ed(0x535)];},Window_BattleLog['prototype'][_0x9c6fcf(0x731)]=function(){return![];},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6dc)]=function(_0x40fef6,_0xf367a7){const _0x557ee3=_0x9c6fcf;this[_0x557ee3(0xa24)](_0x557ee3(0xb3b)),BattleManager[_0x557ee3(0x336)](_0x40fef6,_0xf367a7),this['callNextMethod']();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x249)]=function(_0x408021,_0x433786,_0x261d8c){const _0x5f50a9=_0x9c6fcf;this['unshift'](_0x5f50a9(0xb3b)),BattleManager[_0x5f50a9(0xab1)](_0x408021,_0x433786,_0x261d8c),this[_0x5f50a9(0x792)]();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb3b)]=function(){this['callNextMethod']();},Window_BattleLog[_0x9c6fcf(0x1ef)]['push']=function(_0x2a811a){const _0x5d7f20=_0x9c6fcf,_0x1d0408=Array[_0x5d7f20(0x1ef)][_0x5d7f20(0x237)]['call'](arguments,0x1),_0x1924ce={'name':_0x2a811a,'params':_0x1d0408},_0x3ee2a2=this[_0x5d7f20(0x6c1)][_0x5d7f20(0x1f9)](_0x41b5f6=>_0x41b5f6[_0x5d7f20(0x613)])['indexOf'](_0x5d7f20(0xb3b));_0x3ee2a2>=0x0?this[_0x5d7f20(0x6c1)][_0x5d7f20(0x6ac)](_0x3ee2a2,0x0,_0x1924ce):this[_0x5d7f20(0x6c1)]['push'](_0x1924ce);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa24)]=function(_0x4bd97f){const _0x5bdf39=_0x9c6fcf,_0x134b19=Array[_0x5bdf39(0x1ef)][_0x5bdf39(0x237)][_0x5bdf39(0x7df)](arguments,0x1);this[_0x5bdf39(0x6c1)]['unshift']({'name':_0x4bd97f,'params':_0x134b19});},Window_BattleLog['prototype'][_0x9c6fcf(0x873)]=function(){const _0x86fa6d=_0x9c6fcf;if(!$gameTemp[_0x86fa6d(0x23f)]())return;console[_0x86fa6d(0x2ae)](this[_0x86fa6d(0x6c1)][_0x86fa6d(0x1f9)](_0x38fbcc=>_0x38fbcc[_0x86fa6d(0x613)])[_0x86fa6d(0x189)]('\x0a'));},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xb50)]=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c7)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2c7)]=function(){const _0x2a7f14=_0x9c6fcf;this[_0x2a7f14(0x70e)]=!![];},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x53b)]=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)]=function(){const _0xd4dbe2=_0x9c6fcf;VisuMZ[_0xd4dbe2(0x8f5)][_0xd4dbe2(0x53b)][_0xd4dbe2(0x7df)](this);if(this[_0xd4dbe2(0x70e)])this['processRefresh']();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7a3)]=function(){const _0x224e95=_0x9c6fcf;this[_0x224e95(0x70e)]=![],VisuMZ[_0x224e95(0x8f5)]['Window_BattleLog_refresh'][_0x224e95(0x7df)](this);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x147)]=function(_0x27e5dc){const _0x240870=_0x9c6fcf;let _0x58c28c=VisuMZ[_0x240870(0x8f5)][_0x240870(0x19c)]['BattleLog'][_0x240870(0x618)][_0x240870(0x3b9)]()['trim'](),_0x154247=this[_0x240870(0x574)][_0x27e5dc];if(_0x154247[_0x240870(0x3c6)](/<LEFT>/i))_0x58c28c='left';else{if(_0x154247['match'](/<CENTER>/i))_0x58c28c=_0x240870(0x328);else _0x154247[_0x240870(0x3c6)](/<RIGHT>/i)&&(_0x58c28c=_0x240870(0x144));}_0x154247=_0x154247[_0x240870(0xb09)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x154247=_0x154247[_0x240870(0xb09)](/\\I\[0\]/gi,'');const _0x49c046=this[_0x240870(0xa12)](_0x27e5dc);this['contents'][_0x240870(0xb57)](_0x49c046['x'],_0x49c046['y'],_0x49c046['width'],_0x49c046[_0x240870(0x202)]);const _0x528829=this[_0x240870(0xae4)](_0x154247)['width'];let _0x4b3d49=_0x49c046['x'];if(_0x58c28c==='center')_0x4b3d49+=(_0x49c046[_0x240870(0xac8)]-_0x528829)/0x2;else _0x58c28c===_0x240870(0x144)&&(_0x4b3d49+=_0x49c046['width']-_0x528829);this[_0x240870(0x97e)](_0x154247,_0x4b3d49,_0x49c046['y'],_0x528829+0x8);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x38a)]=function(_0x554624){const _0x11af84=_0x9c6fcf;this[_0x11af84(0x574)][_0x11af84(0x4c6)](_0x554624),this[_0x11af84(0x2c7)](),this[_0x11af84(0x792)]();},Window_BattleLog[_0x9c6fcf(0x1ef)]['updateWaitMode']=function(){const _0x5edd97=_0x9c6fcf;let _0x491682=![];switch(this[_0x5edd97(0x178)]){case _0x5edd97(0x37d):_0x491682=this[_0x5edd97(0x21f)]['isEffecting']();break;case _0x5edd97(0x6f4):_0x491682=this[_0x5edd97(0x21f)][_0x5edd97(0xacb)]();break;case _0x5edd97(0xa60):_0x491682=this[_0x5edd97(0x21f)][_0x5edd97(0xb18)]();break;case _0x5edd97(0x7fd):_0x491682=this[_0x5edd97(0x21f)][_0x5edd97(0x87e)]();break;case'jump':_0x491682=this[_0x5edd97(0x21f)]['isAnyoneJumping']();break;case _0x5edd97(0x888):_0x491682=this[_0x5edd97(0x21f)][_0x5edd97(0x2a5)]();break;}return!_0x491682&&(this[_0x5edd97(0x178)]=''),_0x491682;},Window_BattleLog['prototype'][_0x9c6fcf(0x33d)]=function(){const _0x241679=_0x9c6fcf;this[_0x241679(0x9ad)](_0x241679(0xa60));},Window_BattleLog['prototype'][_0x9c6fcf(0x95f)]=function(){const _0x5ab84b=_0x9c6fcf;this[_0x5ab84b(0x9ad)]('float');},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8f9)]=function(){const _0x51d66f=_0x9c6fcf;this[_0x51d66f(0x9ad)]('jump');},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb62)]=function(){const _0x662355=_0x9c6fcf;this[_0x662355(0x9ad)](_0x662355(0x888));},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x301)]=function(){const _0x4d392d=_0x9c6fcf,_0xb30583=VisuMZ['BattleCore'][_0x4d392d(0x19c)][_0x4d392d(0x769)];if(!_0xb30583['StartTurnShow'])return;this[_0x4d392d(0x4c6)](_0x4d392d(0x38a),_0xb30583[_0x4d392d(0x1d2)]['format']($gameTroop[_0x4d392d(0xafe)]())),this[_0x4d392d(0x4c6)]('waitCount',_0xb30583[_0x4d392d(0x1ed)]),this[_0x4d392d(0x4c6)](_0x4d392d(0x4ec));},Window_BattleLog['prototype'][_0x9c6fcf(0x43a)]=function(_0x43316b,_0x575912,_0x1bf6aa){const _0xce59ce=_0x9c6fcf;this[_0xce59ce(0x245)](_0x575912)?BattleManager['prepareCustomActionSequence']():this[_0xce59ce(0x2d6)](_0x43316b,_0x575912,_0x1bf6aa);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x245)]=function(_0x4ccc16){const _0x1386ce=_0x9c6fcf;if(!SceneManager[_0x1386ce(0x319)]())return![];if(!_0x4ccc16)return![];if(!_0x4ccc16[_0x1386ce(0x9d3)]())return![];if(_0x4ccc16[_0x1386ce(0x9d3)]()[_0x1386ce(0x468)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x4ccc16['item']()))return!![];return![];},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2d6)]=function(_0x57387b,_0x5445d4,_0x56c9f2){const _0x7c494a=_0x9c6fcf;this[_0x7c494a(0x24a)](_0x57387b,_0x5445d4,_0x56c9f2),this[_0x7c494a(0x3ab)](_0x57387b,_0x5445d4,_0x56c9f2),this[_0x7c494a(0xaaf)](_0x57387b,_0x5445d4,_0x56c9f2);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x17c)]=function(_0x5e40f0,_0x3712f4){const _0x2513fa=_0x9c6fcf,_0x22722e=VisuMZ[_0x2513fa(0x8f5)][_0x2513fa(0x19c)][_0x2513fa(0x769)];_0x22722e[_0x2513fa(0x7f8)]&&this['push']('addText',_0x2513fa(0x402)[_0x2513fa(0x9da)](DataManager[_0x2513fa(0xa16)](_0x3712f4)));if(DataManager[_0x2513fa(0x52e)](_0x3712f4)){if(_0x22722e['ActionSkillMsg1'])this[_0x2513fa(0x7ac)](_0x3712f4[_0x2513fa(0x7f7)],_0x5e40f0,_0x3712f4);if(_0x22722e[_0x2513fa(0x54f)])this[_0x2513fa(0x7ac)](_0x3712f4[_0x2513fa(0x9fd)],_0x5e40f0,_0x3712f4);}else{if(_0x22722e[_0x2513fa(0x45a)])this['displayItemMessage'](TextManager[_0x2513fa(0x863)],_0x5e40f0,_0x3712f4);}},Window_BattleLog['prototype'][_0x9c6fcf(0x24a)]=function(_0x195b65,_0x229f37,_0x4bf3b9){const _0x59126a=_0x9c6fcf,_0x3d3b3f=_0x229f37['item']();this['displayAction'](_0x195b65,_0x3d3b3f),this['push']('applyImmortal',_0x195b65,_0x4bf3b9,!![]),this['push'](_0x59126a(0x8f4),_0x195b65,_0x229f37),this['push'](_0x59126a(0x8b6)),this['push']('performCastAnimation',_0x195b65,_0x229f37),this[_0x59126a(0x4c6)](_0x59126a(0x33d));},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3ab)]=function(_0x10fd79,_0x5a9cf4,_0x18ac33){const _0x573fec=_0x9c6fcf;if(this['isMeleeSingleTargetAction'](_0x5a9cf4))this[_0x573fec(0x4a1)](_0x10fd79,_0x5a9cf4,_0x18ac33);else{if(this[_0x573fec(0x490)](_0x5a9cf4))this[_0x573fec(0xa90)](_0x10fd79,_0x5a9cf4,_0x18ac33);else _0x5a9cf4[_0x573fec(0x507)]()?this[_0x573fec(0x488)](_0x10fd79,_0x5a9cf4,_0x18ac33):this[_0x573fec(0x527)](_0x10fd79,_0x5a9cf4,_0x18ac33);}},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaeb)]=function(_0x30a226,_0x16648b,_0x1287bf,_0x42bb3b){const _0x3c6dcf=_0x9c6fcf;if(_0x16648b){const _0x58d02a=_0x30a226[_0x3c6dcf(0x338)]();this[_0x3c6dcf(0x4c6)](_0x3c6dcf(0x540),[_0x30a226],_0x1287bf,_0x42bb3b),this[_0x3c6dcf(0x4c6)]('performMoveToPoint',_0x30a226,_0x58d02a[_0x3c6dcf(0x606)],_0x58d02a[_0x3c6dcf(0x17a)],_0x42bb3b,![],'Linear'),this[_0x3c6dcf(0x4c6)](_0x3c6dcf(0x297),[_0x30a226],'evade'),this[_0x3c6dcf(0x4c6)](_0x3c6dcf(0x8b6)),this[_0x3c6dcf(0x4c6)]('requestMotion',[_0x30a226],_0x3c6dcf(0x8bf));}},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1b9)]=function(_0x3aae7a){const _0xa4833e=_0x9c6fcf;if(!_0x3aae7a[_0xa4833e(0x5c8)]())return![];if(!_0x3aae7a[_0xa4833e(0xa7f)]())return![];if(!_0x3aae7a['isForOpponent']())return![];return VisuMZ[_0xa4833e(0x8f5)][_0xa4833e(0x19c)][_0xa4833e(0x7fe)][_0xa4833e(0xa94)];},Window_BattleLog['prototype']['autoMeleeSingleTargetActionSet']=function(_0x47c028,_0x12f247,_0x4a186c){const _0x304560=_0x9c6fcf,_0x1878a3=_0x47c028[_0x304560(0x593)]()[_0x304560(0x930)]<0x2,_0x3618bb=0x14,_0x37b129=0x30;let _0x5cdd3e=!![];_0x4a186c[_0x304560(0x88e)]>0x0&&_0x47c028['isActor']()===_0x4a186c[0x0][_0x304560(0x552)]()&&(_0x5cdd3e=![]);_0x1878a3&&_0x5cdd3e&&(this[_0x304560(0x4c6)]('performJump',[_0x47c028],_0x37b129,_0x3618bb),this[_0x304560(0x4c6)](_0x304560(0x86d),_0x47c028,_0x4a186c,'front\x20base',_0x3618bb,!![],_0x304560(0x5c4),!![]),this[_0x304560(0x4c6)](_0x304560(0x297),[_0x47c028],_0x304560(0x8bf)),this[_0x304560(0x4c6)](_0x304560(0x8b6)));let _0x4750af=_0x12f247['isAttack']()?this[_0x304560(0x8dd)](_0x47c028):0x1;for(let _0x4e4ebc=0x0;_0x4e4ebc<_0x4750af;_0x4e4ebc++){_0x12f247[_0x304560(0x2ab)]()&&_0x47c028[_0x304560(0x552)]()&&this[_0x304560(0x4c6)](_0x304560(0x886),_0x47c028,_0x4e4ebc),_0x12f247['item']()[_0x304560(0x2ac)]<0x0?this[_0x304560(0x488)](_0x47c028,_0x12f247,_0x4a186c):this[_0x304560(0x527)](_0x47c028,_0x12f247,_0x4a186c);}_0x12f247['isAttack']()&&_0x47c028[_0x304560(0x552)]()&&this[_0x304560(0x4c6)]('clearActiveWeaponSet',_0x47c028),this[_0x304560(0x4c6)](_0x304560(0x5c0),_0x47c028,_0x4a186c,![]),this['addMeleeReturnActionSet'](_0x47c028,_0x1878a3,_0x37b129,_0x3618bb);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x490)]=function(_0x4d6b1b){const _0x447936=_0x9c6fcf;if(!_0x4d6b1b['isPhysical']())return![];if(!_0x4d6b1b['isForAll']())return![];if(!_0x4d6b1b[_0x447936(0x6c5)]())return![];return VisuMZ['BattleCore'][_0x447936(0x19c)][_0x447936(0x7fe)][_0x447936(0xa50)];},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa90)]=function(_0x37c3c3,_0x389ab5,_0x1bd22c){const _0x48afb2=_0x9c6fcf,_0x3f87bd=_0x37c3c3['getAttackMotion']()[_0x48afb2(0x930)]<0x2,_0x25a862=0x14,_0xafe23c=0x30;if(_0x3f87bd){this[_0x48afb2(0x4c6)](_0x48afb2(0x540),[_0x37c3c3],_0xafe23c,_0x25a862);const _0x25b9de=_0x1bd22c[_0x48afb2(0x88e)]>0x1?_0x48afb2(0x883):'front\x20base';this['push']('performMoveToTargets',_0x37c3c3,_0x1bd22c,_0x25b9de,_0x25a862,!![],'Linear',!![]),this[_0x48afb2(0x4c6)](_0x48afb2(0x297),[_0x37c3c3],_0x48afb2(0x8bf)),this[_0x48afb2(0x4c6)](_0x48afb2(0x8b6));}let _0x37c0a1=_0x389ab5[_0x48afb2(0x2ab)]()?this[_0x48afb2(0x8dd)](_0x37c3c3):0x1;for(let _0x4b1040=0x0;_0x4b1040<_0x37c0a1;_0x4b1040++){_0x389ab5[_0x48afb2(0x2ab)]()&&_0x37c3c3[_0x48afb2(0x552)]()&&this[_0x48afb2(0x4c6)](_0x48afb2(0x886),_0x37c3c3,_0x4b1040),this[_0x48afb2(0x527)](_0x37c3c3,_0x389ab5,_0x1bd22c);}_0x389ab5[_0x48afb2(0x2ab)]()&&_0x37c3c3[_0x48afb2(0x552)]()&&this[_0x48afb2(0x4c6)](_0x48afb2(0x9a8),_0x37c3c3),this[_0x48afb2(0x4c6)](_0x48afb2(0x5c0),_0x37c3c3,_0x1bd22c,![]),this[_0x48afb2(0xaeb)](_0x37c3c3,_0x3f87bd,_0xafe23c,_0x25a862);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x488)]=function(_0x14edfd,_0xde8fe4,_0x2f20ca){const _0x4b51e2=_0x9c6fcf,_0x246fa0=_0xde8fe4[_0x4b51e2(0x9d3)]();for(const _0x312d19 of _0x2f20ca){if(!_0x312d19)continue;this['push'](_0x4b51e2(0x2b9),_0x14edfd,_0xde8fe4),this['push'](_0x4b51e2(0x499),Sprite_Battler[_0x4b51e2(0x5be)]),this[_0x4b51e2(0x4c6)](_0x4b51e2(0xa31),_0x14edfd,[_0x312d19],_0x246fa0[_0x4b51e2(0x2ac)]),this[_0x4b51e2(0x4c6)](_0x4b51e2(0x499),0x18),this[_0x4b51e2(0x4c6)](_0x4b51e2(0x6dc),_0x14edfd,_0x312d19);}},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x527)]=function(_0x1f1dac,_0xa51cb0,_0x46454a){const _0x584b25=_0x9c6fcf,_0x523b37=_0xa51cb0[_0x584b25(0x9d3)]();let _0x8d67f9=_0xa51cb0[_0x584b25(0x2ab)]()?0x1+_0x1f1dac[_0x584b25(0x2d9)]():0x1;while(_0x8d67f9--){this['push'](_0x584b25(0x2b9),_0x1f1dac,_0xa51cb0),this[_0x584b25(0x4c6)](_0x584b25(0x499),Sprite_Battler[_0x584b25(0x5be)]),this[_0x584b25(0x4c6)](_0x584b25(0xa31),_0x1f1dac,_0x46454a['clone'](),_0x523b37[_0x584b25(0x2ac)]),this['push']('waitForAnimation');}for(const _0x569564 of _0x46454a){if(!_0x569564)continue;this[_0x584b25(0x4c6)](_0x584b25(0x6dc),_0x1f1dac,_0x569564);}},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaaf)]=function(_0x2655ef,_0x16d939,_0x1f3eb0){const _0x14dae5=_0x9c6fcf,_0x3f3bd7=_0x16d939['item']();this['push'](_0x14dae5(0x5c0),_0x2655ef,_0x1f3eb0,![]),this[_0x14dae5(0x4c6)]('waitForNewLine'),this[_0x14dae5(0x4c6)](_0x14dae5(0x28d)),this[_0x14dae5(0x4c6)]('clear'),this[_0x14dae5(0x4c6)](_0x14dae5(0xaa8),_0x2655ef),this[_0x14dae5(0x4c6)](_0x14dae5(0x8b6));},Window_BattleLog['prototype'][_0x9c6fcf(0x497)]=function(_0x3ab2a1){},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x1d0)]=Window_BattleLog['prototype'][_0x9c6fcf(0x5f7)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5f7)]=function(_0x48b4a0){const _0x35dc9c=_0x9c6fcf;if(!VisuMZ[_0x35dc9c(0x8f5)]['Settings'][_0x35dc9c(0x769)][_0x35dc9c(0x5d6)])return;VisuMZ[_0x35dc9c(0x8f5)]['Window_BattleLog_displayCurrentState']['call'](this,_0x48b4a0);},Window_BattleLog[_0x9c6fcf(0x1ef)]['displayCounter']=function(_0x1df5d2){const _0x479d7e=_0x9c6fcf;this['push']('performCounter',_0x1df5d2);VisuMZ['BattleCore'][_0x479d7e(0x19c)][_0x479d7e(0x7fe)][_0x479d7e(0x235)]&&this[_0x479d7e(0x4c6)](_0x479d7e(0xa31),_0x1df5d2,[BattleManager['_subject']],-0x1);if(!VisuMZ[_0x479d7e(0x8f5)][_0x479d7e(0x19c)][_0x479d7e(0x769)][_0x479d7e(0x4b2)])return;this[_0x479d7e(0x4c6)](_0x479d7e(0x38a),TextManager[_0x479d7e(0x9ff)][_0x479d7e(0x9da)](_0x1df5d2[_0x479d7e(0x613)]()));},Window_BattleLog[_0x9c6fcf(0x1ef)]['displayReflection']=function(_0x2c3089){const _0x275592=_0x9c6fcf;this[_0x275592(0x4c6)](_0x275592(0x98c),_0x2c3089);if(!VisuMZ[_0x275592(0x8f5)][_0x275592(0x19c)][_0x275592(0x769)][_0x275592(0x361)])return;this[_0x275592(0x4c6)](_0x275592(0x38a),TextManager[_0x275592(0x65b)][_0x275592(0x9da)](_0x2c3089[_0x275592(0x613)]()));},Window_BattleLog['prototype'][_0x9c6fcf(0x251)]=function(_0x434b8a,_0x3bb774){const _0x5b0495=_0x9c6fcf;if(VisuMZ['BattleCore'][_0x5b0495(0x19c)][_0x5b0495(0x7fe)][_0x5b0495(0x3a2)]){const _0x329937=_0x3bb774['item']();this[_0x5b0495(0x4c6)](_0x5b0495(0xa31),_0x434b8a,[_0x434b8a],_0x329937[_0x5b0495(0x2ac)]);}},Window_BattleLog['prototype'][_0x9c6fcf(0x1d5)]=function(_0x347353,_0x5a8a7a){const _0x4b9847=_0x9c6fcf;this[_0x4b9847(0x4c6)](_0x4b9847(0x2ea),_0x347353,_0x5a8a7a);if(!VisuMZ['BattleCore'][_0x4b9847(0x19c)][_0x4b9847(0x769)][_0x4b9847(0x46c)])return;const _0x5c63c1=_0x347353[_0x4b9847(0x613)](),_0x2ecb88=TextManager[_0x4b9847(0x398)]['format'](_0x5c63c1,_0x5a8a7a[_0x4b9847(0x613)]());this[_0x4b9847(0x4c6)]('addText',_0x2ecb88);},VisuMZ['BattleCore'][_0x9c6fcf(0x560)]=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x556)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x556)]=function(_0x354e1a,_0x3cb8be){const _0x134c25=_0x9c6fcf;VisuMZ[_0x134c25(0x8f5)][_0x134c25(0x560)]['call'](this,_0x354e1a,_0x3cb8be);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x995)]=Window_BattleLog['prototype'][_0x9c6fcf(0x5d5)],Window_BattleLog[_0x9c6fcf(0x1ef)]['displayFailure']=function(_0xf6b84){const _0x90c196=_0x9c6fcf;if(!VisuMZ[_0x90c196(0x8f5)][_0x90c196(0x19c)][_0x90c196(0x769)]['ShowFailure'])return;VisuMZ[_0x90c196(0x8f5)]['Window_BattleLog_displayFailure'][_0x90c196(0x7df)](this,_0xf6b84);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x4e2)]=Window_BattleLog['prototype'][_0x9c6fcf(0x6f6)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6f6)]=function(_0x3a14dc){const _0x43c269=_0x9c6fcf;if(!VisuMZ[_0x43c269(0x8f5)][_0x43c269(0x19c)][_0x43c269(0x769)]['ShowCritical'])return;VisuMZ[_0x43c269(0x8f5)]['Window_BattleLog_displayCritical'][_0x43c269(0x7df)](this,_0x3a14dc);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x586)]=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x7e9)],Window_BattleLog['prototype']['displayMiss']=function(_0x24b5d4){const _0x2a24e1=_0x9c6fcf;!VisuMZ[_0x2a24e1(0x8f5)][_0x2a24e1(0x19c)][_0x2a24e1(0x769)][_0x2a24e1(0x21a)]?this[_0x2a24e1(0x4c6)](_0x2a24e1(0xaca),_0x24b5d4):VisuMZ[_0x2a24e1(0x8f5)]['Window_BattleLog_displayMiss'][_0x2a24e1(0x7df)](this,_0x24b5d4);},VisuMZ['BattleCore']['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x325)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x325)]=function(_0x369f63){const _0x18b5c7=_0x9c6fcf;!VisuMZ[_0x18b5c7(0x8f5)][_0x18b5c7(0x19c)][_0x18b5c7(0x769)][_0x18b5c7(0x21a)]?_0x369f63['result']()[_0x18b5c7(0x7ae)]?this[_0x18b5c7(0x4c6)](_0x18b5c7(0x1e4),_0x369f63):this[_0x18b5c7(0x4c6)](_0x18b5c7(0x628),_0x369f63):VisuMZ[_0x18b5c7(0x8f5)][_0x18b5c7(0x87d)]['call'](this,_0x369f63);},Window_BattleLog[_0x9c6fcf(0x1ef)]['displayHpDamage']=function(_0x5bc02e){const _0x342c86=_0x9c6fcf;_0x5bc02e[_0x342c86(0x4df)]()[_0x342c86(0x672)]&&(_0x5bc02e['_lastHpDamage']=0x0,_0x5bc02e[_0x342c86(0x4df)]()[_0x342c86(0x91b)]>0x0&&!_0x5bc02e[_0x342c86(0x4df)]()['drain']&&(_0x5bc02e['_lastHpDamage']=_0x5bc02e[_0x342c86(0x4df)]()['hpDamage'],this['push'](_0x342c86(0xb5c),_0x5bc02e)),_0x5bc02e[_0x342c86(0x4df)]()[_0x342c86(0x91b)]<0x0&&this[_0x342c86(0x4c6)]('performRecovery',_0x5bc02e),VisuMZ[_0x342c86(0x8f5)][_0x342c86(0x19c)][_0x342c86(0x769)][_0x342c86(0x372)]&&this[_0x342c86(0x4c6)](_0x342c86(0x38a),this[_0x342c86(0x33e)](_0x5bc02e)));},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x431)],Window_BattleLog['prototype'][_0x9c6fcf(0x431)]=function(_0x1eddb5){const _0x10558f=_0x9c6fcf;if(!VisuMZ[_0x10558f(0x8f5)][_0x10558f(0x19c)][_0x10558f(0x769)][_0x10558f(0xabf)])return;VisuMZ['BattleCore'][_0x10558f(0x720)][_0x10558f(0x7df)](this,_0x1eddb5);},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0xb29)]=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x121)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x121)]=function(_0x4130d2){const _0x1615fd=_0x9c6fcf;if(!VisuMZ[_0x1615fd(0x8f5)][_0x1615fd(0x19c)]['BattleLog'][_0x1615fd(0x44a)])return;VisuMZ[_0x1615fd(0x8f5)][_0x1615fd(0xb29)][_0x1615fd(0x7df)](this,_0x4130d2);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x65c)]=function(_0x46bd36){const _0x54db1c=_0x9c6fcf;_0x46bd36[_0x54db1c(0x4df)]()[_0x54db1c(0x302)]()&&(this[_0x54db1c(0x4c6)](_0x54db1c(0x688)),this[_0x54db1c(0x862)](_0x46bd36),this[_0x54db1c(0xa18)](_0x46bd36),this[_0x54db1c(0x4c6)](_0x54db1c(0x962)));},Window_BattleLog['prototype']['displayAddedStates']=function(_0x1d9d4a){const _0x43e86f=_0x9c6fcf,_0x27d86e=_0x1d9d4a['result'](),_0x5293da=_0x27d86e['addedStateObjects']();for(const _0x54c481 of _0x5293da){const _0x4a11f0=_0x1d9d4a[_0x43e86f(0x552)]()?_0x54c481[_0x43e86f(0x7f7)]:_0x54c481[_0x43e86f(0x9fd)];_0x4a11f0&&VisuMZ['BattleCore'][_0x43e86f(0x19c)][_0x43e86f(0x769)][_0x43e86f(0x2df)]&&(this[_0x43e86f(0x4c6)](_0x43e86f(0xb30)),this[_0x43e86f(0x4c6)](_0x43e86f(0x6a4)),this[_0x43e86f(0x4c6)](_0x43e86f(0x688)),this[_0x43e86f(0x4c6)](_0x43e86f(0x38a),_0x4a11f0[_0x43e86f(0x9da)](_0x1d9d4a['name']())),this[_0x43e86f(0x4c6)](_0x43e86f(0x396))),_0x54c481['id']===_0x1d9d4a[_0x43e86f(0x928)]()&&this[_0x43e86f(0x4c6)](_0x43e86f(0x5a1),_0x1d9d4a);}},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb30)]=function(){},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x81c)]=function(_0x305374){const _0x25d10b=_0x9c6fcf;if(!VisuMZ[_0x25d10b(0x8f5)][_0x25d10b(0x19c)][_0x25d10b(0x769)][_0x25d10b(0xac7)])return;const _0x4a22be=_0x305374[_0x25d10b(0x4df)](),_0x28193e=_0x4a22be[_0x25d10b(0x4a6)]();for(const _0x25f04a of _0x28193e){_0x25f04a['message4']&&(this['push'](_0x25d10b(0x505)),this['push'](_0x25d10b(0x6a4)),this[_0x25d10b(0x4c6)]('pushBaseLine'),this[_0x25d10b(0x4c6)](_0x25d10b(0x38a),_0x25f04a[_0x25d10b(0xa1c)][_0x25d10b(0x9da)](_0x305374[_0x25d10b(0x613)]())),this[_0x25d10b(0x4c6)]('wait'));}},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x505)]=function(){},Window_BattleLog['prototype'][_0x9c6fcf(0xa18)]=function(_0x5e9517){const _0x330a57=_0x9c6fcf,_0x141072=VisuMZ[_0x330a57(0x8f5)][_0x330a57(0x19c)][_0x330a57(0x769)],_0x2cf43d=_0x5e9517[_0x330a57(0x4df)]();if(_0x141072[_0x330a57(0x3fa)])this['displayBuffs'](_0x5e9517,_0x2cf43d[_0x330a57(0x689)],TextManager[_0x330a57(0x152)]);if(_0x141072[_0x330a57(0x4c0)])this['displayBuffs'](_0x5e9517,_0x2cf43d[_0x330a57(0x290)],TextManager[_0x330a57(0x165)]);if(_0x141072[_0x330a57(0x79c)])this[_0x330a57(0x611)](_0x5e9517,_0x2cf43d[_0x330a57(0x215)],TextManager[_0x330a57(0x914)]);},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x611)]=function(_0x5968e9,_0x1557bc,_0x4894e0){const _0x2e8660=_0x9c6fcf;for(const _0x1f405a of _0x1557bc){const _0x9777d6=_0x4894e0[_0x2e8660(0x9da)](_0x5968e9['name'](),TextManager[_0x2e8660(0x8a2)](_0x1f405a));this['push']('popBaseLine'),this[_0x2e8660(0x4c6)](_0x2e8660(0x688)),this[_0x2e8660(0x4c6)](_0x2e8660(0x38a),_0x9777d6),this[_0x2e8660(0x4c6)]('wait');}},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleLog_clear']=Window_BattleLog['prototype'][_0x9c6fcf(0x4ec)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x4ec)]=function(){const _0x5f3549=_0x9c6fcf;VisuMZ[_0x5f3549(0x8f5)]['Window_BattleLog_clear']['call'](this),this[_0x5f3549(0x792)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x688)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x688)]=function(){const _0x42f232=_0x9c6fcf;VisuMZ[_0x42f232(0x8f5)]['Window_BattleLog_pushBaseLine']['call'](this),this['callNextMethod']();},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x9c6fcf(0x1ef)]['popBaseLine'],Window_BattleLog[_0x9c6fcf(0x1ef)]['popBaseLine']=function(){const _0x7545a1=_0x9c6fcf;VisuMZ[_0x7545a1(0x8f5)][_0x7545a1(0x5e0)][_0x7545a1(0x7df)](this),this[_0x7545a1(0x7a3)](),this['callNextMethod']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x977)]=Window_BattleLog[_0x9c6fcf(0x1ef)]['popupDamage'],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x225)]=function(_0x1ec945){const _0x16b7f0=_0x9c6fcf;VisuMZ[_0x16b7f0(0x8f5)]['Window_BattleLog_popupDamage'][_0x16b7f0(0x7df)](this,_0x1ec945),this[_0x16b7f0(0x792)]();},Window_BattleLog['prototype']['waitForNewLine']=function(){const _0x5e3118=_0x9c6fcf;let _0x760eb4=0x0;this[_0x5e3118(0x7bc)][_0x5e3118(0x88e)]>0x0&&(_0x760eb4=this[_0x5e3118(0x7bc)][this[_0x5e3118(0x7bc)][_0x5e3118(0x88e)]-0x1]),this[_0x5e3118(0x574)][_0x5e3118(0x88e)]>_0x760eb4?this[_0x5e3118(0x396)]():this[_0x5e3118(0x792)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x6cf)]=Window_BattleLog[_0x9c6fcf(0x1ef)]['performActionStart'],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8f4)]=function(_0x2fcfd0,_0x267fc9){const _0x47cd16=_0x9c6fcf;VisuMZ['BattleCore'][_0x47cd16(0x6cf)]['call'](this,_0x2fcfd0,_0x267fc9),this['callNextMethod']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x23d)]=Window_BattleLog[_0x9c6fcf(0x1ef)]['performAction'],Window_BattleLog['prototype'][_0x9c6fcf(0x2b9)]=function(_0x3ee348,_0x40a204){const _0x5c7998=_0x9c6fcf;VisuMZ['BattleCore']['Window_BattleLog_performAction'][_0x5c7998(0x7df)](this,_0x3ee348,_0x40a204),this[_0x5c7998(0x792)]();},VisuMZ['BattleCore'][_0x9c6fcf(0x8d1)]=Window_BattleLog['prototype']['performActionEnd'],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaa8)]=function(_0x430875){const _0x5d173a=_0x9c6fcf;VisuMZ[_0x5d173a(0x8f5)][_0x5d173a(0x8d1)][_0x5d173a(0x7df)](this,_0x430875);for(const _0x33c0c9 of BattleManager['allBattleMembers']()){if(!_0x33c0c9)continue;if(_0x33c0c9[_0x5d173a(0xb27)]())continue;_0x33c0c9[_0x5d173a(0xb45)]();}this[_0x5d173a(0x792)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x321)]=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xb5c)],Window_BattleLog[_0x9c6fcf(0x1ef)]['performDamage']=function(_0x27af95){const _0x5f411d=_0x9c6fcf;VisuMZ[_0x5f411d(0x8f5)][_0x5f411d(0x321)][_0x5f411d(0x7df)](this,_0x27af95),this[_0x5f411d(0x792)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x296)]=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaca)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaca)]=function(_0x54bcf6){const _0xd1e311=_0x9c6fcf;VisuMZ['BattleCore']['Window_BattleLog_performMiss'][_0xd1e311(0x7df)](this,_0x54bcf6),this[_0xd1e311(0x792)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleLog_performRecovery']=Window_BattleLog[_0x9c6fcf(0x1ef)]['performRecovery'],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3c7)]=function(_0x4ec29f){const _0x2fb7b1=_0x9c6fcf;VisuMZ['BattleCore'][_0x2fb7b1(0x982)][_0x2fb7b1(0x7df)](this,_0x4ec29f),this[_0x2fb7b1(0x792)]();},VisuMZ['BattleCore'][_0x9c6fcf(0x4b0)]=Window_BattleLog['prototype'][_0x9c6fcf(0x1e4)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1e4)]=function(_0x175a74){const _0x36caa9=_0x9c6fcf;VisuMZ[_0x36caa9(0x8f5)][_0x36caa9(0x4b0)]['call'](this,_0x175a74),this[_0x36caa9(0x792)]();},VisuMZ['BattleCore']['Window_BattleLog_performMagicEvasion']=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x628)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x628)]=function(_0x27dfb7){const _0xa274fc=_0x9c6fcf;VisuMZ[_0xa274fc(0x8f5)][_0xa274fc(0x8f8)]['call'](this,_0x27dfb7),this[_0xa274fc(0x792)]();},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleLog_performCounter']=Window_BattleLog['prototype'][_0x9c6fcf(0x17d)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x17d)]=function(_0x596fc9){const _0x19f816=_0x9c6fcf;VisuMZ[_0x19f816(0x8f5)][_0x19f816(0xb5e)]['call'](this,_0x596fc9),this[_0x19f816(0x792)]();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x3b2)]=Window_BattleLog[_0x9c6fcf(0x1ef)]['performReflection'],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x98c)]=function(_0x2dc7d3){const _0x491dbc=_0x9c6fcf;VisuMZ[_0x491dbc(0x8f5)][_0x491dbc(0x3b2)][_0x491dbc(0x7df)](this,_0x2dc7d3),this['callNextMethod']();},VisuMZ[_0x9c6fcf(0x8f5)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2ea)],Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2ea)]=function(_0x530d91,_0x5fe282){const _0x1bc808=_0x9c6fcf;VisuMZ[_0x1bc808(0x8f5)][_0x1bc808(0x984)][_0x1bc808(0x7df)](this,_0x530d91,_0x5fe282),this['callNextMethod']();},VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x67f)]=Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x5a1)],Window_BattleLog['prototype']['performCollapse']=function(_0x154724){const _0x1038d0=_0x9c6fcf;VisuMZ['BattleCore'][_0x1038d0(0x67f)]['call'](this,_0x154724),this['callNextMethod']();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x8a7)]=function(_0x4cbfe6,_0x5907c9){const _0x3c856b=_0x9c6fcf;_0x4cbfe6[_0x3c856b(0x8a7)](_0x5907c9),this['callNextMethod']();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xaac)]=function(_0x8aefca,_0xd7631c){const _0x56b1b6=_0x9c6fcf,_0x74b7ce=_0x8aefca[_0x56b1b6(0xa5e)]();_0x74b7ce<=0x0?SoundManager[_0x56b1b6(0x706)]():this[_0x56b1b6(0x18f)](_0xd7631c,_0x74b7ce);},Window_BattleLog['prototype']['applyImmortal']=function(_0x2ab275,_0x39f880,_0x30df15){const _0x15184f=_0x9c6fcf,_0x246997=[_0x2ab275][_0x15184f(0x312)](_0x39f880);for(const _0x37391f of _0x246997){if(!_0x37391f)continue;_0x37391f[_0x15184f(0xb5b)](_0x30df15);}this[_0x15184f(0x792)]();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x499)]=function(_0xd5d4dc){const _0x407963=_0x9c6fcf;this[_0x407963(0x4a0)]=_0xd5d4dc;},Window_BattleLog['prototype'][_0x9c6fcf(0x297)]=function(_0x4b8d43,_0x127411){const _0x154861=_0x9c6fcf;for(const _0xe684ff of _0x4b8d43){if(!_0xe684ff)continue;_0xe684ff['requestMotion'](_0x127411);}this[_0x154861(0x792)]();},Window_BattleLog['prototype']['performMoveToPoint']=function(_0x50b131,_0x2c606f,_0x29e072,_0x21a082,_0x50c778,_0x4ec7a7){const _0x372de0=_0x9c6fcf;_0x50b131['moveBattlerToPoint'](_0x2c606f,_0x29e072,_0x21a082,_0x50c778,_0x4ec7a7,-0x1),this[_0x372de0(0x792)]();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x86d)]=function(_0x577196,_0x127c85,_0x45b8ee,_0x59c128,_0x1069f1,_0x58df37,_0x590783){const _0x120a45=_0x9c6fcf,_0x2b5d43=Math[_0x120a45(0x878)](..._0x127c85[_0x120a45(0x1f9)](_0x25751b=>_0x25751b[_0x120a45(0x338)]()['_baseX']-_0x25751b[_0x120a45(0x338)]()[_0x120a45(0x899)]()/0x2)),_0x2b17c9=Math[_0x120a45(0x716)](..._0x127c85['map'](_0x5a8bac=>_0x5a8bac['battler']()['_baseX']+_0x5a8bac['battler']()[_0x120a45(0x899)]()/0x2)),_0x106399=Math['min'](..._0x127c85[_0x120a45(0x1f9)](_0x5b63c5=>_0x5b63c5['battler']()[_0x120a45(0x46a)]-_0x5b63c5['battler']()[_0x120a45(0x3e7)]())),_0x5cc149=Math[_0x120a45(0x716)](..._0x127c85[_0x120a45(0x1f9)](_0x5caddb=>_0x5caddb[_0x120a45(0x338)]()[_0x120a45(0x46a)])),_0x19ba0b=_0x127c85[_0x120a45(0x4e3)](_0x13f613=>_0x13f613['isActor']())['length'],_0x2e845e=_0x127c85['filter'](_0x5aecf2=>_0x5aecf2[_0x120a45(0x3fd)]())[_0x120a45(0x88e)];let _0x2f980e=0x0,_0xe4b52e=0x0;if(_0x45b8ee['match'](/front/i))_0x2f980e=_0x19ba0b>=_0x2e845e?_0x2b5d43:_0x2b17c9;else{if(_0x45b8ee[_0x120a45(0x3c6)](/middle/i))_0x2f980e=(_0x2b5d43+_0x2b17c9)/0x2,_0x590783=-0x1;else _0x45b8ee['match'](/back/i)&&(_0x2f980e=_0x19ba0b>=_0x2e845e?_0x2b17c9:_0x2b5d43);}if(_0x45b8ee[_0x120a45(0x3c6)](/head/i))_0xe4b52e=_0x106399;else{if(_0x45b8ee[_0x120a45(0x3c6)](/center/i)){_0xe4b52e=(_0x106399+_0x5cc149)/0x2;if(_0x577196[_0x120a45(0x338)]())_0xe4b52e+=_0x577196[_0x120a45(0x338)]()[_0x120a45(0x202)]/0x2;}else _0x45b8ee[_0x120a45(0x3c6)](/base/i)&&(_0xe4b52e=_0x5cc149);}_0x577196[_0x120a45(0x4af)](_0x2f980e,_0xe4b52e,_0x59c128,_0x1069f1,_0x58df37,_0x590783),this[_0x120a45(0x792)]();},Window_BattleLog[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x540)]=function(_0x45007a,_0x366e8d,_0x368213){const _0xa0da62=_0x9c6fcf;for(const _0x54eb38 of _0x45007a){if(!_0x54eb38)continue;_0x54eb38[_0xa0da62(0x7b1)](_0x366e8d,_0x368213);}this[_0xa0da62(0x792)]();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget['prototype']=Object[_0x9c6fcf(0x866)](Window_Command[_0x9c6fcf(0x1ef)]),Window_BattleMultiTarget[_0x9c6fcf(0x1ef)]['constructor']=Window_BattleMultiTarget,VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['MultiTarget']=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['MultiTarget']||{},Window_BattleMultiTarget[_0x9c6fcf(0xaa2)]=VisuMZ['BattleCore']['Settings']['MultiTarget']['WindowWidth']??0x118,Window_BattleMultiTarget[_0x9c6fcf(0x145)]=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0x90a)][_0x9c6fcf(0x823)]??0x2,Window_BattleMultiTarget[_0x9c6fcf(0x351)]=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['MultiTarget'][_0x9c6fcf(0x794)]??!![],Window_BattleMultiTarget[_0x9c6fcf(0x526)]=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['MultiTarget'][_0x9c6fcf(0x91e)]??_0x9c6fcf(0x996),Window_BattleMultiTarget[_0x9c6fcf(0xb4f)]=VisuMZ['BattleCore'][_0x9c6fcf(0x19c)][_0x9c6fcf(0x90a)]['AllEnemiesText']??_0x9c6fcf(0xb0c),Window_BattleMultiTarget[_0x9c6fcf(0x742)]=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0x90a)][_0x9c6fcf(0x5d1)]??0x0,Window_BattleMultiTarget[_0x9c6fcf(0x2a6)]=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0x90a)][_0x9c6fcf(0x63d)]??0x0,Window_BattleMultiTarget[_0x9c6fcf(0x85c)]=VisuMZ['BattleCore'][_0x9c6fcf(0x19c)][_0x9c6fcf(0x90a)][_0x9c6fcf(0x2d0)]??0x0,Window_BattleMultiTarget[_0x9c6fcf(0x22c)]=VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['MultiTarget'][_0x9c6fcf(0x304)]??0x0,Window_BattleMultiTarget['prototype'][_0x9c6fcf(0x32f)]=function(_0x359cc1,_0xf2e2ab){const _0xc50ec7=_0x9c6fcf;this[_0xc50ec7(0xa41)]=_0xf2e2ab,Window_Command[_0xc50ec7(0x1ef)][_0xc50ec7(0x32f)]['call'](this,_0x359cc1),this[_0xc50ec7(0x136)](Window_BattleMultiTarget[_0xc50ec7(0x145)]),this[_0xc50ec7(0xa91)](),this['hide'](),this['deselect']();},Window_BattleMultiTarget['prototype']['forActor']=function(){const _0x2f2c5f=_0x9c6fcf;return this[_0x2f2c5f(0xa41)];},Window_BattleMultiTarget[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xabe)]=function(){const _0x18f5d1=_0x9c6fcf;let _0x594f43=this[_0x18f5d1(0x854)]()?Window_BattleMultiTarget['ALL_ACTORS']:Window_BattleMultiTarget[_0x18f5d1(0xb4f)];if(Imported[_0x18f5d1(0xb00)]&&Window_BattleMultiTarget[_0x18f5d1(0x351)]){this['_buttonKey']=this[_0x18f5d1(0x854)]()?_0x18f5d1(0x16c):'pageup',this[_0x18f5d1(0x1cc)]=TextManager[_0x18f5d1(0x643)](this[_0x18f5d1(0x8d2)]);const _0x5bbf56=VisuMZ['CoreEngine'][_0x18f5d1(0x19c)][_0x18f5d1(0x484)][_0x18f5d1(0x641)];_0x594f43=_0x5bbf56['format'](this[_0x18f5d1(0x1cc)],_0x594f43);}this['addCommand'](_0x594f43,_0x18f5d1(0x69d));},Window_BattleMultiTarget[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x898)]=function(_0x240d75){const _0x265a1a=_0x9c6fcf,_0x10cc3f=this['itemLineRect'](_0x240d75);this['resetTextColor'](),this['changePaintOpacity'](this['isCommandEnabled'](_0x240d75));const _0x48651b=this[_0x265a1a(0x174)](_0x240d75),_0x12c29b=this[_0x265a1a(0xae4)](_0x48651b)['width'],_0xbd681d=_0x10cc3f['x']+Math['floor']((_0x10cc3f[_0x265a1a(0xac8)]-_0x12c29b)/0x2);this[_0x265a1a(0x97e)](_0x48651b,_0xbd681d,_0x10cc3f['y'],_0x10cc3f[_0x265a1a(0xac8)]);},Window_BattleMultiTarget[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x255)]=function(){const _0x2035d5=_0x9c6fcf;Window_Command[_0x2035d5(0x1ef)]['update'][_0x2035d5(0x7df)](this),this[_0x2035d5(0x88f)](),this[_0x2035d5(0x9e7)]();},Window_BattleMultiTarget[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x88f)]=function(){const _0x1efbe1=_0x9c6fcf;this['visible']=this[_0x1efbe1(0x2fc)]();},Window_BattleMultiTarget[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2fc)]=function(){const _0x195de5=_0x9c6fcf,_0x340575=BattleManager['inputtingAction'](),_0x3701a9=_0x340575&&_0x340575['canSingleOrMultipleSelect']();if(!_0x3701a9)return![];const _0x3a3449=SceneManager[_0x195de5(0x90f)];if(this[_0x195de5(0x854)]()){if(_0x3a3449[_0x195de5(0x6d3)][_0x195de5(0x313)]&&_0x3a3449['_actorWindow']['_handlers']['pagedown'])return!![];if(_0x3a3449[_0x195de5(0x3ad)][_0x195de5(0x313)]&&_0x3a3449['_enemyWindow'][_0x195de5(0x63e)][_0x195de5(0x16c)])return!![];}else{if(_0x3a3449[_0x195de5(0x3ad)][_0x195de5(0x313)]&&_0x3a3449[_0x195de5(0x3ad)][_0x195de5(0x63e)]['pageup'])return!![];}return![];},Window_BattleMultiTarget['prototype'][_0x9c6fcf(0x9e7)]=function(){const _0x3ce64b=_0x9c6fcf;if(!Imported[_0x3ce64b(0xb00)])return;this[_0x3ce64b(0x1cc)]!==TextManager[_0x3ce64b(0x643)](this[_0x3ce64b(0x8d2)])&&this[_0x3ce64b(0x2c7)]();},Window_BattleMultiTarget[_0x9c6fcf(0x1ef)]['processTouch']=function(){const _0x3c6fc2=_0x9c6fcf;if(this[_0x3c6fc2(0x9cb)]&&TouchInput[_0x3c6fc2(0x867)]()){const _0x4d6e69=this[_0x3c6fc2(0x22b)]();if(_0x4d6e69>=0x0){const _0x8abcac=this[_0x3c6fc2(0x854)]()?_0x3c6fc2(0x16c):_0x3c6fc2(0xb58);Input[_0x3c6fc2(0x315)](_0x8abcac);}}};function Window_DamageCounter(){const _0x39160c=_0x9c6fcf;this[_0x39160c(0x32f)](...arguments);}Window_DamageCounter[_0x9c6fcf(0x1ef)]=Object[_0x9c6fcf(0x866)](Window_Base[_0x9c6fcf(0x1ef)]),Window_DamageCounter['prototype']['constructor']=Window_DamageCounter,Window_DamageCounter[_0x9c6fcf(0x58c)]={'enabled':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['ComboWindow'][_0x9c6fcf(0x524)]??!![],'customFontFace':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['ComboWindow'][_0x9c6fcf(0x619)]??'','textAlign':VisuMZ[_0x9c6fcf(0x8f5)]['Settings'][_0x9c6fcf(0xb20)][_0x9c6fcf(0x618)]??_0x9c6fcf(0x852),'hitsDmgFmt':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['ComboWindow']['hitsDmgFmt']??'\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','hitsHealFmt':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0xb20)]['hitsHealFmt']??_0x9c6fcf(0x687),'totalDmgFmt':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['ComboWindow'][_0x9c6fcf(0x2ce)]??_0x9c6fcf(0x993),'totalHealFmt':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0xb20)]['totalHealFmt']??_0x9c6fcf(0x910),'fadeShiftX':VisuMZ['BattleCore'][_0x9c6fcf(0x19c)]['ComboWindow'][_0x9c6fcf(0x909)]??-0x2,'fadeShiftY':VisuMZ['BattleCore'][_0x9c6fcf(0x19c)][_0x9c6fcf(0xb20)]['fadeShiftY']??0x0,'positionOffsetX':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0xb20)][_0x9c6fcf(0x1d8)]??0x0,'positionOffsetY':VisuMZ['BattleCore']['Settings'][_0x9c6fcf(0xb20)][_0x9c6fcf(0x5c7)]??0x0,'updateDuration':VisuMZ[_0x9c6fcf(0x8f5)]['Settings'][_0x9c6fcf(0xb20)][_0x9c6fcf(0x539)]??0x14,'minimumStayDuration':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)][_0x9c6fcf(0xb20)]['minimumStayDuration']??0x28,'minimumHits':VisuMZ['BattleCore'][_0x9c6fcf(0x19c)][_0x9c6fcf(0xb20)][_0x9c6fcf(0x902)]??0x1,'opacitySpeed':VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x19c)]['ComboWindow']['opacitySpeed']??0x10},Window_DamageCounter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x32f)]=function(_0x544ae6){const _0x1a0163=_0x9c6fcf;this[_0x1a0163(0x305)]=0x0,Window_Base['prototype'][_0x1a0163(0x32f)][_0x1a0163(0x7df)](this,_0x544ae6),this[_0x1a0163(0x6b3)]=_0x544ae6['x'],this['_targetY']=_0x544ae6['y'],this[_0x1a0163(0x364)](),this[_0x1a0163(0x136)](0x2);},Window_DamageCounter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x364)]=function(){const _0x43d5f0=_0x9c6fcf;this[_0x43d5f0(0x124)]=0x0,this[_0x43d5f0(0x7ed)]=0x0,this['_totalDamage']=0x0,this['_targetHits']=0x0,this['_targetDamage']=0x0;},Window_DamageCounter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x329)]=function(){const _0x48ed41=_0x9c6fcf;Window_Base[_0x48ed41(0x1ef)][_0x48ed41(0x329)][_0x48ed41(0x7df)](this);const _0x3f27c2=Window_DamageCounter[_0x48ed41(0x58c)];_0x3f27c2[_0x48ed41(0x234)]?this[_0x48ed41(0x80f)][_0x48ed41(0x8ef)]=_0x3f27c2['customFontFace']:this['contents'][_0x48ed41(0x8ef)]=$gameSystem[_0x48ed41(0x37c)]();};var $comboWindowReset=function(){const _0x24890a=_0x9c6fcf;if(!SceneManager[_0x24890a(0x319)]())return;const _0x454271=SceneManager[_0x24890a(0x90f)][_0x24890a(0xa56)];if(_0x454271)_0x454271[_0x24890a(0x364)]();};function _0x5cad(_0x2e92e3,_0xce40de){const _0x610896=_0x6108();return _0x5cad=function(_0x5cad63,_0x20338c){_0x5cad63=_0x5cad63-0x120;let _0xc375a8=_0x610896[_0x5cad63];return _0xc375a8;},_0x5cad(_0x2e92e3,_0xce40de);}Window_DamageCounter['prototype'][_0x9c6fcf(0xa05)]=function(_0x14d2a2){const _0x2cff10=_0x9c6fcf;this[_0x2cff10(0x5b5)]+=Math[_0x2cff10(0xb65)](_0x14d2a2);const _0x105060=Window_DamageCounter['SETTINGS'];this[_0x2cff10(0x124)]=_0x105060[_0x2cff10(0x539)],this[_0x2cff10(0x5b5)]>=_0x105060[_0x2cff10(0x902)]&&(this[_0x2cff10(0x305)]=_0x105060[_0x2cff10(0x894)]);};var $comboWindowIncreaseHits=function(_0x54fb34){const _0xe8674c=_0x9c6fcf;if(!SceneManager[_0xe8674c(0x319)]())return;const _0x2d8622=SceneManager[_0xe8674c(0x90f)]['_damageCounterWindow'];if(_0x2d8622)_0x2d8622[_0xe8674c(0xa05)](_0x54fb34);};Window_DamageCounter['prototype'][_0x9c6fcf(0xb2f)]=function(_0x2b7ef4){const _0x206362=_0x9c6fcf;this[_0x206362(0xa08)]+=Math['round'](_0x2b7ef4);const _0x2ba7aa=Window_DamageCounter[_0x206362(0x58c)];this['_updateDuration']=_0x2ba7aa[_0x206362(0x539)],this['_targetHits']>=_0x2ba7aa[_0x206362(0x902)]&&(this[_0x206362(0x305)]=_0x2ba7aa['minimumStayDuration']);};var $comboWindowIncreaseDamage=function(_0x4a266b){const _0xa045a9=_0x9c6fcf;if(!SceneManager[_0xa045a9(0x319)]())return;const _0x4e70e0=SceneManager[_0xa045a9(0x90f)][_0xa045a9(0xa56)];if(_0x4e70e0)_0x4e70e0[_0xa045a9(0xb2f)](_0x4a266b);},$comboWindowIncreaseHealing=function(_0x507b29){const _0x335c2e=_0x9c6fcf;if(!SceneManager['isSceneBattle']())return;const _0x8d0beb=SceneManager[_0x335c2e(0x90f)][_0x335c2e(0xa56)];if(_0x8d0beb)_0x8d0beb[_0x335c2e(0xb2f)](-_0x507b29);};VisuMZ[_0x9c6fcf(0x8f5)][_0x9c6fcf(0x247)]=Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x2bd)],Scene_Battle[_0x9c6fcf(0x1ef)]['createAllWindows']=function(){const _0x5d576e=_0x9c6fcf;this[_0x5d576e(0xa35)](),VisuMZ[_0x5d576e(0x8f5)][_0x5d576e(0x247)][_0x5d576e(0x7df)](this);},Scene_Battle[_0x9c6fcf(0x1ef)][_0x9c6fcf(0xa35)]=function(){const _0x2520fb=_0x9c6fcf;if(!Window_DamageCounter['SETTINGS'][_0x2520fb(0xa82)])return;const _0x5a1772=this[_0x2520fb(0x938)](),_0x594b14=new Window_DamageCounter(_0x5a1772);this['addWindow'](_0x594b14),this['_damageCounterWindow']=_0x594b14;},Scene_Battle['prototype'][_0x9c6fcf(0x938)]=function(){const _0x2f5af3=_0x9c6fcf;if(VisuMZ['BattleCore'][_0x2f5af3(0x19c)][_0x2f5af3(0xb20)]['ComboWindow_RectJS'])return VisuMZ[_0x2f5af3(0x8f5)]['Settings'][_0x2f5af3(0xb20)][_0x2f5af3(0x6d0)][_0x2f5af3(0x7df)](this);const _0x16fdce=Math[_0x2f5af3(0x571)](Graphics[_0x2f5af3(0xac8)]/0x4),_0x4c4c9d=this['calcWindowHeight'](0x2,!![]),_0xfa995f=0x0+this[_0x2f5af3(0x840)](),_0x539936=Math['round'](Graphics[_0x2f5af3(0x5bb)]*0x1/0x3)+this[_0x2f5af3(0x8bb)]();return new Rectangle(_0xfa995f,_0x539936,_0x16fdce,_0x4c4c9d);},Scene_Battle['prototype']['comboWindowOffsetX']=function(){const _0x266cfe=_0x9c6fcf;return Window_DamageCounter['SETTINGS'][_0x266cfe(0x907)];},Scene_Battle[_0x9c6fcf(0x1ef)]['comboWindowOffsetY']=function(){const _0x42e663=_0x9c6fcf;return Window_DamageCounter[_0x42e663(0x58c)][_0x42e663(0x16e)];},Window_DamageCounter['prototype']['update']=function(){const _0x5ae3a5=_0x9c6fcf;Window_Base[_0x5ae3a5(0x1ef)][_0x5ae3a5(0x255)][_0x5ae3a5(0x7df)](this),this[_0x5ae3a5(0x583)](),this[_0x5ae3a5(0x3ba)]();},Window_DamageCounter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x583)]=function(){const _0x157583=_0x9c6fcf;if(this[_0x157583(0x124)]<=0x0)return;const _0x3c7d14=this[_0x157583(0x124)];this[_0x157583(0x7ed)]=this[_0x157583(0x5b5)],this['_totalDamage']=(this[_0x157583(0x4ff)]*(_0x3c7d14-0x1)+this[_0x157583(0xa08)])/_0x3c7d14,this[_0x157583(0x124)]--,this[_0x157583(0x124)]<=0x0&&(this['_totalHits']=this['_targetHits'],this['_totalDamage']=this[_0x157583(0xa08)]),this[_0x157583(0x2c7)]();},Window_DamageCounter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x3ba)]=function(){const _0x4ae397=_0x9c6fcf,_0x4473c3=Window_DamageCounter[_0x4ae397(0x58c)],_0x518c9f=this[_0x4ae397(0x2fc)](),_0x23d6f6=_0x4473c3[_0x4ae397(0x130)]||0x1;if(_0x518c9f&&this[_0x4ae397(0x906)]<0xff)this[_0x4ae397(0x906)]+=_0x23d6f6;else!_0x518c9f&&this['contentsOpacity']>0x0&&(this['contentsOpacity']-=_0x23d6f6,this['x']+=_0x4473c3[_0x4ae397(0x909)]||0x0,this['y']+=_0x4473c3['fadeShiftY']||0x0);},Window_DamageCounter[_0x9c6fcf(0x1ef)]['visibilityState']=function(){const _0x1b69fa=_0x9c6fcf,_0x2a50eb=Window_DamageCounter[_0x1b69fa(0x58c)];if(this['_targetHits']>=_0x2a50eb[_0x1b69fa(0x902)])return!![];if(this[_0x1b69fa(0x305)]-->0x0)return!![];return![];},VisuMZ['BattleCore'][_0x9c6fcf(0x9c3)]=Game_Action[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x1fd)],Game_Action[_0x9c6fcf(0x1ef)]['executeHpDamage']=function(_0x14f0cf,_0x1cb10){const _0x150500=_0x9c6fcf;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x1cb10),VisuMZ[_0x150500(0x8f5)][_0x150500(0x9c3)][_0x150500(0x7df)](this,_0x14f0cf,_0x1cb10);},VisuMZ['BattleCore'][_0x9c6fcf(0x6b6)]=BattleManager[_0x9c6fcf(0x497)],BattleManager[_0x9c6fcf(0x497)]=function(){const _0xbe31db=_0x9c6fcf;$comboWindowReset(),VisuMZ[_0xbe31db(0x8f5)]['BattleManager_endAction_ComboWindow'][_0xbe31db(0x7df)](this);},Window_DamageCounter['prototype']['refresh']=function(){const _0x3b35c2=_0x9c6fcf;this[_0x3b35c2(0x80f)][_0x3b35c2(0x4ec)](),this[_0x3b35c2(0x43f)](),this['x']=this['_targetX'],this['y']=this[_0x3b35c2(0x7f1)];},Window_DamageCounter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x6a7)]=function(){const _0x18e3d4=_0x9c6fcf,_0x13686a=Window_DamageCounter['SETTINGS'];return _0x13686a[_0x18e3d4(0x192)]||_0x18e3d4(0x852);},Window_DamageCounter['prototype'][_0x9c6fcf(0x219)]=function(){const _0x1e4c0e=_0x9c6fcf,_0xa33e9a=Window_DamageCounter['SETTINGS'];let _0x54ae6d=this[_0x1e4c0e(0x4ff)]>=0x0?_0xa33e9a[_0x1e4c0e(0x53c)]:_0xa33e9a[_0x1e4c0e(0x91c)];return _0x54ae6d[_0x1e4c0e(0x9da)](Math[_0x1e4c0e(0x278)](Math[_0x1e4c0e(0x571)](this[_0x1e4c0e(0x7ed)])));},Window_DamageCounter[_0x9c6fcf(0x1ef)][_0x9c6fcf(0x932)]=function(){const _0x1eb6a3=_0x9c6fcf,_0x49c630=Window_DamageCounter[_0x1eb6a3(0x58c)];let _0x1cf6af=this['_totalDamage']>=0x0?_0x49c630[_0x1eb6a3(0x2ce)]:_0x49c630['totalHealFmt'];return _0x1cf6af[_0x1eb6a3(0x9da)](Math[_0x1eb6a3(0x278)](Math[_0x1eb6a3(0xb65)](this[_0x1eb6a3(0x4ff)])));},Window_DamageCounter[_0x9c6fcf(0x1ef)]['drawComboText']=function(){const _0x3a0ddc=_0x9c6fcf;if(VisuMZ[_0x3a0ddc(0x8f5)]['Settings'][_0x3a0ddc(0xb20)][_0x3a0ddc(0x349)])return VisuMZ[_0x3a0ddc(0x8f5)][_0x3a0ddc(0x19c)][_0x3a0ddc(0xb20)]['ComboWindow_DrawJS'][_0x3a0ddc(0x7df)](this);let _0x5a4fc9=0x0,_0x450b43=0x0;const _0xcda638=this[_0x3a0ddc(0x219)](),_0x3792d1=this['textSizeEx'](_0xcda638);if(this[_0x3a0ddc(0x6a7)]()===_0x3a0ddc(0x144))_0x5a4fc9=this['innerWidth']-this[_0x3a0ddc(0x697)]()-_0x3792d1[_0x3a0ddc(0xac8)];else this['textAlignment']()===_0x3a0ddc(0x328)?_0x5a4fc9=Math['floor']((this[_0x3a0ddc(0xac9)]-_0x3792d1['width'])/0x2):_0x5a4fc9=this[_0x3a0ddc(0x697)]();this['drawTextEx'](_0xcda638,_0x5a4fc9,_0x450b43),_0x450b43+=Math[_0x3a0ddc(0x571)](this['lineHeight']()*0x2/0x3);const _0x258faa=this[_0x3a0ddc(0x932)](),_0x4ee02f=this[_0x3a0ddc(0xae4)](_0x258faa);if(this[_0x3a0ddc(0x6a7)]()===_0x3a0ddc(0x144))_0x5a4fc9=this[_0x3a0ddc(0xac9)]-this['itemPadding']()-_0x4ee02f[_0x3a0ddc(0xac8)];else this[_0x3a0ddc(0x6a7)]()===_0x3a0ddc(0x328)?_0x5a4fc9=Math[_0x3a0ddc(0x52a)]((this['innerWidth']-_0x4ee02f[_0x3a0ddc(0xac8)])/0x2):_0x5a4fc9=this[_0x3a0ddc(0x697)]();this['drawTextEx'](_0x258faa,_0x5a4fc9,_0x450b43);};