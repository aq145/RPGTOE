// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins =
[
{"name":"CGMZ_Core","status":true,"description":"Core CGMZ Plugin, should be placed above all other CGMZ Plugins.","parameters":{"Check for Updates":"true","Dev Tools on Start":"false","Show FPS Counter":"true","Fullscreen":"false","Simulate Production Env":"false","Force Locale":"","Fallback Locale":"en-US"}},
{"name":"CGMZ_MenuCommandWindow","status":true,"description":"Manage the menu command window","parameters":{"Commands":"[\"{\\\"Command Name\\\":\\\"Achivements\\\",\\\"Icon\\\":\\\"0\\\",\\\"Command Symbol\\\":\\\"\\\",\\\"JS Command\\\":\\\"SceneManager.push(CGMZ_Scene_Achievements);\\\",\\\"JS Show Condition\\\":\\\"return true;\\\",\\\"JS Enable Condition\\\":\\\"return true;\\\",\\\"Enable Switch\\\":\\\"0\\\",\\\"Show Switch\\\":\\\"0\\\",\\\"Subcategory\\\":\\\"\\\",\\\"Required Item\\\":\\\"0\\\",\\\"Actor Select\\\":\\\"false\\\",\\\"Background Image\\\":\\\"\\\",\\\"Background Image X\\\":\\\"0\\\",\\\"Background Image Y\\\":\\\"0\\\"}\"]","Command Padding":"8","Alignment":"center","Icon Alignment":"left","Keep Original Commands":"true","Report Command Size":"false"}},
{"name":"CGMZ_ToastManager","status":true,"description":"Manages CGMZ toast (or pop up) windows for your game","parameters":{"Max Window Count":"1","Spacing":"12","Width":"360","Fixed Width":"false","Height":"2","Fixed Height":"true","Display Time":"240","Display From Bottom":"true"}},
{"name":"CGMZ_Achievements","status":true,"description":"Creates a powerful achievement system","parameters":{"CGMZ Achievements":"","Achievements":"[\"{\\\"Name\\\":\\\"Placebo\\\",\\\"Points\\\":\\\"10\\\",\\\"Pre Description\\\":\\\"\\\\\\\"????\\\\\\\"\\\",\\\"Post Description\\\":\\\"\\\\\\\"Buy a banadol.\\\\\\\"\\\",\\\"Category\\\":\\\"01\\\",\\\"Difficulty\\\":\\\"Easy\\\",\\\"Secret\\\":\\\"true\\\",\\\"Automatic\\\":\\\"true\\\",\\\"Rewards\\\":\\\"{\\\\\\\"Currency\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Items\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Weapons\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Armors\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Switches\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Variables\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Common Event\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Custom\\\\\\\":\\\\\\\"[]\\\\\\\"}\\\",\\\"Requirements\\\":\\\"{\\\\\\\"Currency\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Items\\\\\\\":\\\\\\\"[\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Item\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"23\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Amount\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\"]\\\\\\\",\\\\\\\"Weapons\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Armors\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Switches\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Variables\\\\\\\":\\\\\\\"[]\\\\\\\",\\\\\\\"Saves\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Playtime\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Steps\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Battles\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Wins\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Escapes\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Achievements Earned\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Achievement Points\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Encyclopedia Total\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Encyclopedia Bestiary\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Encyclopedia Items\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Encyclopedia Armors\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Encyclopedia Weapons\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Encyclopedia Skills\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Encyclopedia States\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Professions\\\\\\\":\\\\\\\"[]\\\\\\\"}\\\",\\\"Popup\\\":\\\"{\\\\\\\"Display\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"Image\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Color\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Sound Effect\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Volume\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"90\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Pitch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"100\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Pan\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"Width\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"Windowskin\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Tone\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"Red\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"-256\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Green\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Blue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"Background Style\\\\\\\":\\\\\\\"Window\\\\\\\"}\\\",\\\"List Image\\\":\\\"\\\",\\\"List Image X\\\":\\\"0\\\",\\\"List Image Y\\\":\\\"0\\\"}\"]","Categories":"[\"{\\\"id\\\":\\\"01\\\",\\\"Name\\\":\\\"Secret\\\"}\"]","Achievement Scene Options":"","Achievement Display Info":"[\"Name\",\"Earn Date\",\"Difficulty\",\"Points\",\"Description\",\"Requirements\",\"Rewards\"]","Reward Display Order":"[\"Currency\",\"Items\",\"Switches\",\"Variables\",\"Custom\"]","Criteria Display Order":"[\"Currency\",\"Items\",\"Switches\",\"Variables\",\"Steps\",\"Saves\",\"Wins\",\"Escapes\",\"Achievements\",\"Achievement Points\",\"Playtime\",\"Encyclopedia Total\",\"Encyclopedia Bestiary\",\"Encyclopedia Items\",\"Encyclopedia Weapons\",\"Encyclopedia Armors\",\"Encyclopedia Skills\",\"Encyclopedia States\",\"Professions\"]","Disable Touch UI Space":"false","List Window Right":"false","List Window Width":"33","Total Window Style":"Vertical","Category Earned Count":"false","Points In List Window":"false","ShowSecretAchievements":"false","SecretText":"??????","ShowCriteriaAfterCompletion":"true","Show Rewards After Fail":"true","DateFormat":"0","ScrollSpeed":"1","ScrollWait":"300","Scroll Deceleration":"0.92","Auto Scroll":"true","Show Total Points":"false","Show Total Achievements":"false","Transparent Windows":"false","Scene Background":"","Category Columns":"4","Window Options":"","Category Windowskin":"","Category Padding":"-1","Category Back Opacity":"-1","Category Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","List Windowskin":"","List Padding":"-1","List Back Opacity":"-1","List Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","Total Windowskin":"","Total Padding":"-1","Total Back Opacity":"-1","Total Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","Display Windowskin":"","Display Padding":"-1","Display Back Opacity":"-1","Display Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","Text Options":"","Reward Text":"Rewards:","Requirement Text":"Requirements:","Difficulty Text":"Difficulty:","Description Text":"Description:","Points Text":"Points:","Points Window Text":"Points:","Unearned Text":"Keep playing to earn this achievement","Earned Text":"Achievement earned on:","Failed Text":"\\c[2]Achievement Failed\\c[0]","Earned Count Text":"Earned:","Basic Info Header Text":"Info","Description Header Text":"Description","Requirement Header Text":"Requirements","Reward Header Text":"Rewards","Steps Text":"Steps","Saves Text":"Saves","Battles Text":"Battles","Wins Text":"Wins","Escapes Text":"Escapes","Achievements Progress Text":"Achievements","Points Progress Text":"Points","Prof Level Text":"Level","Played Text":"Played","Enc Total Text":"% Enc. Total","Enc Bestiary Text":"% Enc. Bestiary","Enc Items Text":"% Enc. Items","Enc Weapons Text":"% Enc. Weapons","Enc Armors Text":"% Enc. Armors","Enc Skills Text":"% Enc. Skills","Enc States Text":"% Enc. States","List Point Text":"Points:","Total Window Alignment":"left","List Window Alignment":"left","Category Window Alignment":"center","Currency Unit Space":"false","Totals Separator":"/","Label Color":"16","Header Color 1":"1","Header Color 2":"0","Gauge Colors":"","CurrencyGaugeColor1":"6","CurrencyGaugeColor2":"17","GenericGaugeColor1":"28","GenericGaugeColor2":"29","ItemGaugeColor1":"22","ItemGaugeColor2":"23","SwitchVarGaugeColor1":"20","SwitchVarGaugeColor2":"21","Integrations":"","ShowAchievementPop":"true","AchievementEarnedText":"Achievement Earned","AchievementEarnedColor":"3","AchievementEarnedAlignment":"center","AchievementEarnedSound":"{\"Name\":\"\",\"Volume\":\"90\",\"Pitch\":\"100\",\"Pan\":\"0\"}","Debug Options":"","Report List Rect":"false"}},
{"name":"CGMZ_FastTravel","status":true,"description":"Allows you to fast travel between locations in your game","parameters":{"Fast Travel Points":"[\"{\\\"Name\\\":\\\"tw\\\",\\\"Discovered\\\":\\\"false\\\",\\\"Enabled\\\":\\\"true\\\",\\\"Description\\\":\\\"\\\",\\\"Category\\\":\\\"twq\\\",\\\"Image\\\":\\\"\\\",\\\"Map\\\":\\\"1\\\",\\\"X\\\":\\\"0\\\",\\\"Y\\\":\\\"0\\\",\\\"Direction\\\":\\\"2\\\",\\\"Gold Cost\\\":\\\"0\\\",\\\"Item Cost Item\\\":\\\"0\\\",\\\"Item Cost Amount\\\":\\\"0\\\",\\\"Travel Sound Effect\\\":\\\"\\\",\\\"Toast Sound Effect\\\":\\\"\\\"}\",\"{\\\"Name\\\":\\\"tq\\\",\\\"Discovered\\\":\\\"true\\\",\\\"Enabled\\\":\\\"true\\\",\\\"Description\\\":\\\"\\\",\\\"Category\\\":\\\"twq\\\",\\\"Image\\\":\\\"\\\",\\\"Map\\\":\\\"0\\\",\\\"X\\\":\\\"0\\\",\\\"Y\\\":\\\"0\\\",\\\"Direction\\\":\\\"2\\\",\\\"Gold Cost\\\":\\\"0\\\",\\\"Item Cost Item\\\":\\\"0\\\",\\\"Item Cost Amount\\\":\\\"0\\\",\\\"Travel Sound Effect\\\":\\\"\\\",\\\"Toast Sound Effect\\\":\\\"\\\"}\"]","Window Options":"","Show Categories":"true","Use Costs":"false","Cost Text":"\\c[1]Costs:\\c[0]","Free Text":"None","Cost Window Lines":"3","List Alignment":"left","Background Image":"battlebacks1/Cyberspace","Transparent Windows":"false","Disable Touch UI Space":"false","Hide Empty Categories":"false","List Window Right":"false","List Window Width":"33","Other CGMZ Plugin Options":"","Show Discover Toast":"true","Toast Text":"\\c[1]Fast Travel Unlocked:\\c[0]"}},
{"name":"CGMZ_Credits","status":true,"description":"Creates a credits scene for your game","parameters":{"Credits":"[\"{\\\"Category\\\":\\\"Cast\\\",\\\"Credit\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Ebrahim as Ebrahim\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Mohammad As Mohammad\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Dream Saeed as Saeed\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Hinto as ???\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\"}\",\"{\\\"Category\\\":\\\"Programming\\\",\\\"Credit\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Me\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\"}\",\"{\\\"Category\\\":\\\"Audio\\\",\\\"Credit\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Me\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\"}\",\"{\\\"Category\\\":\\\"Design\\\",\\\"Credit\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Me\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\"}\",\"{\\\"Category\\\":\\\"Level Creation\\\",\\\"Credit\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Me\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\"}\",\"{\\\"Category\\\":\\\"Special Thanks\\\",\\\"Credit\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Me\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Not You\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\"}\",\"{\\\"Category\\\":\\\"THE END!\\\",\\\"Credit\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Stay tuned for more\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URL\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"URLText\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\"}\"]","Window Options":"","Scroll Speed":"1","Scroll Wait":"60","Scroll Deceleration":"0.92","Auto Scroll":"true","Window Width":"75","Window Height":"80","Credits Text":"Credits","Transparent Window":"false","Background Image":""}},
{"name":"CGMZ_GameInfo","status":true,"description":"Adds text fields to the title screen for copyright/website/etc.","parameters":{"Text Options":"","Font Size":"12","Font Outline Width":"2","Font Outline Color":"black","Font Face":"","Left Text":"0.01","Center Text":"","Right Text":"","Draw Background Rect":"false","Background Rect Height":"40","Background Gradient 1":"rgba(0, 0, 0, 0)","Background Gradient 2":"rgba(0, 0, 0, 0.5)","Button Options":"","Buttons":"[]","Opacity Step":"5"}},
{"name":"CGMZ_MenuTheme","status":true,"description":"Add a BGM to the menu","parameters":{"Default Menu Theme":"Scene9","Menu Theme Variable":"0","Variable Menu Themes":"[\"Scene7\"]"}},
{"name":"CGMZ_SkillShop","status":true,"description":"Creates a shop scene where you can buy skills","parameters":{"Price Options":"","Default Skill Prices":"[\"{\\\"skill\\\":\\\"62\\\",\\\"price\\\":\\\"5\\\"}\"]","Missing Default Price":"0","Window Options":"","Disable Touch UI Space":"false","Available Text":"Available","Already Known Text":"Already Known","Cannot Learn Text":"Cannot Learn","Restricted Text":"Restricted","Missing Prerequisites Text":"Missing Prerequisites","Learned Skills Only":"false","Draw Character":"true","Draw Face":"true","Face Height":"0"}},
{"name":"CGMZ_Crafting","status":true,"description":"Adds a crafting system to your game","parameters":{"Recipes":"[\"{\\\"Name\\\":\\\"Boat\\\",\\\"Display Name\\\":\\\"\\\",\\\"Products\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Item\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Weapon\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Armor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Gold\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Generic\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Amount\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"}\\\\\\\"]\\\",\\\"Fail Products\\\":\\\"[]\\\",\\\"Ingredients\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Item\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Weapon\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Armor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Gold\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Generic\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Amount\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Item\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Weapon\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Armor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Gold\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Generic\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Amount\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"}\\\\\\\"]\\\",\\\"Tools\\\":\\\"[]\\\",\\\"Discovered\\\":\\\"true\\\",\\\"Picture\\\":\\\"\\\",\\\"Icon\\\":\\\"315\\\",\\\"Description\\\":\\\"\\\\\\\"\\\\\\\"\\\",\\\"Success Rate\\\":\\\"100\\\",\\\"Time\\\":\\\"120\\\",\\\"Success Rate Per Level\\\":\\\"0\\\",\\\"Experience\\\":\\\"1\\\",\\\"Profession\\\":\\\"Mount\\\",\\\"Subcategory\\\":\\\"\\\",\\\"Quality\\\":\\\"\\\",\\\"Level Requirement\\\":\\\"1\\\",\\\"Craft Sound Effect\\\":\\\"{\\\\\\\"File\\\\\\\":\\\\\\\"Hammer\\\\\\\",\\\\\\\"Volume\\\\\\\":\\\\\\\"90\\\\\\\",\\\\\\\"Pitch\\\\\\\":\\\\\\\"100\\\\\\\",\\\\\\\"Pan\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"Fail Sound Effect\\\":\\\"{\\\\\\\"File\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Volume\\\\\\\":\\\\\\\"90\\\\\\\",\\\\\\\"Pitch\\\\\\\":\\\\\\\"100\\\\\\\",\\\\\\\"Pan\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"Success Sound Effect\\\":\\\"{\\\\\\\"File\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Volume\\\\\\\":\\\\\\\"90\\\\\\\",\\\\\\\"Pitch\\\\\\\":\\\\\\\"100\\\\\\\",\\\\\\\"Pan\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"Toast Sound Effect\\\":\\\"{\\\\\\\"File\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Volume\\\\\\\":\\\\\\\"90\\\\\\\",\\\\\\\"Pitch\\\\\\\":\\\\\\\"100\\\\\\\",\\\\\\\"Pan\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"Disable Toast\\\":\\\"false\\\",\\\"Disable Autodiscover\\\":\\\"false\\\",\\\"Learn On Craft\\\":\\\"[]\\\",\\\"Learn On Craft Chance\\\":\\\"[]\\\",\\\"Unlearn On Craft\\\":\\\"[]\\\",\\\"Unlearn On Craft Chance\\\":\\\"[]\\\",\\\"Success Variable\\\":\\\"0\\\",\\\"Product Unique Amount\\\":\\\"0\\\",\\\"High Quality Products\\\":\\\"[]\\\",\\\"High Quality Chance\\\":\\\"0\\\",\\\"High Quality Chance Per Level\\\":\\\"0\\\"}\",\"{\\\"Name\\\":\\\"Water\\\",\\\"Display Name\\\":\\\"Water\\\",\\\"Products\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Item\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Weapon\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Armor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Gold\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Generic\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Amount\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"}\\\\\\\"]\\\",\\\"Fail Products\\\":\\\"[]\\\",\\\"Ingredients\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Item\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"13\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Weapon\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Armor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Gold\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Generic\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Amount\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Item\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"14\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Weapon\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Armor\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Gold\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Generic\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Amount\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"}\\\\\\\"]\\\",\\\"Tools\\\":\\\"[]\\\",\\\"Discovered\\\":\\\"false\\\",\\\"Picture\\\":\\\"\\\",\\\"Icon\\\":\\\"273\\\",\\\"Description\\\":\\\"\\\\\\\"\\\\\\\"\\\",\\\"Success Rate\\\":\\\"100\\\",\\\"Time\\\":\\\"120\\\",\\\"Success Rate Per Level\\\":\\\"0\\\",\\\"Experience\\\":\\\"1\\\",\\\"Profession\\\":\\\"Consumables\\\",\\\"Subcategory\\\":\\\"\\\",\\\"Quality\\\":\\\"\\\",\\\"Level Requirement\\\":\\\"1\\\",\\\"Craft Sound Effect\\\":\\\"{\\\\\\\"File\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Volume\\\\\\\":\\\\\\\"90\\\\\\\",\\\\\\\"Pitch\\\\\\\":\\\\\\\"100\\\\\\\",\\\\\\\"Pan\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"Fail Sound Effect\\\":\\\"{\\\\\\\"File\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Volume\\\\\\\":\\\\\\\"90\\\\\\\",\\\\\\\"Pitch\\\\\\\":\\\\\\\"100\\\\\\\",\\\\\\\"Pan\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"Success Sound Effect\\\":\\\"{\\\\\\\"File\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Volume\\\\\\\":\\\\\\\"90\\\\\\\",\\\\\\\"Pitch\\\\\\\":\\\\\\\"100\\\\\\\",\\\\\\\"Pan\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"Toast Sound Effect\\\":\\\"{\\\\\\\"File\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"Volume\\\\\\\":\\\\\\\"90\\\\\\\",\\\\\\\"Pitch\\\\\\\":\\\\\\\"100\\\\\\\",\\\\\\\"Pan\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"Disable Toast\\\":\\\"false\\\",\\\"Disable Autodiscover\\\":\\\"false\\\",\\\"Learn On Craft\\\":\\\"[]\\\",\\\"Learn On Craft Chance\\\":\\\"[]\\\",\\\"Unlearn On Craft\\\":\\\"[]\\\",\\\"Unlearn On Craft Chance\\\":\\\"[]\\\",\\\"Success Variable\\\":\\\"0\\\",\\\"Product Unique Amount\\\":\\\"0\\\",\\\"High Quality Products\\\":\\\"[]\\\",\\\"High Quality Chance\\\":\\\"0\\\",\\\"High Quality Chance Per Level\\\":\\\"0\\\"}\"]","Generic Items":"[]","Categories":"[\"{\\\"Id\\\":\\\"1\\\",\\\"Command Text\\\":\\\"Mount\\\"}\"]","Crafting Options":"","Instant Crafting":"false","Automatic Learn":"false","Allow Multicraft":"false","Window Options":"","Craft From List Window":"true","Allow Filter":"true","Transparent Windows":"false","Background Image":"","Disable Touch UI Space":"false","ScrollSpeed":"1","ScrollWait":"300","Scroll Deceleration":"0.92","Auto Scroll":"true","Category Sort Order":"[]","List Window Width":"33","Multicraft Window Width":"50","List Window On Right":"false","List Windowskin":"","Category Windowskin":"","Display Windowskin":"","Progress Windowskin":"","Confirm Windowskin":"","Multicraft Windowskin":"","List Padding":"-1","Category Padding":"-1","Display Padding":"-1","Progress Padding":"-1","Confirm Padding":"-1","Multicraft Padding":"-1","List Back Opacity":"-1","Category Back Opacity":"-1","Display Back Opacity":"-1","Progress Back Opacity":"-1","Confirm Back Opacity":"-1","Multicraft Back Opacity":"-1","Category Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","List Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","Display Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","Progress Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","Confirm Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","Multicraft Tone":"{\"Red\":\"-256\",\"Green\":\"0\",\"Blue\":\"0\"}","Show Ingredient Amount":"true","Show Tool Amount":"false","Show Product Amount":"false","Show Unique Product Amount":"false","Show Fail Product Amount":"false","Show High Quality Product Amount":"false","Hide Uncraftable Recipes":"false","Show Confirm Window":"false","Show Progress Percentage":"true","Show Progress Time Remaining":"false","Progress Decimals":"2","Show Category Window":"true","Display Window Info":"[\"Name\",\"Image\",\"Times Crafted\",\"Success Rate\",\"Quality\",\"Exp\",\"Level Required\",\"Current Level\",\"Description\",\"Product Header\",\"Products\",\"Tool Header\",\"Tools\",\"Ingredient Header\",\"Ingredients\"]","Category Filter Options":"[]","Subcategory Filter Options":"[]","Quality Filter Options":"[]","Filter Button Width":"1","Filter Button Offset":"4","Filter Key":"f","Filter Gamepad":"5","Text Options":"","Description Alignment":"left","Success Rate Text":"Success Rate:","High Quality Rate Text":"High Quality Rate:","Quality Label Text":"Quality:","Subcategory Label Text":"Specialization:","Times Crafted Text":"Times Crafted:","Experience Text":"Exp Gain:","Level Requirement Text":"Level Req:","Current Level Text":"Level:","Level Abbreviation Text":"Lv.","Amount X Text":"x","Craft Confirm Text":"Craft","Craft Cancel Text":"Cancel","Progress Text":"Progress:","Success Text":"Craft Success!","Failure Text":"Craft Failed!","High Quality Text":"High Quality Craft!","Craft Quantity Text":"Amount to Craft:","Label Text Color":"16","Progress Color1":"28","Progress Color2":"29","Success Color":"29","High Quality Color":"29","Failure Color":"18","Header Color 1":"1","Header Color 2":"0","Info Header Text":"Info","Desc Header Text":"Description","Ingredient Header Text":"Ingredients","Tool Header Text":"Tools","Product Header Text":"Products","Fail Product Header Text":"Fail Products","High Quality Product Header Text":"High Quality Products","Unique Text":"Unique (%unique)","No Recipe Text":"Keep playing the game to learn more recipes!","Percent Text":"%","Sec Text":"sec","Min Text":"min","Hr Text":"hr","Remove Filter Text":"Remove Filter","Category Filter Text":"Category","Subcategory Filter Text":"Subcategory","Quality Filter Text":"Quality","Other CGMZ Plugin Options":"","Show Learn Toast":"true","Toast Text":"Learned Recipe:","Always Award Exp":"true","Hide High Level Recipes":"true","Close On Level Up":"false","Fail Rumble Duration":"0","Fail Rumble Weak Magnitude":"1.00","Fail Rumble Strong Magnitude":"1.00","Success Rumble Duration":"0","Success Rumble Weak Magnitude":"1.00","Success Rumble Strong Magnitude":"1.00"}},
{"name":"CGMZ_QuestSystem","status":true,"description":"Creates and manages quests","parameters":{"Quests":"[\"{\\\"Name\\\":\\\"Make a boat\\\",\\\"Difficulty\\\":\\\"Easy\\\",\\\"Length\\\":\\\"2 mins\\\",\\\"Location\\\":\\\"someathing\\\",\\\"Quest Giver\\\":\\\"World\\\",\\\"Category\\\":\\\"Main\\\",\\\"Recommended Level\\\":\\\"0\\\",\\\"List Image\\\":\\\"battlebacks2/Port\\\",\\\"Background Image\\\":\\\"\\\",\\\"Accept Scene Image\\\":\\\"\\\",\\\"Unstarted Objective\\\":\\\"\\\\\\\"\\\\\\\\\\\\\\\\c[3]Accept\\\\\\\\\\\\\\\\c[0] this quest to see its objectives.\\\\\\\"\\\",\\\"Unstarted Description\\\":\\\"\\\\\\\"\\\\\\\"\\\",\\\"Board Description\\\":\\\"\\\\\\\"\\\\\\\"\\\",\\\"Board Switch\\\":\\\"0\\\",\\\"Started Switch\\\":\\\"0\\\",\\\"Description\\\":\\\"[]\\\",\\\"Objectives\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"001\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Stage\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Max Progress\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Use Automatic Tracking\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Gold Tracking\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Item Tracking\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Item\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Amount\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Weapon Tracking\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Armor Tracking\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Variable Tracking\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"Objective Switch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"}\\\\\\\"]\\\",\\\"Reward Gold\\\":\\\"500\\\",\\\"Reward Exp\\\":\\\"500\\\",\\\"Reward Items\\\":\\\"[]\\\",\\\"Reward Weapons\\\":\\\"[]\\\",\\\"Reward Armors\\\":\\\"[]\\\",\\\"Reward Custom\\\":\\\"[]\\\"}\"]","Categories":"[\"{\\\"Name\\\":\\\"Main\\\",\\\"Type\\\":\\\"Category\\\",\\\"Display Name\\\":\\\"Main\\\",\\\"Icon\\\":\\\"0\\\",\\\"Description\\\":\\\"\\\\\\\"\\\\\\\"\\\",\\\"Color1\\\":\\\"rgba(32, 32, 32, 0.5)\\\",\\\"Color2\\\":\\\"rgba(0, 0, 0, 0.5)\\\",\\\"Text Color\\\":\\\"0\\\",\\\"Start Expanded\\\":\\\"true\\\"}\"]","Quest Options":"","Objective Complete Icon":"164","Objective Failed Icon":"162","Rec Level Positive Colors":"[\"#F3ED84\",\"#F3CB5E\",\"#EE9838\",\"#E46B3E\",\"#DD5D48\"]","Rec Level Equal Color":"#FFFFFF","Rec Level Negative Colors":"[\"#BEF0BD\",\"#8FEA8D\",\"#BDBDBD\",\"#32DA2F\",\"#9E9E9E\"]","Completed Quests":"","Separate Complete Quests":"true","Always Show Complete Category":"true","Completed Category":"{\"Name\":\"Completed\",\"Type\":\"Category\",\"Display Name\":\"Completed\",\"Description\":\"\\\"These are all of the quests you have \\\\\\\\c[3]completed\\\\\\\\c[0]!\\\"\",\"Color1\":\"rgba(24, 171, 109, 1)\",\"Color2\":\"rgba(31, 107, 75, 0.5)\",\"Text Color\":\"11\",\"Start Expanded\":\"true\"}","Failed Quests":"","Separate Failed Quests":"true","Always Show Failed Category":"true","Failed Category":"{\"Name\":\"Failed\",\"Type\":\"Category\",\"Display Name\":\"Failed\",\"Description\":\"\\\"These are all of the quests that you have \\\\\\\\c[2]failed\\\\\\\\c[0]!\\\"\",\"Color1\":\"rgba(110, 43, 29, 1)\",\"Color2\":\"rgba(191, 49, 19, 0.5)\",\"Text Color\":\"10\",\"Start Expanded\":\"true\"}","Pinned Quests":"","Allow Pinned Quests":"true","Always Show Pinned Category":"true","Unpin on Complete":"true","Unpin on Fail":"true","Pinned Category":"{\"Name\":\"Pinned\",\"Type\":\"Category\",\"Display Name\":\"Pinned\",\"Description\":\"\\\"Quests shown here have been pinned. To pin or unpin a quest, select the quest in the list then press OK to bring up the pin menu.\\\"\",\"Color1\":\"rgba(142, 56, 217, 0.5)\",\"Color2\":\"rgba(104, 47, 153, 0.5)\",\"Text Color\":\"0\",\"Start Expanded\":\"true\"}","Scene Options":"","Draw Category Info":"true","Quest Info Order":"[\"Divider - Info\",\"Completion Date\",\"Type\",\"Difficulty\",\"Length\",\"Location\",\"Quest Giver\",\"Recommended Level\",\"Divider - Description\",\"Description\",\"Divider - Objectives\",\"Objectives\",\"Divider - Rewards\",\"Rewards\"]","Allow Sorting":"true","Sort Options":"[\"Category\",\"Difficulty\",\"Length\",\"Location\"]","Sort Options Text":"[\"Category\",\"Difficulty\",\"Length\",\"Location\"]","Sort Key":"s","Show Sort Button":"true","Sort Button Offset":"11","Sort Button Width":"1","Category Sort Order":"[]","Always Show Past Objectives":"true","Date Format":"0","Date Delimiter":"/","Transparent Windows":"false","Background Image":"","Fade Sprite Opacity":"100","ScrollSpeed":"1","ScrollWait":"300","Scroll Deceleration":"0.92","Auto Scroll":"true","Disable Touch UI Space":"false","Allow Cancel In Accept Scene":"true","Always Show Gold Reward":"false","Always Show Exp Reward":"false","Draw Icon In List":"true","List Window Width":"40","List Window Right":"false","List Windowskin":"","Display Windowskin":"","Pin Confirm Windowskin":"","Sort Windowskin":"","Sort Info Windowskin":"","Text Options":"","Label Text Color":"1","Updated Text Color":"14","Header Gradient Color 1":"0","Header Gradient Color 2":"1","Updated Text":"!","Sort Info Text":"S Key / Sort Icon: Sort","Pin Text":"Pin","Unpin Text":"Unpin","Cancel Text":"Cancel","Completion Text":"Completed:","Category Text":"Type:","Difficulty Text":"Difficulty:","Length Text":"Length:","Location Text":"Location:","Quest Giver Text":"Quest Giver:","Recommended Level Text":"Recommended Level:","Exp Text":"Experience:","Gold Text":"Currency:","Info Text":"Info","Description Text":"Description","Objectives Text":"Objectives","Rewards Text":"Rewards","New Quest Text":"New Quest:","Accept Text":"Accept","Decline Text":"Decline","Empty Quest Board Text":"\"This quest board currently has no listings. Check back later and more might appear.\"","Integration Options":"","Toast Options":"","Quest Discover Toast":"{\"Display\":\"true\",\"Text Line 1\":\"Quest Discovered:\",\"Text Line 2\":\"%questname\",\"Sound Effect\":\"{\\\"Name\\\":\\\"\\\",\\\"Volume\\\":\\\"90\\\",\\\"Pitch\\\":\\\"100\\\",\\\"Pan\\\":\\\"0\\\"}\",\"Tone\":\"\",\"Background Style\":\"Window\",\"Windowskin\":\"\",\"Width\":\"0\",\"Height\":\"0\"}","Quest Started Toast":"{\"Display\":\"true\",\"Text Line 1\":\"Quest Started:\",\"Text Line 2\":\"%questname\",\"Sound Effect\":\"{\\\"Name\\\":\\\"\\\",\\\"Volume\\\":\\\"90\\\",\\\"Pitch\\\":\\\"100\\\",\\\"Pan\\\":\\\"0\\\"}\",\"Tone\":\"\",\"Background Style\":\"Window\",\"Windowskin\":\"\",\"Width\":\"0\",\"Height\":\"0\"}","Quest Completed Toast":"{\"Display\":\"true\",\"Text Line 1\":\"Quest Completed:\",\"Text Line 2\":\"%questname\",\"Sound Effect\":\"{\\\"Name\\\":\\\"\\\",\\\"Volume\\\":\\\"90\\\",\\\"Pitch\\\":\\\"100\\\",\\\"Pan\\\":\\\"0\\\"}\",\"Tone\":\"\",\"Background Style\":\"Window\",\"Windowskin\":\"\",\"Width\":\"0\",\"Height\":\"0\"}","Quest Failed Toast":"{\"Display\":\"true\",\"Text Line 1\":\"Quest Failed:\",\"Text Line 2\":\"%questname\",\"Sound Effect\":\"{\\\"Name\\\":\\\"\\\",\\\"Volume\\\":\\\"90\\\",\\\"Pitch\\\":\\\"100\\\",\\\"Pan\\\":\\\"0\\\"}\",\"Tone\":\"\",\"Background Style\":\"Window\",\"Windowskin\":\"\",\"Width\":\"0\",\"Height\":\"0\"}","Quest Objective Complete Toast":"{\"Display\":\"true\",\"Text Line 1\":\"Objective Completed For:\",\"Text Line 2\":\"%questname\",\"Sound Effect\":\"{\\\"Name\\\":\\\"\\\",\\\"Volume\\\":\\\"90\\\",\\\"Pitch\\\":\\\"100\\\",\\\"Pan\\\":\\\"0\\\"}\",\"Tone\":\"\",\"Background Style\":\"Window\",\"Windowskin\":\"\",\"Width\":\"0\",\"Height\":\"0\"}"}},
{"name":"YEP_CoreEngine","status":false,"description":"v1.32 Needed for the majority of Yanfly Engine Scripts. Also\r\ncontains bug fixes found inherently in RPG Maker.","parameters":{"---Screen---":"","Screen Width":"816","Screen Height":"624","Scale Battlebacks":"true","Scale Title":"true","Scale Game Over":"true","Open Console":"false","Reposition Battlers":"true","GameFont Load Timer":"0","Update Real Scale":"false","Collection Clear":"true","---Gold---":"","Gold Max":"99999999","Gold Font Size":"20","Gold Icon":"313","Gold Overlap":"A lotta","---Items---":"","Default Max":"99","Quantity Text Size":"20","---Parameters---":"","Max Level":"99","Actor MaxHP":"9999","Actor MaxMP":"9999","Actor Parameter":"999","Enemy MaxHP":"999999","Enemy MaxMP":"9999","Enemy Parameter":"999","---Battle---":"","Animation Rate":"4","Flash Target":"false","Show Events Transition":"true","Show Events Snapshot":"true","---Map Optimization---":"","Refresh Update HP":"true","Refresh Update MP":"true","Refresh Update TP":"false","---Font---":"","Chinese Font":"SimHei, Heiti TC, sans-serif","Korean Font":"Dotum, AppleGothic, sans-serif","Default Font":"GameFont, Verdana, Arial, Courier New","Font Size":"28","Text Align":"left","---Windows---":"","Digit Grouping":"true","Line Height":"36","Icon Width":"32","Icon Height":"32","Face Width":"144","Face Height":"144","Window Padding":"18","Text Padding":"6","Window Opacity":"192","Gauge Outline":"true","Gauge Height":"18","Menu TP Bar":"true","---Window Colors---":"","Color: Normal":"0","Color: System":"16","Color: Crisis":"17","Color: Death":"18","Color: Gauge Back":"19","Color: HP Gauge 1":"20","Color: HP Gauge 2":"21","Color: MP Gauge 1":"22","Color: MP Gauge 2":"23","Color: MP Cost":"23","Color: Power Up":"24","Color: Power Down":"25","Color: TP Gauge 1":"28","Color: TP Gauge 2":"29","Color: TP Cost Color":"29"}},
{"name":"YEP_RegionEvents","status":false,"description":"v1.03 Make it so that whenever players step on certain\nRegion ID's, the game will play certain common events.","parameters":{"---Regions 1 to 20---":"","Region 1":"1","Region 2":"2","Region 3":"0","Region 4":"0","Region 5":"0","Region 6":"0","Region 7":"0","Region 8":"0","Region 9":"0","Region 10":"0","Region 11":"0","Region 12":"0","Region 13":"0","Region 14":"0","Region 15":"0","Region 16":"0","Region 17":"0","Region 18":"0","Region 19":"0","Region 20":"0","---Regions 21 to 40---":"","Region 21":"0","Region 22":"0","Region 23":"0","Region 24":"0","Region 25":"0","Region 26":"0","Region 27":"0","Region 28":"0","Region 29":"0","Region 30":"0","Region 31":"0","Region 32":"0","Region 33":"0","Region 34":"0","Region 35":"0","Region 36":"0","Region 37":"0","Region 38":"0","Region 39":"0","Region 40":"0","---Regions 41 to 60---":"","Region 41":"0","Region 42":"0","Region 43":"0","Region 44":"0","Region 45":"0","Region 46":"0","Region 47":"0","Region 48":"0","Region 49":"0","Region 50":"0","Region 51":"0","Region 52":"0","Region 53":"0","Region 54":"0","Region 55":"0","Region 56":"0","Region 57":"0","Region 58":"0","Region 59":"0","Region 60":"0","---Regions 61 to 80---":"","Region 61":"0","Region 62":"0","Region 63":"0","Region 64":"0","Region 65":"0","Region 66":"0","Region 67":"0","Region 68":"0","Region 69":"0","Region 70":"0","Region 71":"0","Region 72":"0","Region 73":"0","Region 74":"0","Region 75":"0","Region 76":"0","Region 77":"0","Region 78":"0","Region 79":"0","Region 80":"0","---Regions 81 to 100---":"","Region 81":"0","Region 82":"0","Region 83":"0","Region 84":"0","Region 85":"0","Region 86":"0","Region 87":"0","Region 88":"0","Region 89":"0","Region 90":"0","Region 91":"0","Region 92":"0","Region 93":"0","Region 94":"0","Region 95":"0","Region 96":"0","Region 97":"0","Region 98":"0","Region 99":"0","Region 100":"0","---Regions 101 to 120---":"","Region 101":"0","Region 102":"0","Region 103":"0","Region 104":"0","Region 105":"0","Region 106":"0","Region 107":"0","Region 108":"0","Region 109":"0","Region 110":"0","Region 111":"0","Region 112":"0","Region 113":"0","Region 114":"0","Region 115":"0","Region 116":"0","Region 117":"0","Region 118":"0","Region 119":"0","Region 120":"0","---Regions 121 to 140---":"","Region 121":"0","Region 122":"0","Region 123":"0","Region 124":"0","Region 125":"0","Region 126":"0","Region 127":"0","Region 128":"0","Region 129":"0","Region 130":"0","Region 131":"0","Region 132":"0","Region 133":"0","Region 134":"0","Region 135":"0","Region 136":"0","Region 137":"0","Region 138":"0","Region 139":"0","Region 140":"0","---Regions 141 to 160---":"","Region 141":"0","Region 142":"0","Region 143":"0","Region 144":"0","Region 145":"0","Region 146":"0","Region 147":"0","Region 148":"0","Region 149":"0","Region 150":"0","Region 151":"0","Region 152":"0","Region 153":"0","Region 154":"0","Region 155":"0","Region 156":"0","Region 157":"0","Region 158":"0","Region 159":"0","Region 160":"0","---Regions 161 to 180---":"","Region 161":"0","Region 162":"0","Region 163":"0","Region 164":"0","Region 165":"0","Region 166":"0","Region 167":"0","Region 168":"0","Region 169":"0","Region 170":"0","Region 171":"0","Region 172":"0","Region 173":"0","Region 174":"0","Region 175":"0","Region 176":"0","Region 177":"0","Region 178":"0","Region 179":"0","Region 180":"0","---Regions 181 to 200---":"","Region 181":"0","Region 182":"0","Region 183":"0","Region 184":"0","Region 185":"0","Region 186":"0","Region 187":"0","Region 188":"0","Region 189":"0","Region 190":"0","Region 191":"0","Region 192":"0","Region 193":"0","Region 194":"0","Region 195":"0","Region 196":"0","Region 197":"0","Region 198":"0","Region 199":"0","Region 200":"0","---Regions 201 to 220---":"","Region 201":"0","Region 202":"0","Region 203":"0","Region 204":"0","Region 205":"0","Region 206":"0","Region 207":"0","Region 208":"0","Region 209":"0","Region 210":"0","Region 211":"0","Region 212":"0","Region 213":"0","Region 214":"0","Region 215":"0","Region 216":"0","Region 217":"0","Region 218":"0","Region 219":"0","Region 220":"0","---Regions 221 to 240---":"","Region 221":"0","Region 222":"0","Region 223":"0","Region 224":"0","Region 225":"0","Region 226":"0","Region 227":"0","Region 228":"0","Region 229":"0","Region 230":"0","Region 231":"0","Region 232":"0","Region 233":"0","Region 234":"0","Region 235":"0","Region 236":"0","Region 237":"0","Region 238":"0","Region 239":"0","Region 240":"0","---Regions 241 to 255---":"","Region 241":"0","Region 242":"0","Region 243":"0","Region 244":"0","Region 245":"0","Region 246":"0","Region 247":"0","Region 248":"0","Region 249":"0","Region 250":"0","Region 251":"0","Region 252":"0","Region 253":"0","Region 254":"0","Region 255":"0"}},
{"name":"GALV_LayerGraphicsMZ","status":true,"description":"(v.1.3) Create graphic layers for parallax mapping, fog, etc. View documentation for plugin commands.","parameters":{"fixPosition":"true"}},
{"name":"AltMenuScreen2MZ","status":false,"description":"Yet another menu screen layout","parameters":{"allowWindowDisp":"true","maxColsMenu":"4","commandRows":"2","commandCols":"4","isDisplayStatus":"true","display map name":"true","location string":"Location:","bgBitmapMenu":"","doesNotSetItemScene":"true","bgBitmapItem":"","doesNotSetSkillScene":"true","bgBitmapSkill":"","doesNotSetEquipScene":"true","bgBitmapEquip":"","doesNotSetStatusScene":"true","bgBitmapStatus":"","doesNotSetOptionScene":"true","bgBitmapOptions":"","doesNotSetSaveScene":"true","bgBitmapFile":"","doesNotSetEndScene":"true","bgBitmapGameEnd":""}},
{"name":"AltSaveScreen","status":false,"description":"Alternative save/load screen layout.","parameters":{}},
{"name":"ShakeOnDamage","status":true,"description":"ShakeOnDamagePlugin","parameters":{"ShakePower":"5","CriticalShakePower":"9","EffectiveShakePower":"9","ShakeSpeed":"9","ShakeDuration":"30","ApplyActor":"true","ApplyEnemy":"false"}},
{"name":"V8tnbPir","status":false,"description":"Starts the game in fullscreen","parameters":{}},
{"name":"--------------------------","status":true,"description":"---------------------------------------------------------------------","parameters":{}},
{"name":"VisuMZ_0_CoreEngine","status":true,"description":"[RPG Maker MZ] [Tier 0] [Version 1.84] [CoreEngine]","parameters":{"BreakHead":"----------------------------------","CoreEngine":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","QoL:struct":"{\"PlayTest\":\"\",\"NewGameBoot:eval\":\"true\",\"ForceNoPlayTest:eval\":\"false\",\"OpenConsole:eval\":\"true\",\"F6key:eval\":\"true\",\"F7key:eval\":\"true\",\"NewGameCommonEvent:num\":\"0\",\"BattleTest\":\"\",\"BTestItems:eval\":\"true\",\"BTestWeapons:eval\":\"true\",\"BTestArmors:eval\":\"true\",\"BTestAddedQuantity:num\":\"90\",\"ShiftR_Toggle:eval\":\"true\",\"ShiftT_Toggle:eval\":\"true\",\"DigitGrouping\":\"\",\"DigitGroupingStandardText:eval\":\"true\",\"DigitGroupingExText:eval\":\"true\",\"DigitGroupingDamageSprites:eval\":\"true\",\"DigitGroupingGaugeSprites:eval\":\"true\",\"DigitGroupingLocale:str\":\"en-US\",\"PlayerBenefit\":\"\",\"EncounterRateMinimum:num\":\"10\",\"EscapeAlways:eval\":\"true\",\"ImprovedAccuracySystem:eval\":\"true\",\"AccuracyBoost:eval\":\"true\",\"LevelUpFullHp:eval\":\"true\",\"LevelUpFullMp:eval\":\"true\",\"Pictures\":\"\",\"AntiZoomPictures:eval\":\"true\",\"PictureContainers\":\"\",\"DetachBattlePictureContainer:eval\":\"false\",\"DetachMapPictureContainer:eval\":\"false\",\"Misc\":\"\",\"AnimationMirrorOffset:eval\":\"false\",\"AutoStretch:str\":\"default\",\"FontShadows:eval\":\"false\",\"FontSmoothing:eval\":\"true\",\"FontWidthFix:eval\":\"true\",\"KeyItemProtect:eval\":\"true\",\"MapNameTextCode:eval\":\"true\",\"ModernControls:eval\":\"true\",\"MvAnimationRate:num\":\"4\",\"NewGameCommonEventAll:num\":\"0\",\"NoTileShadows:eval\":\"false\",\"PixelateImageRendering:eval\":\"false\",\"RequireFocus:eval\":\"false\",\"ShortcutScripts:eval\":\"true\",\"SmartEventCollisionPriority:eval\":\"true\",\"SubfolderParse:eval\":\"true\"}","BattleSystem:str":"otb","Color:struct":"{\"BasicColors\":\"\",\"ColorNormal:str\":\"0\",\"ColorSystem:str\":\"16\",\"ColorCrisis:str\":\"17\",\"ColorDeath:str\":\"18\",\"ColorGaugeBack:str\":\"19\",\"ColorHPGauge1:str\":\"20\",\"ColorHPGauge2:str\":\"21\",\"ColorMPGauge1:str\":\"22\",\"ColorMPGauge2:str\":\"23\",\"ColorMPCost:str\":\"23\",\"ColorPowerUp:str\":\"24\",\"ColorPowerDown:str\":\"25\",\"ColorCTGauge1:str\":\"26\",\"ColorCTGauge2:str\":\"27\",\"ColorTPGauge1:str\":\"28\",\"ColorTPGauge2:str\":\"29\",\"ColorTPCost:str\":\"29\",\"ColorPending:str\":\"#2a847d\",\"ColorExpGauge1:str\":\"30\",\"ColorExpGauge2:str\":\"31\",\"ColorMaxLvGauge1:str\":\"14\",\"ColorMaxLvGauge2:str\":\"6\",\"AlphaColors\":\"\",\"OutlineColor:str\":\"rgba(0, 0, 0, 0.6)\",\"DimColor1:str\":\"rgba(0, 0, 0, 0.6)\",\"DimColor2:str\":\"rgba(0, 0, 0, 0)\",\"ItemBackColor1:str\":\"rgba(32, 32, 32, 0.5)\",\"ItemBackColor2:str\":\"rgba(0, 0, 0, 0.5)\",\"ConditionalColors\":\"\",\"ActorHPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If the actor is dead, return death color.\\\\n} else if (actor.isDead()) {\\\\n    return this.deathColor();\\\\n\\\\n// If the actor is dying, return crisis color.\\\\n} else if (actor.isDying()) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ActorMPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If MP rate is below 25%, return crisis color.\\\\n} else if (actor.mpRate() < 0.25) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ActorTPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If TP rate is below 25%, return crisis color.\\\\n} else if (actor.tpRate() < 0.25) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ParamChange:func\":\"\\\"// Set the variables used in this function.\\\\nlet change = arguments[0];\\\\n\\\\n// If a positive change, use power up color.\\\\nif (change > 0) {\\\\n    return this.powerUpColor();\\\\n\\\\n// If a negative change, use power down color.\\\\n} else if (change < 0) {\\\\n    return this.powerDownColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"DamageColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet colorType = arguments[0];\\\\n\\\\n// Check the value of the color type\\\\n// and return an appropriate color.\\\\nswitch (colorType) {\\\\n\\\\n    case 0: // HP damage\\\\n        return \\\\\\\"#ffffff\\\\\\\";\\\\n\\\\n    case 1: // HP recover\\\\n        return \\\\\\\"#b9ffb5\\\\\\\";\\\\n\\\\n    case 2: // MP damage\\\\n        return \\\\\\\"#bb88bb\\\\\\\";\\\\n\\\\n    case 3: // MP recover\\\\n        return \\\\\\\"#80b0ff\\\\\\\";\\\\n\\\\n    default:\\\\n        return \\\\\\\"#808080\\\\\\\";\\\\n}\\\"\"}","Gold:struct":"{\"GoldMax:num\":\"999999999\",\"GoldFontSize:num\":\"24\",\"GoldIcon:num\":\"314\",\"GoldOverlap:str\":\"A Lot\",\"ItemStyle:eval\":\"true\"}","ImgLoad:struct":"{\"animations:arraystr\":\"[]\",\"battlebacks1:arraystr\":\"[]\",\"battlebacks2:arraystr\":\"[]\",\"characters:arraystr\":\"[]\",\"enemies:arraystr\":\"[]\",\"faces:arraystr\":\"[]\",\"parallaxes:arraystr\":\"[]\",\"pictures:arraystr\":\"[]\",\"sv_actors:arraystr\":\"[]\",\"sv_enemies:arraystr\":\"[]\",\"system:arraystr\":\"[\\\"Balloon\\\",\\\"IconSet\\\"]\",\"tilesets:arraystr\":\"[]\",\"titles1:arraystr\":\"[]\",\"titles2:arraystr\":\"[]\"}","KeyboardInput:struct":"{\"Controls\":\"\",\"WASD:eval\":\"false\",\"DashToggleR:eval\":\"false\",\"NameInput\":\"\",\"EnableNameInput:eval\":\"true\",\"DefaultMode:str\":\"keyboard\",\"QwertyLayout:eval\":\"true\",\"NameInputMessage:eval\":\"\\\"Type in this character's name.\\\\nPress \\\\\\\\c[5]ENTER\\\\\\\\c[0] when you're done.\\\\n\\\\n-or-\\\\n\\\\nPress \\\\\\\\c[5]arrow keys\\\\\\\\c[0]/\\\\\\\\c[5]TAB\\\\\\\\c[0] to switch\\\\nto manual character entry.\\\\n\\\\nPress \\\\\\\\c[5]ESC\\\\\\\\c[0]/\\\\\\\\c[5]TAB\\\\\\\\c[0] to use to keyboard.\\\"\",\"NumberInput\":\"\",\"EnableNumberInput:eval\":\"true\",\"ButtonAssist\":\"\",\"Keyboard:str\":\"Keyboard\",\"Manual:str\":\"Manual\"}","MenuBg:struct":"{\"Scene_Menu:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Item:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Skill:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Equip:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Status:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Options:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Save:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Load:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_GameEnd:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"128\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Shop:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Name:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Unlisted:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\"}","ButtonAssist:struct":"{\"General\":\"\",\"Enable:eval\":\"true\",\"Location:str\":\"bottom\",\"BgType:num\":\"0\",\"Text\":\"\",\"TextFmt:str\":\"%1:%2\",\"MultiKeyFmt:str\":\"%1/%2\",\"OkText:str\":\"Select\",\"CancelText:str\":\"Back\",\"SwitchActorText:str\":\"Switch Ally\",\"Keys\":\"\",\"KeyUnlisted:str\":\"\\\\}❪%1❫\\\\{\",\"KeyUP:str\":\"^\",\"KeyDOWN:str\":\"v\",\"KeyLEFT:str\":\"<<\",\"KeyRIGHT:str\":\">>\",\"KeySHIFT:str\":\"\\\\}❪SHIFT❫\\\\{\",\"KeyTAB:str\":\"\\\\}❪TAB❫\\\\{\",\"KeyA:str\":\"A\",\"KeyB:str\":\"B\",\"KeyC:str\":\"C\",\"KeyD:str\":\"D\",\"KeyE:str\":\"E\",\"KeyF:str\":\"F\",\"KeyG:str\":\"G\",\"KeyH:str\":\"H\",\"KeyI:str\":\"I\",\"KeyJ:str\":\"J\",\"KeyK:str\":\"K\",\"KeyL:str\":\"L\",\"KeyM:str\":\"M\",\"KeyN:str\":\"N\",\"KeyO:str\":\"O\",\"KeyP:str\":\"P\",\"KeyQ:str\":\"Q\",\"KeyR:str\":\"R\",\"KeyS:str\":\"S\",\"KeyT:str\":\"T\",\"KeyU:str\":\"U\",\"KeyV:str\":\"V\",\"KeyW:str\":\"W\",\"KeyX:str\":\"X\",\"KeyY:str\":\"Y\",\"KeyZ:str\":\"Z\"}","ControllerButtons:arraystruct":"[]","MenuLayout:struct":"{\"Title:struct\":\"{\\\"TitleScreen\\\":\\\"\\\",\\\"DocumentTitleFmt:str\\\":\\\"%1: %2 - Version %3\\\",\\\"Subtitle:str\\\":\\\"Subtitle\\\",\\\"Version:str\\\":\\\"0.00\\\",\\\"drawGameTitle:func\\\":\\\"\\\\\\\"const x = 20;\\\\\\\\nconst y = Graphics.height / 4;\\\\\\\\nconst maxWidth = Graphics.width - x * 2;\\\\\\\\nconst text = $dataSystem.gameTitle;\\\\\\\\nconst bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 8;\\\\\\\\nbitmap.fontSize = 72;\\\\\\\\nbitmap.drawText(text, x, y, maxWidth, 48, \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"drawGameSubtitle:func\\\":\\\"\\\\\\\"const x = 20;\\\\\\\\nconst y = Graphics.height / 4 + 72;\\\\\\\\nconst maxWidth = Graphics.width - x * 2;\\\\\\\\nconst text = Scene_Title.subtitle;\\\\\\\\nconst bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 6;\\\\\\\\nbitmap.fontSize = 48;\\\\\\\\nbitmap.drawText(text, x, y, maxWidth, 48, \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"drawGameVersion:func\\\":\\\"\\\\\\\"const bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nconst x = 0;\\\\\\\\nconst y = Graphics.height - 20;\\\\\\\\nconst width = Math.round(Graphics.width / 4);\\\\\\\\nconst height = 20;\\\\\\\\nconst c1 = ColorManager.dimColor1();\\\\\\\\nconst c2 = ColorManager.dimColor2();\\\\\\\\nconst text = 'Version ' + Scene_Title.version;\\\\\\\\nbitmap.gradientFillRect(x, y, width, height, c1, c2);\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 3;\\\\\\\\nbitmap.fontSize = 16;\\\\\\\\nbitmap.drawText(text, x + 4, y, Graphics.width, height, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const offsetX = $dataSystem.titleCommandWindow.offsetX;\\\\\\\\nconst offsetY = $dataSystem.titleCommandWindow.offsetY;\\\\\\\\nconst rows = this.commandWindowRows();\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2 + offsetX;\\\\\\\\nconst y = Graphics.boxHeight - height - 96 + offsetY;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ButtonFadeSpeed:num\\\":\\\"4\\\"}\",\"MainMenu:struct\":\"{\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const width = this.mainCommandWidth();\\\\\\\\nconst height = this.mainAreaHeight() - this.goldWindowRect().height;\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"GoldWindow\\\":\\\"\\\",\\\"GoldBgType:num\\\":\\\"0\\\",\\\"GoldRect:func\\\":\\\"\\\\\\\"const rows = 1;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaBottom() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.mainCommandWidth();\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nconst x = this.isRightInputMode() ? 0 : Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"ItemMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CategoryWindow\\\":\\\"\\\",\\\"CategoryBgType:num\\\":\\\"0\\\",\\\"CategoryRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"0\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._categoryWindow.y + this._categoryWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaBottom() - y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ActorWindow\\\":\\\"\\\",\\\"ActorBgType:num\\\":\\\"0\\\",\\\"ActorRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"SkillMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SkillTypeWindow\\\":\\\"\\\",\\\"SkillTypeBgType:num\\\":\\\"0\\\",\\\"SkillTypeRect:func\\\":\\\"\\\\\\\"const rows = 3;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.mainCommandWidth();\\\\\\\\nconst height = this._skillTypeWindow.height;\\\\\\\\nconst x = this.isRightInputMode() ? 0 : Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"0\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._statusWindow.y + this._statusWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._statusWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ActorWindow\\\":\\\"\\\",\\\"ActorBgType:num\\\":\\\"0\\\",\\\"ActorRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"EquipMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = this.statusWidth();\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const x = this.statusWidth();\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SlotWindow\\\":\\\"\\\",\\\"SlotBgType:num\\\":\\\"0\\\",\\\"SlotRect:func\\\":\\\"\\\\\\\"const commandWindowRect = this.commandWindowRect();\\\\\\\\nconst x = this.statusWidth();\\\\\\\\nconst y = commandWindowRect.y + commandWindowRect.height;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this.mainAreaHeight() - commandWindowRect.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"0\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"return this.slotWindowRect();\\\\\\\"\\\"}\",\"StatusMenu:struct\":\"{\\\"ProfileWindow\\\":\\\"\\\",\\\"ProfileBgType:num\\\":\\\"0\\\",\\\"ProfileRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth;\\\\\\\\nconst height = this.profileHeight();\\\\\\\\nconst x = 0;\\\\\\\\nconst y = this.mainAreaBottom() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.statusParamsWindowRect().y - y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusParamsWindow\\\":\\\"\\\",\\\"StatusParamsBgType:num\\\":\\\"0\\\",\\\"StatusParamsRect:func\\\":\\\"\\\\\\\"const width = this.statusParamsWidth();\\\\\\\\nconst height = this.statusParamsHeight();\\\\\\\\nconst x = 0;\\\\\\\\nconst y = this.mainAreaBottom() - this.profileHeight() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusEquipWindow\\\":\\\"\\\",\\\"StatusEquipBgType:num\\\":\\\"0\\\",\\\"StatusEquipRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.statusParamsWidth();\\\\\\\\nconst height = this.statusParamsHeight();\\\\\\\\nconst x = this.statusParamsWidth();\\\\\\\\nconst y = this.mainAreaBottom() - this.profileHeight() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"OptionsMenu:struct\":\"{\\\"OptionsWindow\\\":\\\"\\\",\\\"OptionsBgType:num\\\":\\\"0\\\",\\\"OptionsRect:func\\\":\\\"\\\\\\\"const n = Math.min(this.maxCommands(), this.maxVisibleCommands());\\\\\\\\nconst width = 400;\\\\\\\\nconst height = this.calcWindowHeight(n, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (Graphics.boxHeight - height) / 2;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"SaveMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, false);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ListWindow\\\":\\\"\\\",\\\"ListBgType:num\\\":\\\"0\\\",\\\"ListRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop() + this._helpWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._helpWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"LoadMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, false);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ListWindow\\\":\\\"\\\",\\\"ListBgType:num\\\":\\\"0\\\",\\\"ListRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop() + this._helpWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._helpWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"GameEnd:struct\":\"{\\\"CommandList:arraystruct\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Symbol:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"toTitle\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextStr:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Untitled\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return TextManager.toTitle;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ShowJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"EnableJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ExtJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return null;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"CallHandlerJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SceneManager._scene.commandToTitle();\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Symbol:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cancel\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextStr:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Untitled\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return TextManager.cancel;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ShowJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"EnableJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ExtJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return null;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"CallHandlerJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SceneManager._scene.popScene();\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const rows = 2;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (Graphics.boxHeight - height) / 2;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"ShopMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const wx = 0;\\\\\\\\nconst wy = this.helpAreaTop();\\\\\\\\nconst ww = Graphics.boxWidth;\\\\\\\\nconst wh = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\\\\\"\\\",\\\"GoldWindow\\\":\\\"\\\",\\\"GoldBgType:num\\\":\\\"0\\\",\\\"GoldRect:func\\\":\\\"\\\\\\\"const rows = 1;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = this._goldWindow.x;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"DummyWindow\\\":\\\"\\\",\\\"DummyBgType:num\\\":\\\"0\\\",\\\"DummyRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._commandWindow.y + this._commandWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._commandWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"NumberWindow\\\":\\\"\\\",\\\"NumberBgType:num\\\":\\\"0\\\",\\\"NumberRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nconst x = Graphics.boxWidth - width;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"BuyWindow\\\":\\\"\\\",\\\"BuyBgType:num\\\":\\\"0\\\",\\\"BuyRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CategoryWindow\\\":\\\"\\\",\\\"CategoryBgType:num\\\":\\\"0\\\",\\\"CategoryRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SellWindow\\\":\\\"\\\",\\\"SellBgType:num\\\":\\\"0\\\",\\\"SellRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._categoryWindow.y + this._categoryWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height =\\\\\\\\n    this.mainAreaHeight() -\\\\\\\\n    this._commandWindow.height -\\\\\\\\n    this._categoryWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"NameMenu:struct\":\"{\\\"EditWindow\\\":\\\"\\\",\\\"EditBgType:num\\\":\\\"0\\\",\\\"EditRect:func\\\":\\\"\\\\\\\"const rows = 9;\\\\\\\\nconst inputWindowHeight = this.calcWindowHeight(rows, true);\\\\\\\\nconst padding = $gameSystem.windowPadding();\\\\\\\\nconst width = 600;\\\\\\\\nconst height = Math.min(ImageManager.faceHeight + padding * 2, this.mainAreaHeight() - inputWindowHeight);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (this.mainAreaHeight() - (height + inputWindowHeight)) / 2 + this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"InputWindow\\\":\\\"\\\",\\\"InputBgType:num\\\":\\\"0\\\",\\\"InputRect:func\\\":\\\"\\\\\\\"const x = this._editWindow.x;\\\\\\\\nconst y = this._editWindow.y + this._editWindow.height;\\\\\\\\nconst rows = 9;\\\\\\\\nconst width = this._editWindow.width;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\"}","Param:struct":"{\"DisplayedParams:arraystr\":\"[\\\"ATK\\\",\\\"DEF\\\",\\\"MAT\\\",\\\"MDF\\\",\\\"AGI\\\",\\\"LUK\\\"]\",\"ExtDisplayedParams:arraystr\":\"[\\\"MaxHP\\\",\\\"MaxMP\\\",\\\"ATK\\\",\\\"DEF\\\",\\\"MAT\\\",\\\"MDF\\\",\\\"AGI\\\",\\\"LUK\\\"]\",\"BasicParameters\":\"\",\"CrisisRate:num\":\"0.25\",\"BasicParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet paramId = arguments[0];\\\\nlet base = this.paramBase(paramId);\\\\nlet plus = this.paramPlus(paramId);\\\\nlet paramRate = this.paramRate(paramId);\\\\nlet buffRate = this.paramBuffRate(paramId);\\\\nlet flatBonus = this.paramFlatBonus(paramId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate * buffRate + flatBonus;\\\\n\\\\n// Determine the limits\\\\nconst maxValue = this.paramMax(paramId);\\\\nconst minValue = this.paramMin(paramId);\\\\n\\\\n// Final value\\\\nreturn Math.round(value.clamp(minValue, maxValue));\\\"\",\"BasicParamCaps\":\"\",\"BasicActorParamCaps\":\"\",\"BasicActorParamMax0:str\":\"9999\",\"BasicActorParamMax1:str\":\"9999\",\"BasicActorParamMax2:str\":\"999\",\"BasicActorParamMax3:str\":\"999\",\"BasicActorParamMax4:str\":\"999\",\"BasicActorParamMax5:str\":\"999\",\"BasicActorParamMax6:str\":\"999\",\"BasicActorParamMax7:str\":\"999\",\"BasicEnemyParamCaps\":\"\",\"BasicEnemyParamMax0:str\":\"999999\",\"BasicEnemyParamMax1:str\":\"9999\",\"BasicEnemyParamMax2:str\":\"999\",\"BasicEnemyParamMax3:str\":\"999\",\"BasicEnemyParamMax4:str\":\"999\",\"BasicEnemyParamMax5:str\":\"999\",\"BasicEnemyParamMax6:str\":\"999\",\"BasicEnemyParamMax7:str\":\"999\",\"XParameters\":\"\",\"XParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet xparamId = arguments[0];\\\\nlet base = this.traitsSum(Game_BattlerBase.TRAIT_XPARAM, xparamId);\\\\nlet plus = this.xparamPlus(xparamId);\\\\nlet paramRate = this.xparamRate(xparamId);\\\\nlet flatBonus = this.xparamFlatBonus(xparamId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate + flatBonus;\\\\n\\\\n// Final value\\\\nreturn value;\\\"\",\"XParamVocab\":\"\",\"XParamVocab0:str\":\"Hit\",\"XParamVocab1:str\":\"Evasion\",\"XParamVocab2:str\":\"Critical Rate\",\"XParamVocab3:str\":\"Critical Evade\",\"XParamVocab4:str\":\"Magic Evade\",\"XParamVocab5:str\":\"Magic Reflect\",\"XParamVocab6:str\":\"Counter\",\"XParamVocab7:str\":\"HP Regen\",\"XParamVocab8:str\":\"MP Regen\",\"XParamVocab9:str\":\"TP Regen\",\"SParameters\":\"\",\"SParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet sparamId = arguments[0];\\\\nlet base = this.traitsPi(Game_BattlerBase.TRAIT_SPARAM, sparamId);\\\\nlet plus = this.sparamPlus(sparamId);\\\\nlet paramRate = this.sparamRate(sparamId);\\\\nlet flatBonus = this.sparamFlatBonus(sparamId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate + flatBonus;\\\\n\\\\n// Final value\\\\nreturn value;\\\"\",\"SParamVocab\":\"\",\"SParamVocab0:str\":\"Aggro\",\"SParamVocab1:str\":\"Guard\",\"SParamVocab2:str\":\"Recovery\",\"SParamVocab3:str\":\"Item Effect\",\"SParamVocab4:str\":\"MP Cost\",\"SParamVocab5:str\":\"TP Charge\",\"SParamVocab6:str\":\"Physical DMG\",\"SParamVocab7:str\":\"Magical DMG\",\"SParamVocab8:str\":\"Floor DMG\",\"SParamVocab9:str\":\"EXP Gain\",\"Icons\":\"\",\"DrawIcons:eval\":\"true\",\"IconParam0:str\":\"84\",\"IconParam1:str\":\"165\",\"IconParam2:str\":\"76\",\"IconParam3:str\":\"81\",\"IconParam4:str\":\"101\",\"IconParam5:str\":\"133\",\"IconParam6:str\":\"140\",\"IconParam7:str\":\"87\",\"IconXParam0:str\":\"102\",\"IconXParam1:str\":\"82\",\"IconXParam2:str\":\"78\",\"IconXParam3:str\":\"82\",\"IconXParam4:str\":\"171\",\"IconXParam5:str\":\"222\",\"IconXParam6:str\":\"77\",\"IconXParam7:str\":\"72\",\"IconXParam8:str\":\"72\",\"IconXParam9:str\":\"72\",\"IconSParam0:str\":\"5\",\"IconSParam1:str\":\"128\",\"IconSParam2:str\":\"72\",\"IconSParam3:str\":\"176\",\"IconSParam4:str\":\"165\",\"IconSParam5:str\":\"164\",\"IconSParam6:str\":\"76\",\"IconSParam7:str\":\"79\",\"IconSParam8:str\":\"141\",\"IconSParam9:str\":\"73\"}","CustomParam:arraystruct":"[\"{\\\"ParamName:str\\\":\\\"Strength\\\",\\\"Abbreviation:str\\\":\\\"str\\\",\\\"Icon:num\\\":\\\"77\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.atk * 0.75) + (user.def * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Dexterity\\\",\\\"Abbreviation:str\\\":\\\"dex\\\",\\\"Icon:num\\\":\\\"82\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.agi * 0.75) + (user.atk * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Constitution\\\",\\\"Abbreviation:str\\\":\\\"con\\\",\\\"Icon:num\\\":\\\"81\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.def * 0.75) + (user.mdf * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Intelligence\\\",\\\"Abbreviation:str\\\":\\\"int\\\",\\\"Icon:num\\\":\\\"79\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.mat * 0.75) + (user.mdf * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Wisdom\\\",\\\"Abbreviation:str\\\":\\\"wis\\\",\\\"Icon:num\\\":\\\"72\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.mdf * 0.75) + (user.luk * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Charisma\\\",\\\"Abbreviation:str\\\":\\\"cha\\\",\\\"Icon:num\\\":\\\"84\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.luk * 0.75) + (user.agi * 0.25);\\\\\\\"\\\"}\"]","ScreenResolution:struct":"{\"Maps\":\"\",\"AutoScrollLockX:eval\":\"true\",\"AutoScrollLockY:eval\":\"true\",\"DisplayLockX:num\":\"0.15625\",\"DisplayLockY:num\":\"0.00000\",\"Troops\":\"\",\"RepositionActors:eval\":\"true\",\"RepositionEnemies:eval\":\"true\",\"RepositionEnemies130:eval\":\"false\"}","ScreenShake:struct":"{\"DefaultStyle:str\":\"random\",\"originalJS:func\":\"\\\"// Calculation\\\\nthis.x += Math.round($gameScreen.shake());\\\"\",\"randomJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.x += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\\nthis.y += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\",\"horzJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.x += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\",\"vertJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.y += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\"}","TitleCommandList:arraystruct":"[\"{\\\"Symbol:str\\\":\\\"newGame\\\",\\\"TextStr:str\\\":\\\"Untitled\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.newGame;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandNewGame();\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"continue\\\",\\\"TextStr:str\\\":\\\"Untitled\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.continue_;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return DataManager.isAnySavefileExists();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandContinue();\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"options\\\",\\\"TextStr:str\\\":\\\"Untitled\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.options;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandOptions();\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"shutdown\\\",\\\"TextStr:str\\\":\\\"Untitled\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.gameEnd;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return Utils.isNwjs();\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager.exit();\\\\\\\\n\\\\\\\\n// Note!\\\\\\\\n// Do NOT use this command with mobile devices or\\\\\\\\n// browser games. All it does is cause the game to\\\\\\\\n// display a blank, black canvas which the player\\\\\\\\n// is unable to do anything with. It does NOT force\\\\\\\\n// close the browser tab nor the app.\\\\\\\"\\\"}\"]","TitlePicButtons:arraystruct":"[]","UI:struct":"{\"UIArea\":\"\",\"FadeSpeed:num\":\"24\",\"BoxMargin:num\":\"4\",\"CommandWidth:num\":\"240\",\"BottomHelp:eval\":\"false\",\"RightMenus:eval\":\"true\",\"ShowButtons:eval\":\"true\",\"cancelShowButton:eval\":\"true\",\"menuShowButton:eval\":\"true\",\"pagedownShowButton:eval\":\"true\",\"numberShowButton:eval\":\"true\",\"ButtonHeight:num\":\"52\",\"BottomButtons:eval\":\"false\",\"SideButtons:eval\":\"true\",\"MenuObjects\":\"\",\"LvExpGauge:eval\":\"true\",\"ParamArrow:str\":\"→\",\"TextCodeSupport\":\"\",\"TextCodeClassNames:eval\":\"true\",\"TextCodeNicknames:eval\":\"true\"}","Window:struct":"{\"WindowDefaults\":\"\",\"EnableMasking:eval\":\"false\",\"LineHeight:num\":\"36\",\"ItemPadding:num\":\"8\",\"BackOpacity:num\":\"192\",\"TranslucentOpacity:num\":\"160\",\"OpenSpeed:num\":\"32\",\"ColSpacing:num\":\"8\",\"RowSpacing:num\":\"4\",\"ScrollBar\":\"\",\"ShowScrollBar:eval\":\"true\",\"BarThickness:num\":\"2\",\"BarOffset:num\":\"+2\",\"BarBodyColor:str\":\"0\",\"OffBarColor:str\":\"7\",\"OffBarOpacity:num\":\"128\",\"SelectableItems\":\"\",\"ShowItemBackground:eval\":\"true\",\"ItemHeight:num\":\"8\",\"DrawItemBackgroundJS:func\":\"\\\"const rect = arguments[0];\\\\nconst c1 = ColorManager.itemBackColor1();\\\\nconst c2 = ColorManager.itemBackColor2();\\\\nconst x = rect.x;\\\\nconst y = rect.y;\\\\nconst w = rect.width;\\\\nconst h = rect.height;\\\\nthis.contentsBack.gradientFillRect(x, y, w, h, c1, c2, true);\\\\nthis.contentsBack.strokeRect(x, y, w, h, c1);\\\"\",\"TextPopup\":\"\",\"DurationPerChat:num\":\"1.5\",\"MinDuration:num\":\"90\",\"MaxDuration:num\":\"300\"}","jsQuickFunc:arraystruct":"[\"{\\\"FunctionName:str\\\":\\\"Example\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// Insert this as a function anywhere you can input code\\\\\\\\n// such as Script Calls or Conditional Branch Scripts.\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nreturn 'Example';\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"Bad  Code  Name\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// If a function name has spaces in them, the spaces will\\\\\\\\n// be removed. \\\\\\\\\\\\\\\"Bad  Code  Name\\\\\\\\\\\\\\\" becomes \\\\\\\\\\\\\\\"BadCodeName\\\\\\\\\\\\\\\".\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nOhNoItsBadCode()\\\\\\\\n\\\\\\\\n// If a function has bad code, a fail safe will catch the\\\\\\\\n// error and display it in the console.\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomNumber\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// This generates a random number from 0 to itself.\\\\\\\\n// Example: RandomNumber(10)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nconst number = (arguments[0] || 0) + 1;\\\\\\\\nreturn Math.floor(number * Math.random());\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomBetween\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// This generates a random number between two arguments.\\\\\\\\n// Example: RandomBetween(5, 10)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nlet min = Math.min(arguments[0] || 0, arguments[1] || 0);\\\\\\\\nlet max = Math.max(arguments[0] || 0, arguments[1] || 0);\\\\\\\\nreturn Math.floor(Math.random() * (max - min + 1) + min);\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomFrom\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// Selects a number from the list of inserted numbers.\\\\\\\\n// Example: RandomFrom(5, 10, 15, 20)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nreturn arguments[Math.randomInt(arguments.length)];\\\\\\\"\\\"}\"]","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_1_BattleCore","status":true,"description":"[RPG Maker MZ] [Tier 1] [Version 1.83] [BattleCore]","parameters":{"BreakHead":"----------------------------------","BattleCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","AutoBattle:struct":"{\"BattleDisplay\":\"\",\"AutoBattleMsg:str\":\"Press %1 or %2 to stop Auto Battle\",\"AutoBattleOK:str\":\"OK\",\"AutoBattleCancel:str\":\"Cancel\",\"AutoBattleBgType:num\":\"1\",\"AutoBattleRect:func\":\"\\\"const width = Graphics.width;\\\\nconst height = this.calcWindowHeight(1, false);\\\\nconst x = 0;\\\\nconst y = (Graphics.height - height) / 2;\\\\nreturn new Rectangle(x, y, width, height);\\\"\",\"Options\":\"\",\"AddOption:eval\":\"true\",\"AdjustRect:eval\":\"true\",\"StartName:str\":\"Auto Battle Start\",\"StyleName:str\":\"Auto Battle Style\",\"StyleOFF:str\":\"Attack\",\"StyleON:str\":\"Skills\"}","Damage:struct":"{\"DamageStyles\":\"\",\"DefaultDamageStyle:str\":\"Standard\",\"DamageStyleList:arraystruct\":\"[\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"Standard\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Declare Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Replace Formula\\\\\\\\\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"Armor Scaling\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Declare Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Replace Formula\\\\\\\\\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Calculate Base Armor\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Apply Armor to Damage\\\\\\\\\\\\\\\\n    if (armor >= 0) {\\\\\\\\\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"CT\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\\\\\\\\\nlet attackStat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat =  a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\\\\\\\\\nvalue = attackStat * 4;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"D4\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nlet stat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n    armor = 0;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n    armor = 0;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage \\\\\\\\\\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"DQ\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Get Primary Stats\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\nlet stat = 1;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Check for Recovery\\\\\\\\\\\\\\\\nif (this.isRecover()) {\\\\\\\\\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\\\\\\\\\n    // Plink Damage\\\\\\\\\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\\\\\\\\\n    value = baseline / 3;\\\\\\\\\\\\\\\\n} else {\\\\\\\\\\\\\\\\n    // Normal Damage\\\\\\\\\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\\\\\\\\\n    value = baseline / 2;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF7\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare base Damage\\\\\\\\\\\\\\\\nlet baseDamage = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Final Damage\\\\\\\\\\\\\\\\nlet value = baseDamage;\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nif (this.isRecover()) {\\\\\\\\\\\\\\\\n    value += 22 * power;\\\\\\\\\\\\\\\\n} else {\\\\\\\\\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF8\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Damage\\\\\\\\\\\\\\\\nlet Value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\\\\\\\\\n    value *= power / 16;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = a.mat + power;\\\\\\\\\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\\\\\\\\\n    value *= power / 256;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF9\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Constant\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Main Stats\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\nlet stat = 1;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Base Damage\\\\\\\\\\\\\\\\nlet baseDamage = power;\\\\\\\\\\\\\\\\nif (this.isPhysical()) {\\\\\\\\\\\\\\\\n    baseDamage += stat;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\\\\\\\\\n    baseDamage -= armor;\\\\\\\\\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Bonus Damage\\\\\\\\\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Final Damage\\\\\\\\\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF10\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Constant\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Offense Value\\\\\\\\\\\\\\\\nlet value = power;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Damage Defense Value\\\\\\\\\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= -1;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"MK\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage \\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"MOBA\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Value\\\\\\\\\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Calculate Base Armor\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Apply Armor to Damage\\\\\\\\\\\\\\\\n    if (armor >= 0) {\\\\\\\\\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"PKMN\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\\\\\\\\\nlet attackStat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat =  a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\"]\",\"Cap\":\"\",\"EnableDamageCap:eval\":\"false\",\"DefaultHardCap:num\":\"9999\",\"EnableSoftCap:eval\":\"false\",\"DefaultSoftCap:num\":\"0.80\",\"DefaultSoftScaler:num\":\"0.1275\",\"Popups\":\"\",\"PopupDuration:num\":\"128\",\"NewPopupBottom:eval\":\"true\",\"PopupPosition:str\":\"base\",\"PopupOffsetX:num\":\"0\",\"PopupOffsetY:num\":\"0\",\"PopupShiftX:num\":\"8\",\"PopupShiftY:num\":\"-28\",\"hpDamageFmt:str\":\"-%1\",\"hpHealingFmt:str\":\"+%1\",\"mpDamageFmt:str\":\"-%1 %2\",\"mpHealingFmt:str\":\"+%1 %2\",\"CriticalColor:eval\":\"[255, 0, 0, 160]\",\"CriticalDuration:num\":\"128\",\"Formulas\":\"\",\"OverallFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst target = arguments[0];\\\\nconst critical = arguments[1];\\\\nconst item = this.item();\\\\n\\\\n// Get Base Damage\\\\nconst baseValue = this.evalDamageFormula(target);\\\\n\\\\n// Calculate Element Modifiers\\\\nlet value = baseValue * this.calcElementRate(target);\\\\n\\\\n// Calculate Physical and Magical Modifiers\\\\nif (this.isPhysical()) {\\\\n    value *= target.pdr;\\\\n}\\\\nif (this.isMagical()) {\\\\n    value *= target.mdr;\\\\n}\\\\n\\\\n// Apply Healing Modifiers\\\\nif (baseValue < 0) {\\\\n    value *= target.rec;\\\\n}\\\\n\\\\n// Apply Critical Modifiers\\\\nif (critical) {\\\\n    value = this.applyCritical(value);\\\\n}\\\\n\\\\n// Apply Variance and Guard Modifiers\\\\nvalue = this.applyVariance(value, item.damage.variance);\\\\nvalue = this.applyGuard(value, target);\\\\n\\\\n// Finalize Damage\\\\nvalue = Math.round(value);\\\\nreturn value;\\\"\",\"VarianceFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst damage = arguments[0];\\\\nconst variance = arguments[1];\\\\n\\\\n// Calculate Variance\\\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\\\n\\\\n// Return Damage\\\\nreturn damage >= 0 ? damage + v : damage - v;\\\"\",\"GuardFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst damage = arguments[0];\\\\nconst target = arguments[1];\\\\n\\\\n// Return Damage Early\\\\nconst note = this.item().note;\\\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\\\nif (!target.isGuard()) return damage;\\\\nif (damage < 0) return damage;\\\\n\\\\n// Declare Guard Rate\\\\nlet guardRate = 0.5;\\\\nguardRate /= target.grd;\\\\n\\\\n// Return Damage\\\\nreturn damage * guardRate;\\\"\",\"Critical\":\"\",\"CriticalHitRateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\n\\\\n// Create Base Critical Rate\\\\nlet rate = this.subject().cri * (1 - target.cev);\\\\n\\\\n// Apply Notetags\\\\nconst note = this.item().note;\\\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\\\n    return 1;\\\\n}\\\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    return Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    rate *= Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    rate += Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<JS CRITICAL RATE>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS CRITICAL RATE>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    try {\\\\n        eval(code);\\\\n    } catch (e) {\\\\n        if ($gameTemp.isPlaytest()) console.log(e);\\\\n    }\\\\n}\\\\n\\\\n// Apply LUK Buffs/Debuffs\\\\nconst lukStack = this.subject().buff(7);\\\\nrate *= 2 ** lukStack;\\\\n\\\\n// Return Rate\\\\nreturn rate;\\\"\",\"CriticalHitMultiplier:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nlet damage = arguments[0];\\\\nlet multiplier = 2.0;\\\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\\\nif (this.isHpRecover() || this.isMpRecover()) {\\\\n    bonusDamage *= -1;\\\\n}\\\\n\\\\n// Apply Notetags\\\\nconst note = this.item().note;\\\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    multiplier = Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    multiplier += Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    bonusDamage *= Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS CRITICAL DAMAGE>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    try {\\\\n        eval(code);\\\\n    } catch (e) {\\\\n        if ($gameTemp.isPlaytest()) console.log(e);\\\\n    }\\\\n}\\\\n\\\\n// Return Damage\\\\nreturn damage * multiplier + bonusDamage;\\\"\"}","Mechanics:struct":"{\"ActionSpeed\":\"\",\"AllowRandomSpeed:eval\":\"false\",\"CalcActionSpeedJS:func\":\"\\\"// Declare Constants\\\\nconst agi = this.subject().agi;\\\\n\\\\n// Create Speed\\\\nlet speed = agi;\\\\nif (this.allowRandomSpeed()) {\\\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\\\n}\\\\nif (this.item()) {\\\\n    speed += this.item().speed;\\\\n}\\\\nif (this.isAttack()) {\\\\n    speed += this.subject().attackSpeed();\\\\n}\\\\n\\\\n// Return Speed\\\\nreturn speed;\\\"\",\"BaseTroop\":\"\",\"BaseTroopIDs:arraynum\":\"[\\\"1\\\"]\",\"CommonEvents\":\"\",\"BattleStartEvent:num\":\"0\",\"BattleEndEvent:num\":\"0\",\"VictoryEvent:num\":\"0\",\"DefeatEvent:num\":\"0\",\"EscapeSuccessEvent:num\":\"0\",\"EscapeFailEvent:num\":\"0\",\"Escape\":\"\",\"CalcEscapeRatioJS:func\":\"\\\"// Calculate Escape Ratio\\\\nlet ratio = 0.5;\\\\nratio *= $gameParty.agility();\\\\nratio /= $gameTroop.agility();\\\\n\\\\n// Return Ratio\\\\nreturn ratio;\\\"\",\"CalcEscapeRaiseJS:func\":\"\\\"// Calculate Escape Ratio\\\\nlet value = 0.1;\\\\nvalue += $gameParty.aliveMembers().length;\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"BattleJS\":\"\",\"PreStartBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"BattleVictoryJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"EscapeSuccessJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"EscapeFailureJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"BattleDefeatJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreEndBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"TurnJS\":\"\",\"PreStartTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreEndTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreRegenerateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostRegenerateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"ActionJS\":\"\",\"PreStartActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreApplyJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PreDamageJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PostDamageJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PostApplyJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PreEndActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\"}","CmdWindows":"----------------------------------","BattleLayout:struct":"{\"Style:str\":\"sideview_ui\",\"ListStyle\":\"\",\"ShowFacesListStyle:eval\":\"true\",\"CommandWidth:num\":\"192\",\"XPStyle\":\"\",\"XPActorCommandLines:num\":\"4\",\"XPActorDefaultHeight:num\":\"64\",\"XPSpriteYLocation:str\":\"name\",\"PotraitStyle\":\"\",\"ShowPortraits:eval\":\"true\",\"PortraitScale:num\":\"0.5\",\"BorderStyle\":\"\",\"SkillItemBorderCols:num\":\"1\",\"ShowPortraitsBorderStyle:eval\":\"true\",\"PortraitScaleBorderStyle:num\":\"1.25\",\"SkillItemWindows\":\"\",\"SkillItemMiddleLayout:eval\":\"false\",\"SkillItemStandardCols:num\":\"2\",\"StatusWindow\":\"\",\"StatusWindowName\":\"\",\"NameOffsetX:num\":\"+0\",\"NameOffsetY:num\":\"+0\",\"StatusWindowHpGauge\":\"\",\"HpGaugeOffsetX:num\":\"+0\",\"HpGaugeOffsetY:num\":\"+0\",\"StatusWindowMpGauge\":\"\",\"MpGaugeOffsetX:num\":\"+0\",\"MpGaugeOffsetY:num\":\"+0\",\"StatusWindowTpGauge\":\"\",\"TpGaugeOffsetX:num\":\"+0\",\"TpGaugeOffsetY:num\":\"+0\",\"StatusWindowStateIcon\":\"\",\"StateIconOffsetX:num\":\"+0\",\"StateIconOffsetY:num\":\"+0\",\"StatusWindowTpbGauge\":\"\",\"TpbGaugeOffsetX:num\":\"+0\",\"TpbGaugeOffsetY:num\":\"+0\",\"StatusWindowSkin\":\"\",\"StatusWindowSkinFilename:str\":\"\",\"StatusWindowSkinHide:eval\":\"false\",\"StatusWindowSelectBack\":\"\",\"StatusWindowSelectableBackHide:eval\":\"false\",\"StatusWindowAttachments\":\"\",\"StatusWindowBackAttachment\":\"\",\"StatusWindowAttachmentBack:str\":\"\",\"StatusWindowAttachmentBackOffsetX:num\":\"+0\",\"StatusWindowAttachmentBackOffsetY:num\":\"+0\",\"StatusWindowFrontAttachment\":\"\",\"StatusWindowAttachmentFront:str\":\"\",\"StatusWindowAttachmentFrontOffsetX:num\":\"+0\",\"StatusWindowAttachmentFrontOffsetY:num\":\"+0\",\"UiElements\":\"\",\"AntiTintUiElements:eval\":\"true\"}","BattleLog:struct":"{\"General\":\"\",\"BackColor:str\":\"#000000\",\"MaxLines:num\":\"10\",\"MessageWait:num\":\"16\",\"TextAlign:str\":\"center\",\"BattleLogRectJS:func\":\"\\\"const wx = 0;\\\\nconst wy = 0;\\\\nconst ww = Graphics.boxWidth;\\\\nconst wh = this.calcWindowHeight(10, false);\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\",\"StartTurn\":\"\",\"StartTurnShow:eval\":\"true\",\"StartTurnMsg:str\":\"Turn %1\",\"StartTurnWait:num\":\"40\",\"DisplayAction\":\"\",\"ActionCenteredName:eval\":\"true\",\"ActionSkillMsg1:eval\":\"false\",\"ActionSkillMsg2:eval\":\"true\",\"ActionItemMsg:eval\":\"false\",\"ActionChanges\":\"\",\"ShowCounter:eval\":\"true\",\"ShowReflect:eval\":\"true\",\"ShowSubstitute:eval\":\"true\",\"ActionResults\":\"\",\"ShowFailure:eval\":\"false\",\"ShowCritical:eval\":\"false\",\"ShowMissEvasion:eval\":\"false\",\"ShowHpDmg:eval\":\"false\",\"ShowMpDmg:eval\":\"false\",\"ShowTpDmg:eval\":\"false\",\"DisplayStates\":\"\",\"ShowAddedState:eval\":\"false\",\"ShowRemovedState:eval\":\"false\",\"ShowCurrentState:eval\":\"false\",\"ShowAddedBuff:eval\":\"false\",\"ShowAddedDebuff:eval\":\"false\",\"ShowRemovedBuff:eval\":\"false\"}","BattlebackScale:struct":"{\"DefaultStyle:str\":\"1:1\",\"jsOneForOne:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst scale = 1.0;\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = 0;\\\\nthis.y = 0;\\\"\",\"jsScaleToFit:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = this.width / this.bitmap.width;\\\\nconst ratioY = this.height / this.bitmap.height;\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\",\"jsScaleDown:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\",\"jsScaleUp:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\"}","PartyCmd:struct":"{\"Cmd\":\"\",\"CmdStyle:str\":\"auto\",\"CmdTextAlign:str\":\"left\",\"CmdIconFight:num\":\"76\",\"CommandAddAutoBattle:eval\":\"true\",\"CmdIconAutoBattle:num\":\"78\",\"CmdTextAutoBattle:str\":\"Auto\",\"CommandAddOptions:eval\":\"true\",\"CmdIconOptions:num\":\"83\",\"ActiveTpbOptionsMessage:str\":\"Options Menu queued after action is complete.\",\"CmdIconEscape:num\":\"82\",\"Access\":\"\",\"SkipPartyCmd:eval\":\"true\",\"DisablePartyCmd:eval\":\"false\",\"HelpWindow\":\"\",\"HelpFight:str\":\"Select actions to fight.\",\"HelpAutoBattle:str\":\"Sets party to Auto Battle mode.\",\"HelpOptions:str\":\"Opens up the Options Menu.\",\"HelpEscape:str\":\"Attempt to escape the battle.\"}","ActorCmd:struct":"{\"Cmd\":\"\",\"CmdStyle:str\":\"auto\",\"CmdTextAlign:str\":\"left\",\"CmdIconItem:num\":\"176\",\"IconStypeNorm:num\":\"78\",\"IconStypeMagic:num\":\"79\",\"BattleCmd\":\"\",\"BattleCmdList:arraystr\":\"[\\\"attack\\\",\\\"skills\\\",\\\"guard\\\",\\\"item\\\",\\\"escape\\\"]\",\"HelpWindow\":\"\",\"HelpSkillType:str\":\"Opens up a list of skills under the \\\\C[16]%1\\\\C[0] category.\",\"HelpItem:str\":\"Opens up a list of items that you can use.\",\"HelpEscape:str\":\"Attempt to escape the battle.\",\"HelpAutoBattle:str\":\"Automatically choose an action suitable for combat.\"}","MultiTarget:struct":"{\"Properties\":\"\",\"WindowWidth:num\":\"280\",\"BgType:num\":\"2\",\"ShowButton:eval\":\"true\",\"Vocab\":\"\",\"AllActorsText:str\":\"All Allies\",\"AllEnemiesText:str\":\"All Enemies\",\"Offsets\":\"\",\"ActorOffsets\":\"\",\"ActorOffsetX:num\":\"+0\",\"ActorOffsetY:num\":\"+0\",\"EnemyOffsets\":\"\",\"EnemyOffsetX:num\":\"+0\",\"EnemyOffsetY:num\":\"+0\"}","ComboWindow:struct":"{\"General\":\"\",\"Enable:eval\":\"true\",\"Appearance\":\"\",\"CustomFontFace:str\":\"Arial\",\"TextAlign:str\":\"left\",\"ComboWindow_DrawJS:func\":\"\\\"// Declare Coordinates\\\\nlet x = 0;\\\\nlet y = 0;\\\\n\\\\n// Hit Text\\\\nconst hitText = this.hitText();\\\\nconst hitTextSize = this.textSizeEx(hitText);\\\\nif (this.textAlignment() === 'right') {\\\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\\\n} else if (this.textAlignment() === 'center') {\\\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\\\n} else {\\\\n    x = this.itemPadding();\\\\n}\\\\nthis.drawTextEx(hitText, x, y);\\\\n\\\\n// New Line\\\\ny += Math.ceil(this.lineHeight() * 2/3);\\\\n\\\\n// Damage Text\\\\nconst dmgText = this.damageText();\\\\nconst dmgTextSize = this.textSizeEx(dmgText);\\\\nif (this.textAlignment() === 'right') {\\\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\\\n} else if (this.textAlignment() === 'center') {\\\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\\\n} else {\\\\n    x = this.itemPadding();\\\\n}\\\\nthis.drawTextEx(dmgText, x, y);\\\"\",\"Vocab\":\"\",\"hitsDmgFmt:str\":\"\\\\C[6]%1\\\\} \\\\C[4]Hit Combo\\\\C[0]\\\\{\",\"hitsHealFmt:str\":\"\\\\C[6]%1\\\\} \\\\C[4]Heal Combo\\\\C[0]\\\\{\",\"totalDmgFmt:str\":\"\\\\}\\\\C[21]Total Damage: \\\\{\\\\C[0]%1\",\"totalHealFmt:str\":\"\\\\}\\\\C[21]Total Healing: \\\\{\\\\C[24]+%1\\\\C[0]\",\"Position\":\"\",\"fadeShiftX:num\":\"-2\",\"fadeShiftY:num\":\"+0\",\"PosOffsetX:num\":\"+0\",\"PosOffsetY:num\":\"+0\",\"ComboWindow_RectJS:func\":\"\\\"const ww = Math.ceil(Graphics.width / 4);\\\\nconst wh = this.calcWindowHeight(2, true);\\\\nconst wx = 0 + this.comboWindowOffsetX();\\\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\",\"Update\":\"\",\"updateDuration:num\":\"20\",\"minimumStayDuration:num\":\"40\",\"minimumHits:num\":\"1\",\"opacitySpeed:num\":\"16\"}","VisualBreak":"----------------------------------","Actor:struct":"{\"Flinch\":\"\",\"FlinchDistanceX:num\":\"12\",\"FlinchDistanceY:num\":\"0\",\"FlinchDuration:num\":\"6\",\"SvBattlers\":\"\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"ChantStyle:eval\":\"true\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"0\",\"MotionSpeed:num\":\"12\",\"PrioritySortActive:eval\":\"true\",\"PrioritySortActors:eval\":\"false\",\"Shadow:eval\":\"true\",\"SmoothImage:eval\":\"true\",\"HomePosJS:func\":\"\\\"// Declare Constants\\\\nconst sprite = this;\\\\nconst actor = this._actor;\\\\nconst index = arguments[0];\\\\n\\\\n// Make Calculations\\\\nlet x = Math.round((Graphics.width / 2) + 192)\\\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\\\nx += index * 32;\\\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\\\ny += index * 48;\\\\n\\\\n// Home Position Offsets\\\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+),[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\\\n\\\\n// Set Home Position\\\\nthis.setHome(x, y);\\\"\"}","Enemy:struct":"{\"Visual\":\"\",\"AttackAnimation:num\":\"1\",\"EmergeText:eval\":\"false\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"0\",\"SmoothImage:eval\":\"true\",\"SelectWindow\":\"\",\"FrontViewSelect:eval\":\"false\",\"SideviewSelect:eval\":\"true\",\"NameFontSize:num\":\"22\",\"SvBattlers\":\"\",\"AllowCollapse:eval\":\"false\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"MotionIdle:str\":\"walk\",\"Shadow:eval\":\"true\",\"Width:num\":\"64\",\"Height:num\":\"64\",\"WtypeId:num\":\"0\"}","HpGauge:struct":"{\"Display\":\"\",\"ShowActorGauge:eval\":\"false\",\"ShowEnemyGauge:eval\":\"true\",\"RequiresDefeat:eval\":\"false\",\"BTestBypass:eval\":\"true\",\"Settings\":\"\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"Scale:num\":\"0.5\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"-3\",\"Options\":\"\",\"AddHpGaugeOption:eval\":\"true\",\"AdjustRect:eval\":\"true\",\"Name:str\":\"Show HP Gauge\"}","ActionSequence:struct":"{\"AutoSequences\":\"\",\"AutoMeleeSolo:eval\":\"true\",\"AutoMeleeAoE:eval\":\"true\",\"CastAnimations\":\"\",\"CastCertain:num\":\"120\",\"CastPhysical:num\":\"52\",\"CastMagical:num\":\"51\",\"CounterReflection\":\"\",\"CounterPlayback:eval\":\"true\",\"ReflectAnimation:num\":\"53\",\"ReflectPlayback:eval\":\"true\",\"Stepping\":\"\",\"MeleeDistance:num\":\"24\",\"StepDistanceX:num\":\"48\",\"StepDistanceY:num\":\"0\",\"StepDuration:num\":\"12\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_1_SkillsStatesCore","status":true,"description":"[RPG Maker MZ] [Tier 1] [Version 1.47] [SkillsStatesCore]","parameters":{"BreakHead":"----------------------------------","SkillsStatesCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","Skills:struct":"{\"General\":\"\",\"EnableLayout:eval\":\"true\",\"LayoutStyle:str\":\"upper/left\",\"SkillTypeWindow\":\"\",\"CmdStyle:str\":\"auto\",\"CmdTextAlign:str\":\"left\",\"ListWindow\":\"\",\"ListWindowCols:num\":\"1\",\"ShopStatusWindow\":\"\",\"ShowShopStatus:eval\":\"true\",\"SkillSceneAdjustSkillList:eval\":\"true\",\"SkillMenuStatusRect:func\":\"\\\"const ww = this.shopStatusWidth();\\\\nconst wh = this._itemWindow.height;\\\\nconst wx = Graphics.boxWidth - this.shopStatusWidth();\\\\nconst wy = this._itemWindow.y;\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\",\"SkillTypes\":\"\",\"HiddenSkillTypes:arraynum\":\"[]\",\"BattleHiddenSkillTypes:arraynum\":\"[]\",\"IconStypeNorm:num\":\"78\",\"IconStypeMagic:num\":\"79\",\"CustomJS\":\"\",\"SkillConditionJS:func\":\"\\\"// Declare Variables\\\\nconst skill = arguments[0];\\\\nconst user = this;\\\\nconst target = this;\\\\nconst a = this;\\\\nconst b = this;\\\\nlet enabled = true;\\\\n\\\\n// Perform Checks\\\\n\\\\n\\\\n// Return boolean\\\\nreturn enabled;\\\"\"}","Costs:arraystruct":"[\"{\\\"Name:str\\\":\\\"HP\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"20\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\nif (note.match(/<HP COST:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost += Number(RegExp.$1);\\\\\\\\n}\\\\\\\\nif (note.match(/<HP COST:[ ](\\\\\\\\\\\\\\\\d+)([%％])>/i)) {\\\\\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.mhp / 100);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS HP COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS HP COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<HP COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%％])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<HP COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<HP COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<HP COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nif (cost <= 0) {\\\\\\\\n    return true;\\\\\\\\n} else {\\\\\\\\n    return user._hp > cost;\\\\\\\\n}\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\nuser._hp -= cost;\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = TextManager.hp;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '%1 %2'.format(cost, name);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\nif (icon  > 0) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.mhp;\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.hp;\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Settings\\\\\\\\nconst color1 = ColorManager.hpGaugeColor1();\\\\\\\\nconst color2 = ColorManager.hpGaugeColor2();\\\\\\\\nconst label = TextManager.hpA;\\\\\\\\n\\\\\\\\n// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\nconst bitmapWidth = sprite.bitmapWidth();\\\\\\\\nconst bitmapHeight = sprite.textHeight ? sprite.textHeight() : sprite.bitmapHeight();\\\\\\\\nconst gaugeHeight = sprite.gaugeHeight();\\\\\\\\n\\\\\\\\n// Draw Gauge\\\\\\\\nconst gx = 0;\\\\\\\\nconst gy = bitmapHeight - gaugeHeight;\\\\\\\\nconst gw = bitmapWidth - gx;\\\\\\\\nconst gh = gaugeHeight;\\\\\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\\\\\n\\\\\\\\n// Draw Label\\\\\\\\nconst lx = 4;\\\\\\\\nconst ly = 0;\\\\\\\\nconst lw = bitmapWidth;\\\\\\\\nconst lh = bitmapHeight;\\\\\\\\nsprite.setupLabelFont();\\\\\\\\nbitmap.paintOpacity = 255;\\\\\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = bitmapWidth - 2;\\\\\\\\nconst vh = bitmapHeight;\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.hpColor(user);\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MP\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"23\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\ncost = Math.floor(skill.mpCost * user.mcr);\\\\\\\\nif (note.match(/<MP COST:[ ](\\\\\\\\\\\\\\\\d+)([%％])>/i)) {\\\\\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.mmp / 100);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS MP COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS MP COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<MP COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%％])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<MP COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<MP COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<MP COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn user._mp >= cost;\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\nuser._mp -= cost;\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = TextManager.mp;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '%1 %2'.format(cost, name);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\nif (icon  > 0) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.mmp;\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.mp;\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Settings\\\\\\\\nconst color1 = ColorManager.mpGaugeColor1();\\\\\\\\nconst color2 = ColorManager.mpGaugeColor2();\\\\\\\\nconst label = TextManager.mpA;\\\\\\\\n\\\\\\\\n// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\nconst bitmapWidth = sprite.bitmapWidth();\\\\\\\\nconst bitmapHeight = sprite.textHeight ? sprite.textHeight() : sprite.bitmapHeight();\\\\\\\\nconst gaugeHeight = sprite.gaugeHeight();\\\\\\\\n\\\\\\\\n// Draw Gauge\\\\\\\\nconst gx = 0;\\\\\\\\nconst gy = bitmapHeight - gaugeHeight;\\\\\\\\nconst gw = bitmapWidth - gx;\\\\\\\\nconst gh = gaugeHeight;\\\\\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\\\\\n\\\\\\\\n// Draw Label\\\\\\\\nconst lx = 4;\\\\\\\\nconst ly = 0;\\\\\\\\nconst lw = bitmapWidth;\\\\\\\\nconst lh = bitmapHeight;\\\\\\\\nsprite.setupLabelFont();\\\\\\\\nbitmap.paintOpacity = 255;\\\\\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = bitmapWidth - 2;\\\\\\\\nconst vh = bitmapHeight;\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.mpColor(user);\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"TP\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"29\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\ncost = skill.tpCost;\\\\\\\\nif (note.match(/<TP COST:[ ](\\\\\\\\\\\\\\\\d+)([%％])>/i)) {\\\\\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.maxTp() / 100);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS TP COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS TP COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<TP COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%％])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<TP COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<TP COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<TP COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn user._tp >= cost;\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\nuser._tp -= cost;\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = TextManager.tp;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '%1 %2'.format(cost, name);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\nif (icon  > 0) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.maxTp();\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.tp;\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Settings\\\\\\\\nconst color1 = ColorManager.tpGaugeColor1();\\\\\\\\nconst color2 = ColorManager.tpGaugeColor2();\\\\\\\\nconst label = TextManager.tpA;\\\\\\\\n\\\\\\\\n// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\nconst bitmapWidth = sprite.bitmapWidth();\\\\\\\\nconst bitmapHeight = sprite.textHeight ? sprite.textHeight() : sprite.bitmapHeight();\\\\\\\\nconst gaugeHeight = sprite.gaugeHeight();\\\\\\\\n\\\\\\\\n// Draw Gauge\\\\\\\\nconst gx = 0;\\\\\\\\nconst gy = bitmapHeight - gaugeHeight;\\\\\\\\nconst gw = bitmapWidth - gx;\\\\\\\\nconst gh = gaugeHeight;\\\\\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\\\\\n\\\\\\\\n// Draw Label\\\\\\\\nconst lx = 4;\\\\\\\\nconst ly = 0;\\\\\\\\nconst lw = bitmapWidth;\\\\\\\\nconst lh = bitmapHeight;\\\\\\\\nsprite.setupLabelFont();\\\\\\\\nbitmap.paintOpacity = 255;\\\\\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = bitmapWidth - 2;\\\\\\\\nconst vh = bitmapHeight;\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.tpColor(user);\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Gold\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"17\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\nif (note.match(/<GOLD COST:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost += Number(RegExp.$1);\\\\\\\\n}\\\\\\\\nif (note.match(/<GOLD COST:[ ](\\\\\\\\\\\\\\\\d+)([%％])>/i)) {\\\\\\\\n    cost += Math.ceil(Number(RegExp.$1) * $gameParty.gold() / 100);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS GOLD COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS GOLD COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<GOLD COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%％])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<GOLD COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<GOLD COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<GOLD COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn $gameParty.gold() >= cost;\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\n$gameParty.loseGold(cost);\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = TextManager.currencyUnit;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '%1 %2'.format(cost, name);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\nif (icon  > 0) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn $gameParty.maxGold();\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn $gameParty.gold();\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\n\\\\\\\\n// Draw Label\\\\\\\\nconst label = TextManager.currencyUnit;\\\\\\\\nconst lx = 4;\\\\\\\\nconst ly = 0;\\\\\\\\nconst lw = sprite.bitmapWidth();\\\\\\\\nconst lh = sprite.bitmapHeight();\\\\\\\\nsprite.setupLabelFont();\\\\\\\\nbitmap.paintOpacity = 255;\\\\\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\\\\\nconst vh = sprite.bitmapHeight();\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.normalColor();\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Potion\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"176\\\",\\\"FontColor:str\\\":\\\"0\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\nif (note.match(/<POTION COST:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost += Number(RegExp.$1);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS POTION COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS POTION COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<POTION COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%％])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<POTION COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<POTION COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<POTION COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst item = $dataItems[7];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nif (user.isActor() && cost > 0) {\\\\\\\\n    return $gameParty.numItems(item) >= cost;\\\\\\\\n} else {\\\\\\\\n    return true;\\\\\\\\n}\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst item = $dataItems[7];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\nif (user.isActor()) {\\\\\\\\n    $gameParty.loseItem(item, cost);\\\\\\\\n}\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst item = $dataItems[7];\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = settings.Name;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '×%1'.format(cost);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(item.iconIndex);\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst item = $dataItems[7];\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn $gameParty.maxItems(item);\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst item = $dataItems[7];\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn $gameParty.numItems(item);\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Settings\\\\\\\\nconst color1 = ColorManager.textColor(30);\\\\\\\\nconst color2 = ColorManager.textColor(31);\\\\\\\\n\\\\\\\\n// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst item = $dataItems[7];\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\nconst bitmapWidth = sprite.bitmapWidth();\\\\\\\\nconst bitmapHeight = sprite.textHeight ? sprite.textHeight() : sprite.bitmapHeight();\\\\\\\\nconst gaugeHeight = sprite.gaugeHeight();\\\\\\\\n\\\\\\\\n// Draw Gauge\\\\\\\\nconst gx = 0;\\\\\\\\nconst gy = bitmapHeight - gaugeHeight;\\\\\\\\nconst gw = bitmapWidth - gx;\\\\\\\\nconst gh = gaugeHeight;\\\\\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\\\\\n\\\\\\\\n// Draw Icon\\\\\\\\nconst iconIndex = item.iconIndex;\\\\\\\\nconst iconBitmap = ImageManager.loadSystem(\\\\\\\\\\\\\\\"IconSet\\\\\\\\\\\\\\\");\\\\\\\\nconst pw = ImageManager.iconWidth;\\\\\\\\nconst ph = ImageManager.iconHeight;\\\\\\\\nconst sx = (iconIndex % 16) * pw;\\\\\\\\nconst sy = Math.floor(iconIndex / 16) * ph;\\\\\\\\nbitmap.blt(iconBitmap, sx, sy, pw, ph, 0, 0, 24, 24);\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = bitmapWidth - 2;\\\\\\\\nconst vh = bitmapHeight;\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.normalColor();\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Item Cost\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"0\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\ncost = {\\\\\\\\n    items: {},\\\\\\\\n    weapons: {},\\\\\\\\n    armors: {},\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Gather Cost Notetags\\\\\\\\n{ // Item Costs\\\\\\\\n    const notetag = /<ITEM COST:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n    const matches = note.match(notetag);\\\\\\\\n    if (matches) {\\\\\\\\n        for (const currentMatch of matches) {\\\\\\\\n            currentMatch.match(notetag);\\\\\\\\n            const amount = Number(RegExp.$1);\\\\\\\\n            const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n            const entry = $dataItems.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n            if (entry) {\\\\\\\\n                cost.items[entry.id] = amount;\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n{ // Weapon Costs\\\\\\\\n    const notetag = /<WEAPON COST:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n    const matches = note.match(notetag);\\\\\\\\n    if (matches) {\\\\\\\\n        for (const currentMatch of matches) {\\\\\\\\n            currentMatch.match(notetag);\\\\\\\\n            const amount = Number(RegExp.$1);\\\\\\\\n            const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n            const entry = $dataWeapons.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n            if (entry) {\\\\\\\\n                cost.weapons[entry.id] = amount;\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n{ // Armor Costs\\\\\\\\n    const notetag = /<ARMOR COST:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n    const matches = note.match(notetag);\\\\\\\\n    if (matches) {\\\\\\\\n        for (const currentMatch of matches) {\\\\\\\\n            currentMatch.match(notetag);\\\\\\\\n            const amount = Number(RegExp.$1);\\\\\\\\n            const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n            const entry = $dataArmors.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n            if (entry) {\\\\\\\\n                cost.armors[entry.id] = amount;\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Trait Objects\\\\\\\\nconst traitObjects = user.traitObjects();\\\\\\\\n\\\\\\\\n// Apply Cost Rate Modifiers\\\\\\\\nfor (const traitObject of traitObjects) {\\\\\\\\n    if (!traitObject) continue;\\\\\\\\n    const objNote = traitObject.note || '';\\\\\\\\n    { // Item Cost Rate Modifiers\\\\\\\\n        const notetag = /<ITEM COST:[ ](\\\\\\\\\\\\\\\\d+)([%％])[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const rate = Number(RegExp.$1) * 0.01;\\\\\\\\n                const name = String(RegExp.$3).toUpperCase().trim();\\\\\\\\n                const entry = $dataItems.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.items[entry.id]) {\\\\\\\\n                    cost.items[entry.id] = Math.ceil(cost.items[entry.id] * rate);\\\\\\\\n                    if (cost.items[entry.id] <= 0) cost.items[entry.id] = 0;\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Weapon Cost Rate Modifiers\\\\\\\\n        const notetag = /<WEAPON COST:[ ](\\\\\\\\\\\\\\\\d+)([%％])[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const rate = Number(RegExp.$1) * 0.01;\\\\\\\\n                const name = String(RegExp.$3).toUpperCase().trim();\\\\\\\\n                const entry = $dataWeapons.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.weapons[entry.id]) {\\\\\\\\n                    cost.weapons[entry.id] = Math.ceil(cost.weapons[entry.id] * rate);\\\\\\\\n                    if (cost.weapons[entry.id] <= 0) cost.weapons[entry.id] = 0;\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Armor Cost Rate Modifiers\\\\\\\\n        const notetag = /<ARMOR COST:[ ](\\\\\\\\\\\\\\\\d+)([%％])[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const rate = Number(RegExp.$1) * 0.01;\\\\\\\\n                const name = String(RegExp.$3).toUpperCase().trim();\\\\\\\\n                const entry = $dataArmors.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.armors[entry.id]) {\\\\\\\\n                    cost.armors[entry.id] = Math.ceil(cost.armors[entry.id] * rate);\\\\\\\\n                    if (cost.armors[entry.id] <= 0) cost.armors[entry.id] = 0;\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Flat Cost Modifiers\\\\\\\\nfor (const traitObject of traitObjects) {\\\\\\\\n    if (!traitObject) continue;\\\\\\\\n    const objNote = traitObject.note || '';\\\\\\\\n    { // Item Flat Cost Modifiers\\\\\\\\n        const notetag = /<ITEM COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const flat = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataItems.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.items[entry.id]) {\\\\\\\\n                    cost.items[entry.id] += flat;\\\\\\\\n                    if (cost.items[entry.id] <= 0) cost.items[entry.id] = 0;\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Weapon Flat Cost Modifiers\\\\\\\\n        const notetag = /<WEAPON COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const flat = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataWeapons.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.weapons[entry.id]) {\\\\\\\\n                    cost.weapons[entry.id] += flat;\\\\\\\\n                    if (cost.weapons[entry.id] <= 0) cost.weapons[entry.id] = 0;\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Armor Flat Cost Modifiers\\\\\\\\n        const notetag = /<ARMOR COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const flat = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataArmors.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.armors[entry.id]) {\\\\\\\\n                    cost.armors[entry.id] += flat;\\\\\\\\n                    if (cost.armors[entry.id] <= 0) cost.armors[entry.id] = 0;\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\n{ // Item Cost Limits\\\\\\\\n    { // Maximum Cost\\\\\\\\n        const notetag = /<ITEM COST MAX:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = note.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const max = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataItems.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.items[entry.id] !== undefined) {\\\\\\\\n                    cost.items[entry.id] = Math.min(max, cost.items[entry.id]);\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Minimum Cost\\\\\\\\n        const notetag = /<ITEM COST MIN:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = note.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const min = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataItems.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.items[entry.id] !== undefined) {\\\\\\\\n                    cost.items[entry.id] = Math.max(min, cost.items[entry.id]);\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n{ // Weapon Cost Limits\\\\\\\\n    { // Maximum Cost\\\\\\\\n        const notetag = /<WEAPON COST MAX:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = note.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const max = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataWeapons.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.weapons[entry.id] !== undefined) {\\\\\\\\n                    cost.weapons[entry.id] = Math.min(max, cost.weapons[entry.id]);\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Minimum Cost\\\\\\\\n        const notetag = /<WEAPON COST MIN:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = note.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const min = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataWeapons.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.weapons[entry.id] !== undefined) {\\\\\\\\n                    cost.weapons[entry.id] = Math.max(min, cost.weapons[entry.id]);\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n{ // Armor Cost Limits\\\\\\\\n    { // Maximum Cost\\\\\\\\n        const notetag = /<ARMOR COST MAX:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = note.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const max = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataArmors.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.armors[entry.id] !== undefined) {\\\\\\\\n                    cost.armors[entry.id] = Math.min(max, cost.armors[entry.id]);\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Minimum Cost\\\\\\\\n        const notetag = /<ARMOR COST MIN:[ ](\\\\\\\\\\\\\\\\d+)[ ](.*)>/gi;\\\\\\\\n        const matches = note.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const min = Number(RegExp.$1);\\\\\\\\n                const name = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry = $dataArmors.find(obj => obj && obj.name.toUpperCase().trim() === name);\\\\\\\\n                if (entry && cost.armors[entry.id] !== undefined) {\\\\\\\\n                    cost.armors[entry.id] = Math.max(min, cost.armors[entry.id]);\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Replacement Costs\\\\\\\\nfor (const traitObject of traitObjects) {\\\\\\\\n    if (!traitObject) continue;\\\\\\\\n    const objNote = traitObject.note || '';\\\\\\\\n    { // Item Replacement Costs\\\\\\\\n        const notetag = /<REPLACE ITEM (.*) COST:[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const name1 = String(RegExp.$1).toUpperCase().trim();\\\\\\\\n                const name2 = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry1 = $dataItems.find(obj => obj && obj.name.toUpperCase().trim() === name1);\\\\\\\\n                const entry2 = $dataItems.find(obj => obj && obj.name.toUpperCase().trim() === name2);\\\\\\\\n                if (entry1 && entry2 && cost.items[entry1.id]) {\\\\\\\\n                    cost.items[entry2.id] = cost.items[entry1.id];\\\\\\\\n                    delete cost.items[entry1.id];\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Weapon Replacement Costs\\\\\\\\n        const notetag = /<REPLACE WEAPON (.*) COST:[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const name1 = String(RegExp.$1).toUpperCase().trim();\\\\\\\\n                const name2 = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry1 = $dataWeapons.find(obj => obj && obj.name.toUpperCase().trim() === name1);\\\\\\\\n                const entry2 = $dataWeapons.find(obj => obj && obj.name.toUpperCase().trim() === name2);\\\\\\\\n                if (entry1 && entry2 && cost.weapons[entry1.id]) {\\\\\\\\n                    cost.weapons[entry2.id] = cost.weapons[entry1.id];\\\\\\\\n                    delete cost.items[entry1.id];\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    { // Armor Replacement Costs\\\\\\\\n        const notetag = /<REPLACE ARMOR (.*) COST:[ ](.*)>/gi;\\\\\\\\n        const matches = objNote.match(notetag);\\\\\\\\n        if (matches) {\\\\\\\\n            for (const currentMatch of matches) {\\\\\\\\n                currentMatch.match(notetag);\\\\\\\\n                const name1 = String(RegExp.$1).toUpperCase().trim();\\\\\\\\n                const name2 = String(RegExp.$2).toUpperCase().trim();\\\\\\\\n                const entry1 = $dataArmors.find(obj => obj && obj.name.toUpperCase().trim() === name1);\\\\\\\\n                const entry2 = $dataArmors.find(obj => obj && obj.name.toUpperCase().trim() === name2);\\\\\\\\n                if (entry1 && entry2 && cost.armors[entry1.id]) {\\\\\\\\n                    cost.armors[entry2.id] = cost.armors[entry1.id];\\\\\\\\n                    delete cost.items[entry1.id];\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost data\\\\\\\\nreturn cost;\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Check Individual Costs\\\\\\\\n{ // Check Item Costs\\\\\\\\n    for (let id in cost.items) {\\\\\\\\n        const obj = $dataItems[id];\\\\\\\\n        if (obj) {\\\\\\\\n            const costAmount = cost.items[id];\\\\\\\\n            const ownedAmount = $gameParty.numItems(obj);\\\\\\\\n            if (costAmount > ownedAmount) return false;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n{ // Check Weapon Costs\\\\\\\\n    for (let id in cost.weapons) {\\\\\\\\n        const obj = $dataWeapons[id];\\\\\\\\n        if (obj) {\\\\\\\\n            const costAmount = cost.weapons[id];\\\\\\\\n            const ownedAmount = $gameParty.numItems(obj);\\\\\\\\n            if (costAmount > ownedAmount) return false;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n{ // Check Armor Costs\\\\\\\\n    for (let id in cost.armors) {\\\\\\\\n        const obj = $dataArmors[id];\\\\\\\\n        if (obj) {\\\\\\\\n            const costAmount = cost.armors[id];\\\\\\\\n            const ownedAmount = $gameParty.numItems(obj);\\\\\\\\n            if (costAmount > ownedAmount) return false;\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return True\\\\\\\\nreturn true;\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\n{ // Check Item Costs\\\\\\\\n    for (let id in cost.items) {\\\\\\\\n        const obj = $dataItems[id];\\\\\\\\n        if (obj && obj.consumable) {\\\\\\\\n            if (obj.itypeId !== 2) {\\\\\\\\n                const costAmount = cost.items[id];\\\\\\\\n                $gameParty.loseItem(obj, costAmount);\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n{ // Check Weapon Costs\\\\\\\\n    for (let id in cost.weapons) {\\\\\\\\n        const obj = $dataWeapons[id];\\\\\\\\n        if (obj) {\\\\\\\\n            const costAmount = cost.weapons[id];\\\\\\\\n            $gameParty.loseItem(obj, costAmount);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n{ // Check Armor Costs\\\\\\\\n    for (let id in cost.armors) {\\\\\\\\n        const obj = $dataArmors[id];\\\\\\\\n        if (obj) {\\\\\\\\n            const costAmount = cost.armors[id];\\\\\\\\n            $gameParty.loseItem(obj, costAmount);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n}\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Check Keys\\\\\\\\nconst keys = ['items', 'weapons', 'armors'];\\\\\\\\n\\\\\\\\n// Return False\\\\\\\\nreturn keys.some(key => Object.keys(cost[key]).length > 0);\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = settings.Name;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nconst keys = ['items', 'weapons', 'armors'];\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\nfor (const key of keys) {\\\\\\\\n    const database = [$dataItems, $dataWeapons, $dataArmors][keys.indexOf(key)];\\\\\\\\n    const costData = cost[key];\\\\\\\\n    const idList = Object.keys(costData).sort((a, b) => a - b);\\\\\\\\n    for (const id of idList) {\\\\\\\\n        const obj = database[id];\\\\\\\\n        const iconIndex = obj.iconIndex;\\\\\\\\n        const costAmount = costData[id];\\\\\\\\n        text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]×%2 '.format(iconIndex, costAmount);\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text.trim();\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn 0;\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn 0;\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Don't Draw Anything\\\\\\\\n// This does not work as a gauge.\\\\\\\"\\\"}\"]","Gauge:struct":"{\"Labels\":\"\",\"LabelFontMainType:str\":\"main\",\"MatchLabelColor:eval\":\"true\",\"MatchLabelGaugeColor:num\":\"2\",\"PresetLabelGaugeColor:num\":\"16\",\"LabelOutlineSolid:eval\":\"true\",\"LabelOutlineWidth:num\":\"3\",\"Values\":\"\",\"ValueFontMainType:str\":\"number\",\"ValueOutlineSolid:eval\":\"true\",\"ValueOutlineWidth:num\":\"3\"}","BreakSkills":"----------------------------------","States:struct":"{\"General\":\"\",\"ReapplyRules:str\":\"greater\",\"MaxTurns:num\":\"99\",\"ActionEndUpdate:eval\":\"true\",\"Turns\":\"\",\"ShowTurns:eval\":\"true\",\"TurnFontSize:num\":\"16\",\"TurnOffsetX:num\":\"-4\",\"TurnOffsetY:num\":\"-6\",\"ColorNeutral:str\":\"0\",\"ColorPositive:str\":\"24\",\"ColorNegative:str\":\"27\",\"Data\":\"\",\"ShowData:eval\":\"true\",\"DataFontSize:num\":\"12\",\"DataOffsetX:num\":\"0\",\"DataOffsetY:num\":\"8\",\"CustomJS\":\"\",\"onAddStateJS:func\":\"\\\"// Declare Variables\\\\nconst stateId = arguments[0];\\\\nconst origin = this.getStateOrigin(stateId);\\\\nconst state = $dataStates[stateId];\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\"\",\"onEraseStateJS:func\":\"\\\"// Declare Variables\\\\nconst stateId = arguments[0];\\\\nconst origin = this.getStateOrigin(stateId);\\\\nconst state = $dataStates[stateId];\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onExpireStateJS:func\":\"\\\"// Declare Variables\\\\nconst stateId = arguments[0];\\\\nconst origin = this.getStateOrigin(stateId);\\\\nconst state = $dataStates[stateId];\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\"}","Buffs:struct":"{\"General\":\"\",\"ReapplyRules:str\":\"greater\",\"MaxTurns:num\":\"99\",\"Stacking\":\"\",\"StackBuffMax:num\":\"2\",\"StackDebuffMax:num\":\"2\",\"MultiplierJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst paramId = arguments[0];\\\\nconst buffLevel = arguments[1];\\\\nlet rate = 1;\\\\n\\\\n// Perform Calculations\\\\nrate += buffLevel * 0.25;\\\\n\\\\n// Return Rate\\\\nreturn Math.max(0, rate);\\\"\",\"Turns\":\"\",\"ShowTurns:eval\":\"true\",\"TurnFontSize:num\":\"16\",\"TurnOffsetX:num\":\"-4\",\"TurnOffsetY:num\":\"-6\",\"ColorBuff:str\":\"24\",\"ColorDebuff:str\":\"27\",\"Data\":\"\",\"ShowData:eval\":\"false\",\"DataFontSize:num\":\"12\",\"DataOffsetX:num\":\"0\",\"DataOffsetY:num\":\"8\",\"CustomJS\":\"\",\"onAddBuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onAddDebuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onEraseBuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onEraseDebuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onExpireBuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onExpireDebuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\"}","PassiveStates:struct":"{\"List\":\"\",\"Global:arraynum\":\"[]\",\"Actor:arraynum\":\"[]\",\"Enemy:arraynum\":\"[]\",\"CustomJS\":\"\",\"PassiveConditionJS:func\":\"\\\"// Declare Variables\\\\nconst state = arguments[0];\\\\nconst stateId = state.id;\\\\nconst user = this;\\\\nconst target = this;\\\\nconst a = this;\\\\nconst b = this;\\\\nlet condition = true;\\\\n\\\\n// Perform Checks\\\\n\\\\n\\\\n// Return boolean\\\\nreturn condition;\\\"\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_2_BattleSystemOTB","status":true,"description":"[RPG Maker MZ] [Tier 2] [Version 1.15] [BattleSystemOTB]","parameters":{"BreakHead":"----------------------------------","BattleSystemOTB":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","Conversion:struct":"{\"Buffs\":\"\",\"ConvertAgiBuffCurrent:eval\":\"true\",\"ConvertAgiBuffNext:eval\":\"true\",\"Debuffs\":\"\",\"ConvertAgiDebuffCurrent:eval\":\"true\",\"ConvertAgiDebuffNext:eval\":\"true\"}","Mechanics:struct":"{\"Actions\":\"\",\"EnableActionTimes:eval\":\"true\",\"RandomizeActionTimesOrder:eval\":\"true\",\"Speed\":\"\",\"AllowRandomSpeed:eval\":\"false\",\"PostStunInfinitySpeed:eval\":\"true\",\"InfinityClamp:eval\":\"true\",\"InitialSpeedJS:func\":\"\\\"// Declare Constants\\\\nconst agi = this.subject().agi;\\\\n\\\\n// Create Speed\\\\nlet speed = agi;\\\\nif (this.allowRandomSpeed()) {\\\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\\\n}\\\\n\\\\n// Return Speed\\\\nreturn speed;\\\"\",\"ConvertSpeedJS:func\":\"\\\"// Declare Constants\\\\nconst item = this.item();\\\\nconst modifier = 50;\\\\n\\\\n// Calculate Order Slots Changed\\\\nlet change = item.speed / (-modifier);\\\\nchange = (change >= 0) ? Math.ceil(change) : Math.floor(change);\\\\n\\\\n// Return Change\\\\nreturn change || 0;\\\"\"}","TurnOrder:struct":"{\"General\":\"\",\"DisplayPosition:str\":\"top\",\"DisplayOffsetX:num\":\"0\",\"DisplayOffsetY:num\":\"0\",\"RepositionTopForHelp:eval\":\"true\",\"RepositionTopHelpX:num\":\"+0\",\"RepositionTopHelpY:num\":\"+96\",\"RepositionLogWindow:eval\":\"true\",\"LogWindowOffsetY:num\":\"+0\",\"OrderDirection:eval\":\"false\",\"SubjectDistance:num\":\"16\",\"ScreenBuffer:num\":\"36\",\"UiBackground\":\"\",\"BgDimStyle:str\":\"gradient\",\"BgImageFilename:str\":\"\",\"BgImageOffsetX:num\":\"+0\",\"BgImageOffsetY:num\":\"+0\",\"UiText\":\"\",\"UiFontSize:num\":\"16\",\"UiSubjectText:str\":\"★\",\"UiSubjectOffsetX:num\":\"+0\",\"UiSubjectOffsetY:num\":\"-6\",\"UiCurrentText:str\":\"✦CURRENT TURN✦\",\"UiCurrentOffsetX:num\":\"+6\",\"UiCurrentOffsetY:num\":\"-6\",\"UiNextText:str\":\"✧NEXT TURN✧\",\"UiNextOffsetX:num\":\"+6\",\"UiNextOffsetY:num\":\"-6\",\"UiAlignment:str\":\"auto\",\"Slots\":\"\",\"SpriteThin:num\":\"72\",\"SpriteLength:num\":\"72\",\"PreviewScale:num\":\"0.5\",\"PreviewOffsetX:num\":\"+0\",\"PreviewOffsetY:num\":\"+0\",\"UpdateFrames:num\":\"24\",\"Border\":\"\",\"ShowMarkerBorder:eval\":\"true\",\"BorderActor\":\"\",\"ActorBorderColor:str\":\"4\",\"PreviewActorBorderColor:str\":\"0\",\"ActorSystemBorder:str\":\"\",\"PreviewActorSystemBorder:str\":\"\",\"BorderEnemy\":\"\",\"EnemyBorderColor:str\":\"2\",\"PreviewEnemyBorderColor:str\":\"0\",\"EnemySystemBorder:str\":\"\",\"PreviewEnemySystemBorder:str\":\"\",\"BorderThickness:num\":\"2\",\"Sprite\":\"\",\"ActorSprite\":\"\",\"ActorBattlerType:str\":\"face\",\"ActorBattlerIcon:num\":\"84\",\"EnemySprite\":\"\",\"EnemyBattlerType:str\":\"enemy\",\"EnemyBattlerFaceName:str\":\"Monster\",\"EnemyBattlerFaceIndex:num\":\"1\",\"EnemyBattlerIcon:num\":\"298\",\"EnemyBattlerMatchHue:eval\":\"true\",\"Letter\":\"\",\"EnemyBattlerDrawLetter:eval\":\"true\",\"EnemyBattlerFontFace:str\":\"\",\"EnemyBattlerFontSize:num\":\"16\",\"Background\":\"\",\"ShowMarkerBg:eval\":\"true\",\"BackgroundActor\":\"\",\"ActorBgColor1:str\":\"19\",\"PreviewActorBgColor1:str\":\"19\",\"ActorBgColor2:str\":\"9\",\"PreviewActorBgColor2:str\":\"0\",\"ActorSystemBg:str\":\"\",\"PreviewActorSystemBg:str\":\"\",\"BackgroundEnemy\":\"\",\"EnemyBgColor1:str\":\"19\",\"PreviewEnemyBgColor1:str\":\"19\",\"EnemyBgColor2:str\":\"18\",\"PreviewEnemyBgColor2:str\":\"0\",\"EnemySystemBg:str\":\"\",\"PreviewEnemySystemBg:str\":\"\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_3_SideviewBattleUI","status":true,"description":"[RPG Maker MZ] [Tier 3] [Version 1.09] [SideviewBattleUI]","parameters":{"BreakHead":"----------------------------------","SideviewBattleUI":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","Battler:struct":"{\"Enable:eval\":\"true\",\"OffsetX:num\":\"+0\",\"OffsetY:num\":\"+128\"}","GeneralWindow:struct":"{\"Global\":\"\",\"UiScale:num\":\"0.80\",\"HelpWindow\":\"\",\"HelpFadeStyle:eval\":\"true\",\"ActorCommandWindow\":\"\",\"ActorCommandWindowMaxRows:num\":\"8\",\"PartyCommandWindow\":\"\",\"PartyCommandWindowMaxRows:num\":\"8\",\"ItemWindow\":\"\",\"ItemWindowMaxRows:num\":\"8\",\"ItemWindowWidth:num\":\"400\",\"ItemWindowOffsetX:num\":\"+16\",\"ItemWindowOffsetY:num\":\"+16\",\"SkillWindow\":\"\",\"SkillWindowMaxRows:num\":\"8\",\"SkillWindowWidth:num\":\"400\",\"SkillWindowOffsetX:num\":\"+16\",\"SkillWindowOffsetY:num\":\"+16\"}","StatusWindow:struct":"{\"Dimensions\":\"\",\"WidthBase:num\":\"200\",\"HeightBase:str\":\"auto\",\"HeightBuffer:num\":\"4\",\"MoveDistance:num\":\"48\",\"MoveSpeed:num\":\"4\",\"Standard\":\"\",\"Name\":\"\",\"NameShow:eval\":\"true\",\"NameOffsetX:num\":\"+48\",\"NameOffsetY:num\":\"+0\",\"States\":\"\",\"StatesShow:eval\":\"true\",\"StatesIgnoreScale:eval\":\"true\",\"StatesOffsetX:num\":\"+20\",\"StatesOffsetY:num\":\"+20\",\"Tpb\":\"\",\"TpbShow:eval\":\"true\",\"TpbOffsetX:num\":\"+44\",\"TpbOffsetY:num\":\"+0\",\"Hp\":\"\",\"HpShow:eval\":\"true\",\"HpOffsetX:num\":\"+60\",\"HpOffsetY:num\":\"+0\",\"Mp\":\"\",\"MpShow:eval\":\"true\",\"MpOffsetX:num\":\"+68\",\"MpOffsetY:num\":\"+0\",\"Tp\":\"\",\"TpShow:eval\":\"true\",\"TpOffsetX:num\":\"+74\",\"TpOffsetY:num\":\"+0\",\"Compatibility\":\"\",\"Aggro\":\"\",\"AggroShow:eval\":\"true\",\"AggroOffsetX:num\":\"+44\",\"AggroOffsetY:num\":\"+0\",\"Boost\":\"\",\"BoostShow:eval\":\"true\",\"BoostOffsetX:num\":\"+52\",\"BoostOffsetY:num\":\"+2\",\"Brave\":\"\",\"BraveShow:eval\":\"true\",\"BraveOffsetX:num\":\"+52\",\"BraveOffsetY:num\":\"-6\",\"BreakShield\":\"\",\"BreakShieldShow:eval\":\"true\",\"BreakShieldIgnoreScale:eval\":\"true\",\"BreakShieldOffsetX:num\":\"+20\",\"BreakShieldOffsetY:num\":\"+20\",\"StateTooltips\":\"\",\"StateTooltipsShow:eval\":\"true\",\"JS\":\"\",\"CustomUi:func\":\"\\\"// Declare Variables\\\\nconst actor = arguments[0];\\\\nlet x = 0;\\\\nlet y = 0;\\\\nlet width = this.innerWidth;\\\\nlet height = this.innerHeight;\\\\n\\\\n// Draw Custom Elements\\\\n// Put in code you want here used for windows classes\\\"\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"TransparentMovie","status":true,"description":"","parameters":{}}
];
